msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 14:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/backend_template_api.po\n"
"X-Crowdin-File-ID: 1746\n"
"Language: es_ES\n"

#: ../../api/backend_template_api.rst:2
msgid ":mod:`.backend_template`"
msgstr ":mod:`.backend_template`"

#: matplotlib.backends.backend_template:1 of
msgid "A fully functional, do-nothing backend intended as a template for backend writers.  It is fully functional in that you can select it as a backend e.g. with ::"
msgstr "Un backend completamente funcional y sin hacer nada que pretenda ser una plantilla para escritores de backend. Es totalmente funcional ya que puedes seleccionarlo como un backend p.ej. con ::"

#: matplotlib.backends.backend_template:8 of
msgid "and your program will (should!) run without error, though no output is produced.  This provides a starting point for backend writers; you can selectively implement drawing methods (`~.RendererTemplate.draw_path`, `~.RendererTemplate.draw_image`, etc.) and slowly see your figure come to life instead having to have a full blown implementation before getting any results."
msgstr "y su programa (debería) ejecutarse sin error, aunque no se produce ninguna salida. Esto proporciona un punto de partida para escritores de backend; puedes implementar selectivamente métodos de dibujo (`~. endererTemplate.draw_path`, `~.RenderererTemplate.draw_image`, etc.) y poco a poco ver que tu figura viene a la vida en vez de tener una implementación completa antes de obtener cualquier resultado."

#: matplotlib.backends.backend_template:14 of
msgid "Copy this file to a directory outside of the Matplotlib source tree, somewhere where Python can import it (by adding the directory to your ``sys.path`` or by packaging it as a normal Python package); if the backend is importable as ``import my.backend`` you can then select it using ::"
msgstr "Copie este archivo a un directorio fuera del árbol fuente de Matplotlib, en algún lugar donde Python pueda importarlo (añadiendo el directorio a su ``sys. ath`` o empaquetándolo como un paquete Python normal); si el backend es importable como ``importar my.backend`` puedes seleccionarlo usando ::"

#: matplotlib.backends.backend_template:22 of
msgid "If your backend implements support for saving figures (i.e. has a `print_xyz` method), you can register it as the default handler for a given file type::"
msgstr "Si su backend implementa soporte para el ahorro de cifras (i.e. tiene un método `print_xyz`), puedes registrarlo como el manejador predeterminado para un determinado tipo de archivo::"

#: matplotlib.backends.backend_template.FigureCanvasTemplate:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"

#: matplotlib.backends.backend_template.FigureCanvasTemplate:2 of
msgid "The canvas the figure renders into.  Calls the draw and print fig methods, creates the renderers, etc."
msgstr "El lienzo en el que se muestra la figura. Llama los métodos de dibujo e impresión, crea los renderizadores, etc."

#: matplotlib.backends.backend_template.FigureCanvasTemplate:5 of
msgid "Note: GUI templates will want to connect events for button presses, mouse movements and key presses to functions that call the base class methods button_press_event, button_release_event, motion_notify_event, key_press_event, and key_release_event.  See the implementations of the interactive backends for examples."
msgstr "Nota: Las plantillas GUI querrán conectar eventos para pulsaciones de botones, movimientos del ratón y pulsaciones de teclas a funciones que llaman a los métodos de la clase base button_press_event, button_release_event, motion_notify_event, key_press_event, y key_release_event. Vea las implementaciones de los backends interactivos para ver ejemplos."

#: matplotlib.backends.backend_template.FigureCanvasTemplate of
msgid "Attributes"
msgstr "Atributos"

#: matplotlib.backends.backend_template.FigureCanvasTemplate:27 of
msgid "**figure** : `matplotlib.figure.Figure`"
msgstr "**figura** : `matplotlib.figure.Figure`"

#: matplotlib.backends.backend_template.FigureCanvasTemplate:26 of
msgid "matplotlib.figure.Figure"
msgstr "matplotlib.figure.Figure"

#: matplotlib.backends.backend_template.FigureCanvasTemplate:26 of
msgid "A high-level Figure instance"
msgstr "Una instancia de Figura de alto nivel"

#: matplotlib.backends.backend_template.FigureCanvasTemplate.draw:2 of
msgid "Draw the figure using the renderer."
msgstr "Dibuja la figura usando el renderizador."

#: matplotlib.backends.backend_template.FigureCanvasTemplate.draw:4 of
msgid "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk."
msgstr "Es importante que este método realmente recorra el árbol del artista incluso si no se produce la salida, ya que esto desencadenará trabajos diferidos (como la computación limita los límites automáticos y los valores de tick) a los que los usuarios pueden querer acceder antes de guardar en el disco."

#: matplotlib.backends.backend_template.FigureCanvasTemplate.get_default_filetype:2
#: of
msgid "Return the default savefig file format as specified in :rc:`savefig.format`."
msgstr "Devuelve el formato predeterminado de archivo savefig especificado en :rc:`savefig.format`."

#: matplotlib.backends.backend_template.FigureCanvasTemplate.get_default_filetype:5
#: of
msgid "The returned string does not include a period. This method is overridden in backends that only support a single file type."
msgstr "La cadena devuelta no incluye un período. Este método se reemplaza en backends que sólo soportan un único tipo de archivo."

#: matplotlib.backends.backend_template.FigureCanvasTemplate.print_foo:2 of
msgid "Write out format foo."
msgstr "Escribir formato foo."

#: matplotlib.backends.backend_template.FigureCanvasTemplate.print_foo:4 of
msgid "This method is normally called via `.Figure.savefig` and `.FigureCanvasBase.print_figure`, which take care of setting the figure facecolor, edgecolor, and dpi to the desired output values, and will restore them to the original values.  Therefore, `print_foo` does not need to handle these settings."
msgstr "Este método se llama normalmente a través de `.Figure.savefig` y `.FigureCanvasBase. rint_figure`, que se encarga de ajustar los valores de salida deseados de cara a la figura, bordes y dpi a los valores de salida deseados, y los restaurará a los valores originales. Por lo tanto, `print_foo` no necesita manejar estos ajustes."

#: matplotlib.backends.backend_template.FigureManagerTemplate:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureManagerBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.FigureManagerBase`"

#: matplotlib.backends.backend_template.FigureManagerTemplate:2 of
msgid "Helper class for pyplot mode, wraps everything up into a neat bundle."
msgstr "Clase de ayuda para el modo piplot, envuelve todo en un paquete limpio."

#: matplotlib.backends.backend_template.FigureManagerTemplate:4 of
msgid "For non-interactive backends, the base class is sufficient."
msgstr "Para los backends no interactivos, la clase base es suficiente."

#: matplotlib.backends.backend_template.GraphicsContextTemplate:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.GraphicsContextBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.GraphicsContextBase`"

#: matplotlib.backends.backend_template.GraphicsContextTemplate:2 of
msgid "The graphics context provides the color, line styles, etc...  See the cairo and postscript backends for examples of mapping the graphics context attributes (cap styles, join styles, line widths, colors) to a particular backend.  In cairo this is done by wrapping a cairo.Context object and forwarding the appropriate calls to it using a dictionary mapping styles to gdk constants.  In Postscript, all the work is done by the renderer, mapping line styles to postscript calls."
msgstr "El contexto gráfico proporciona el color, estilos de línea, etc... Vea los backends de cairo y postscript para ver ejemplos de mapeo de los atributos de contexto gráficos (estilos de cap, unir estilos, anchuras de línea, colores) a un backend en particular. En cairo esto se hace envolviendo un cairo. objeto ontext y reenvío de las llamadas apropiadas usando estilos de mapeo de diccionario a constantes de gdk. En Postscript, todo el trabajo es realizado por el renderizador, mapeando estilos de línea a las llamadas postscript."

#: matplotlib.backends.backend_template.GraphicsContextTemplate:10 of
msgid "If it's more appropriate to do the mapping at the renderer level (as in the postscript backend), you don't need to override any of the GC methods. If it's more appropriate to wrap an instance (as in the cairo backend) and do the mapping here, you'll need to override several of the setter methods."
msgstr "Si es más apropiado hacer el mapeo al nivel del renderizador (como en el servidor postscript), no necesita sobreescribir ninguno de los métodos GC. Si es más apropiado envolver una instancia (como en el backend del cairo) y hacer el mapeo aquí, necesita sobreescribir varios de los métodos setter."

#: matplotlib.backends.backend_template.GraphicsContextTemplate:16 of
msgid "The base GraphicsContext stores colors as a RGB tuple on the unit interval, e.g., (0.5, 0.0, 1.0). You may need to map this to colors appropriate for your backend."
msgstr "La base GraphicsContext almacena colores como una tupla RGB en el intervalo unitario, p.ej. (0.5, 0.0, 1.0). Puede que necesites mapear esto a los colores apropiados para tu backend."

#: matplotlib.backends.backend_template.RendererTemplate:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"

#: matplotlib.backends.backend_template.RendererTemplate:2 of
msgid "The renderer handles drawing/rendering operations."
msgstr "El renderizador maneja operaciones de dibujo/renderizado."

#: matplotlib.backends.backend_template.RendererTemplate:4 of
msgid "This is a minimal do-nothing class that can be used to get started when writing a new backend.  Refer to `backend_bases.RendererBase` for documentation of the methods."
msgstr "Esta es una clase mínima de no hacer nada que se puede utilizar para comenzar cuando se escribe un nuevo backend. Consulte `backend_bases.RendererBase` para ver la documentación de los métodos."

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:2 of
msgid "Draw an RGBA image."
msgstr "Draw an RGBA image."

#: matplotlib.backends.backend_template.RendererTemplate.draw_image
#: matplotlib.backends.backend_template.RendererTemplate.draw_text
#: matplotlib.backends.backend_template.RendererTemplate.points_to_pixels of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:8
#: matplotlib.backends.backend_template.RendererTemplate.draw_text:8 of
msgid "**gc** : `.GraphicsContextBase`"
msgstr "**gc** : `.GraphicsContextBase`"

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:7
#: matplotlib.backends.backend_template.RendererTemplate.draw_text:7 of
msgid "GraphicsContextBase"
msgstr "Contexto gráfico base"

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:8 of
msgid "A graphics context with clipping information."
msgstr "Un contexto gráfico con información de recorte."

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:12
#: matplotlib.backends.backend_template.RendererTemplate.draw_text:11 of
msgid "**x**"
msgstr "**x**"

#: of
msgid "scalar"
msgstr "escalar"

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:11 of
msgid "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas."
msgstr "La distancia en unidades físicas (es decir, puntos o píxeles) desde el lado izquierdo del lienzo."

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:16
#: matplotlib.backends.backend_template.RendererTemplate.draw_text:14 of
msgid "**y**"
msgstr "**y**"

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:15 of
msgid "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas."
msgstr "La distancia en unidades físicas (es decir, puntos o píxeles) desde la parte inferior del lienzo."

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:19 of
msgid "**im**"
msgstr "**im**"

#: of
msgid "(N, M, 4) array-like of np.uint8"
msgstr "(N, M, 4) array-like de np.uint8"

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:19 of
msgid "An array of RGBA pixels."
msgstr "Una matriz de píxeles RGBA."

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:43 of
msgid "**transform** : `matplotlib.transforms.Affine2DBase`"
msgstr "**transform** : `matplotlib.transforms.Affine2DBase`"

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:42 of
msgid "matplotlib.transforms.Affine2DBase"
msgstr "matplotlib.transforms.Affine2DBase"

#: matplotlib.backends.backend_template.RendererTemplate.draw_image:22 of
msgid "If and only if the concrete backend is written such that :meth:`option_scale_image` returns ``True``, an affine transformation (i.e., an `.Affine2DBase`) *may* be passed to :meth:`draw_image`.  The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override *x* and *y*, and has to be applied *before* translating the result by *x* and *y* (this can be accomplished by adding *x* and *y* to the translation vector defined by *transform*)."
msgstr "Si y solo si se escribe el backend concreto tal que :meth:`option_scale_image` devuelva ``True``, una transformación de afino (i.e. un `.Affine2DBase`) *podrá* ser pasado a :meth:`draw_image`. El vector de traducción de la transformación se da en unidades físicas (i. ., puntos o píxeles). Tenga en cuenta que la transformación no anula *x* y *y*, y tiene que ser aplicado *antes* de traducir el resultado por *x* y *y* (esto se puede lograr añadiendo *x* y *y* al vector de traducción definido por *transform*)."

#: matplotlib.backends.backend_template.RendererTemplate.draw_path:2 of
msgid "Draw a `~.path.Path` instance using the given affine transform."
msgstr "Dibuja una instancia `~.path.Path` usando la transforma affine dada."

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:2 of
msgid "Draw the text instance."
msgstr "Dibuja la instancia de texto."

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:8 of
msgid "The graphics context."
msgstr "El contexto gráfico."

#: of
msgid "float"
msgstr "float"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:11 of
msgid "The x location of the text in display coords."
msgstr "La posición x del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:14 of
msgid "The y location of the text baseline in display coords."
msgstr "La ubicación y de la línea de referencia del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:17 of
msgid "**s**"
msgstr "**s**"

#: of
msgid "str"
msgstr "str"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:17 of
msgid "The text string."
msgstr "La cadena de texto."

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:20 of
msgid "**prop** : `matplotlib.font_manager.FontProperties`"
msgstr "**prop** : `matplotlib.font_manager.FontProperties`"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:19 of
msgid "matplotlib.font_manager.FontProperties"
msgstr "Propiedades de fuente"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:20 of
msgid "The font properties."
msgstr "Las propiedades de la fuente."

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:23 of
msgid "**angle**"
msgstr "**angle**"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:23 of
msgid "The rotation angle in degrees anti-clockwise."
msgstr "El ángulo de rotación en grados en sentido anti-reloj."

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:34 of
msgid "**mtext** : `matplotlib.text.Text`"
msgstr "**mtext** : `matplotlib.text.Text`"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:33 of
msgid "matplotlib.text.Text"
msgstr "matplotlib.text.Texto"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:26 of
msgid "The original text object to be rendered."
msgstr "El objeto de texto original a ser renderizado."

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:37 of
msgid "Notes"
msgstr "Notes"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:38 of
msgid "**Note for backend implementers:**"
msgstr "**Nota para implementadores de backend:**"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:40 of
msgid "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py::"
msgstr "Cuando está intentando determinar si tiene configurado su cuadro de límite correcto (que es lo que permite que el diseño de texto/alineación funcione correctamente), ayuda a cambiar la línea en el texto. y::"

#: matplotlib.backends.backend_template.RendererTemplate.draw_text:46 of
msgid "to if 1, and then the actual bounding box will be plotted along with your text."
msgstr "a si 1, y luego el cuadro de límite actual será trazado junto con su texto."

#: matplotlib.backends.backend_template.RendererTemplate.flipy:2 of
msgid "Return whether y values increase from top to bottom."
msgstr "Devuelve si los valores y aumentan de arriba a abajo."

#: matplotlib.backends.backend_template.RendererTemplate.flipy:4 of
msgid "Note that this only affects drawing of texts and images."
msgstr "Tenga en cuenta que esto sólo afecta al dibujo de textos e imágenes."

#: matplotlib.backends.backend_template.RendererTemplate.get_canvas_width_height:2
#: of
msgid "Return the canvas width and height in display coords."
msgstr "Devuelve el ancho y la altura del lienzo en las coordenadas de la pantalla."

#: matplotlib.backends.backend_template.RendererTemplate.get_text_width_height_descent:2
#: of
msgid "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string *s* with `.FontProperties` *prop*."
msgstr "Obtener la anchura, la altura y el descenso (offset de la parte inferior a la línea de referencia), en las coordenadas de visualización, de la cadena *s* con `.FontProperties` *prop*."

#: matplotlib.backends.backend_template.RendererTemplate.new_gc:2 of
msgid "Return an instance of a `.GraphicsContextBase`."
msgstr "Devuelve una instancia de un `.GraphicsContextBase`."

#: matplotlib.backends.backend_template.RendererTemplate.points_to_pixels:2 of
msgid "Convert points to display units."
msgstr "Convierte puntos para mostrar unidades."

#: matplotlib.backends.backend_template.RendererTemplate.points_to_pixels:4 of
msgid "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg).  Some imaging systems assume some value for pixels per inch::"
msgstr "Necesitas sobreescribir esta función (a menos que tu backend no tenga un dpi, p.ej. postscript o svg). Algunos sistemas de imágenes asumen algún valor para píxeles por pulgada::"

#: matplotlib.backends.backend_template.RendererTemplate.points_to_pixels:13 of
msgid "**points**"
msgstr "**puntos**"

#: of
msgid "float or array-like"
msgstr "flotante o matriz"

#: matplotlib.backends.backend_template.RendererTemplate.points_to_pixels:13 of
msgid "a float or a numpy array of float"
msgstr "un float o un array numpy de float"

#: matplotlib.backends.backend_template.RendererTemplate.points_to_pixels of
msgid "Returns"
msgstr "Devuelve"

#: matplotlib.backends.backend_template.RendererTemplate.points_to_pixels:30 of
msgid "Points converted to pixels"
msgstr "Puntos convertidos en píxeles"

#: matplotlib.backends.backend_template.draw_if_interactive:2 of
msgid "For image backends - is not required. For GUI backends - this should be overridden if drawing should be done in interactive python mode."
msgstr "Para los backends de la imagen - no es necesario. Para los backends de GUI - esto debería ser anulado si el dibujo debe hacerse en modo python interactivo."

#: matplotlib.backends.backend_template.new_figure_manager:2 of
msgid "Create a new figure manager instance."
msgstr "Crear una nueva instancia del gestor de figuras."

#: matplotlib.backends.backend_template.new_figure_manager_given_figure:2 of
msgid "Create a new figure manager instance for the given figure."
msgstr "Crear una nueva instancia del gestor de figuras para la figura dada."

#: matplotlib.backends.backend_template.show:2 of
msgid "For image backends - is not required. For GUI backends - show() is usually the last line of a pyplot script and tells the backend that it is time to draw.  In interactive mode, this should do nothing."
msgstr "Para los backends de la imagen - no es necesario. Para los backends de GUI - show() es usualmente la última línea de un script pyplot y le dice al backend que es el momento de dibujar. En modo interactivo, esto no debería hacer nada."

