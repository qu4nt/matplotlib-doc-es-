msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 13:44\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/_api_api.po\n"
"X-Crowdin-File-ID: 136\n"
"Language: es_ES\n"

#: ../../api/_api_api.rst:3
msgid "``matplotlib._api``"
msgstr "``matplotlib._api``"

#: matplotlib._api:1 of
msgid "Helper functions for managing the Matplotlib API."
msgstr "Funciones de ayuda para administrar la API de Matplotlib."

#: matplotlib._api:3 matplotlib._api.deprecation:3 of
msgid "This documentation is only relevant for Matplotlib developers, not for users."
msgstr "Esta documentación sólo es relevante para los desarrolladores de Matplotlib, no para los usuarios."

#: matplotlib._api:7 of
msgid "This module and its submodules are for internal use only.  Do not use them in your own code.  We may change the API at any time with no warning."
msgstr "Este módulo y sus submódulos son sólo para uso interno. No los utilices en tu propio código. Podemos cambiar la API en cualquier momento sin previo aviso."

#: matplotlib._api.caching_module_getattr:2 of
msgid "Helper decorator for implementing module-level ``__getattr__`` as a class."
msgstr "Decorador de ayuda para implementar el nivel de módulo ``__getattr__`` como una clase."

#: matplotlib._api.caching_module_getattr:4 of
msgid "This decorator must be used at the module toplevel as follows::"
msgstr "Este decorador debe ser utilizado en el nivel superior del módulo de la siguiente manera::"

#: matplotlib._api.caching_module_getattr:11 of
msgid "The ``__getattr__`` class will be replaced by a ``__getattr__`` function such that trying to access ``name`` on the module will resolve the corresponding property (which may be decorated e.g. with ``_api.deprecated`` for deprecating module globals).  The properties are all implicitly cached.  Moreover, a suitable AttributeError is generated and raised if no property with the given name exists."
msgstr "La clase ``__getattr__`` será reemplazada por una función ``__getattr__`` tal que intentar acceder a ``nombre`` en el módulo resolverá la propiedad correspondiente (que puede ser decorada. . con ``_api. eprecated`` para los globales de módulos obsoletos). Las propiedades son todas implícitamente cacheadas. Además, se genera un AttributeError adecuado y se eleva si no existe una propiedad con el nombre dado."

#: matplotlib._api.check_getitem:2 of
msgid "*kwargs* must consist of a single *key, value* pair.  If *key* is in *_mapping*, return ``_mapping[value]``; else, raise an appropriate ValueError."
msgstr "*kwargs* debe consistir en un único par de *clave, valor*. Si *llave* está en *_mapeo*, devuelve ``_mapeando[value]``; en otro caso, levanta un ValueError."

#: matplotlib._api.check_getitem:19 matplotlib._api.check_in_list:31
#: matplotlib._api.check_isinstance:19 matplotlib._api.check_shape:22
#: matplotlib._api.classproperty:18
#: matplotlib._api.deprecation.delete_parameter:29
#: matplotlib._api.deprecation.deprecated:31
#: matplotlib._api.deprecation.rename_parameter:23
#: matplotlib._api.deprecation.warn_deprecated:51 of
msgid "Examples"
msgstr "Ejemplos"

#: matplotlib._api.check_in_list:2 of
msgid "For each *key, value* pair in *kwargs*, check that *value* is in *_values*."
msgstr "Para cada par de *clave, valor* en *kwargs*, compruebe que *valor* está en *valores*."

#: matplotlib._api.check_in_list
#: matplotlib._api.deprecation.deprecate_method_override
#: matplotlib._api.deprecation.warn_deprecated of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib._api.check_in_list:8 of
msgid "**_values**"
msgstr "**_valores**"

#: of
msgid "iterable"
msgstr "iterable"

#: matplotlib._api.check_in_list:8 of
msgid "Sequence of values to check on."
msgstr "Secuencia de valores a comprobar."

#: matplotlib._api.check_in_list:11 of
msgid "**_print_supported_values**"
msgstr "**Valores_soportados_por_impresión**"

#: of
msgid "bool, default: True"
msgstr "bool, por defecto: True"

#: matplotlib._api.check_in_list:11 of
msgid "Whether to print *_values* when raising ValueError."
msgstr "Si imprimir *_values* al elevar ValueError."

#: matplotlib._api.check_in_list:18
#: matplotlib._api.deprecation.deprecate_method_override:36 of
msgid "**\\*\\*kwargs**"
msgstr "**\\*\\*kwargs**"

#: of
msgid "dict"
msgstr "dict"

#: matplotlib._api.check_in_list:14 of
msgid "*key, value* pairs as keyword arguments to find in *_values*."
msgstr "*llave, valor* pares como argumentos de palabra clave para encontrar en *_values*."

#: matplotlib._api.check_in_list of
msgid "Raises"
msgstr "Plantea"

#: matplotlib._api.check_in_list:28 of
msgid "ValueError"
msgstr "ValueError"

#: matplotlib._api.check_in_list:23 of
msgid "If any *value* in *kwargs* is not found in *_values*."
msgstr "Si algún *valor* en *kwargs* no se encuentra en *_values*."

#: matplotlib._api.check_isinstance:2 of
msgid "For each *key, value* pair in *kwargs*, check that *value* is an instance of one of *_types*; if not, raise an appropriate TypeError."
msgstr "Para cada par de *llave* en *kwargs*, compruebe que *value* es una instancia de uno de *_types*; si no, genera un TypeError apropiado."

#: matplotlib._api.check_isinstance:5 of
msgid "As a special case, a ``None`` entry in *_types* is treated as NoneType."
msgstr "Como un caso especial, se trata una entrada ``Ninguna`` en *_types*."

#: matplotlib._api.check_shape:2 of
msgid "For each *key, value* pair in *kwargs*, check that *value* has the shape *_shape*, if not, raise an appropriate ValueError."
msgstr "Para cada par de *llave* de *kwargs*, compruebe que *value* tiene la forma *_shape*, si no, levanta un ValueError apropiado."

#: matplotlib._api.check_shape:5 of
msgid "*None* in the shape is treated as a \"free\" size that can have any length. e.g. (None, 2) -> (N, 2)"
msgstr "*Ninguno* en la forma se trata como un tamaño \"libre\" que puede tener cualquier longitud. ej. (None, 2) -> (N, 2)"

#: matplotlib._api.check_shape:8 of
msgid "The values checked must be numpy arrays."
msgstr "Los valores marcados deben ser matrices numpy."

#: matplotlib._api.check_shape:23 of
msgid "To check for (N, 2) shaped arrays"
msgstr "Para comprobar por (N, 2) arrays en forma"

#: matplotlib._api.classproperty:1
#: matplotlib._api.deprecation.deprecate_privatize_attribute:1 of
msgid "Bases: :py:class:`object`"
msgstr "Bases: :py:class:`object`"

#: matplotlib._api.classproperty:2 of
msgid "Like `property`, but also triggers on access via the class, and it is the *class* that's passed as argument."
msgstr "Como `property`, pero también activa el acceso a través de la clase, y es la *clase* que se pasa como argumento."

#: matplotlib._api.select_matching_signature:2 of
msgid "Select and call the function that accepts ``*args, **kwargs``."
msgstr "Seleccione y llame a la función que acepta ``*args, **kwargs``."

#: matplotlib._api.select_matching_signature:4 of
msgid "*funcs* is a list of functions which should not raise any exception (other than `TypeError` if the arguments passed do not match their signature)."
msgstr "*funcs* es una lista de funciones que no deberían generar ninguna excepción (aparte de `TypeError` si los argumentos pasados no coinciden con su firma)."

#: matplotlib._api.select_matching_signature:7 of
msgid "`select_matching_signature` tries to call each of the functions in *funcs* with ``*args, **kwargs`` (in the order in which they are given).  Calls that fail with a `TypeError` are silently skipped.  As soon as a call succeeds, `select_matching_signature` returns its return value.  If no function accepts ``*args, **kwargs``, then the `TypeError` raised by the last failing call is re-raised."
msgstr "`select_matching_signature` intenta llamar a cada una de las funciones en *funciones* con ``*args, **kwargs`` (en el orden en que son dadas). Las llamadas que fallan con un `TypeError` se omiten silenciosamente. Tan pronto como una llamada tenga éxito, `select_matching_signature` devuelve su valor devuelto. Si ninguna función acepta ``*args, **kwargs``, entonces el `TypeError` planteado por la última llamada fallida es re-levantado."

#: matplotlib._api.select_matching_signature:14 of
msgid "Callers should normally make sure that any ``*args, **kwargs`` can only bind a single *func* (to avoid any ambiguity), although this is not checked by `select_matching_signature`."
msgstr "Las llamadas normalmente deben asegurarse de que cualquier ``*args, **kwargs`` sólo puede enlazar una única *función* (para evitar cualquier ambigüedad), aunque esto no es comprobado por `select_matching_signature`."

#: matplotlib._api.select_matching_signature:28 of
msgid "Notes"
msgstr "Notes"

#: matplotlib._api.select_matching_signature:29 of
msgid "`select_matching_signature` is intended to help implementing signature-overloaded functions.  In general, such functions should be avoided, except for back-compatibility concerns.  A typical use pattern is ::"
msgstr "`select_matching_signature` está destinado a ayudar a implementar funciones sobrecargadas de firma. En general, tales funciones deben evitarse, excepto por problemas de compatibilidad inversa. Un patrón de uso típico es ::"

#: matplotlib._api.select_matching_signature:45 of
msgid "which allows *my_func* to be called either with two parameters (*old1* and *old2*) or a single one (*new*).  Note that the new signature is given last, so that callers get a `TypeError` corresponding to the new signature if the arguments they passed in do not match any signature."
msgstr "que permite llamar a *my_func* con dos parámetros (*old1* y *old2*) o uno único (*nuevo*). Tenga en cuenta que la nueva firma es la última, para que las llamadas obtengan un `TypeError` correspondiente a la nueva firma si los argumentos que han pasado no coinciden con ninguna firma."

#: matplotlib._api.warn_external:2 of
msgid "`warnings.warn` wrapper that sets *stacklevel* to \"outside Matplotlib\"."
msgstr "`warnings.warn` envoltorio que establece *stacklevel* a \"fuera de Matplotlib\"."

#: matplotlib._api.warn_external:4 of
msgid "The original emitter of the warning can be obtained by patching this function back to `warnings.warn`, i.e. ``_api.warn_external = warnings.warn`` (or ``functools.partial(warnings.warn, stacklevel=2)``, etc.)."
msgstr "El emisor original de la advertencia puede obtenerse parcheando esta función de nuevo a `warnings.warn`, es decir, ``_api.warn_external = warnings.warn`` (o ``functools.partial(warnings.warn, stacklevel=2)``, etc.)."

#: matplotlib._api.deprecation:1 of
msgid "Helper functions for deprecating parts of the Matplotlib API."
msgstr "Funciones de ayuda para partes obsoletas de la API de Matplotlib."

#: matplotlib._api.deprecation:7 of
msgid "This module is for internal use only.  Do not use it in your own code. We may change the API at any time with no warning."
msgstr "Este módulo es sólo para uso interno. No lo utilice en su propio código. Podemos cambiar la API en cualquier momento sin previo aviso."

#: matplotlib._api.deprecation.MatplotlibDeprecationWarning:1 of
msgid "Bases: :py:class:`DeprecationWarning`"
msgstr "Bases: :py:class:`DeprecationWarning`"

#: matplotlib._api.deprecation.MatplotlibDeprecationWarning:2 of
msgid "A class for issuing deprecation warnings for Matplotlib users."
msgstr "Una clase para emitir advertencias de desaprobación para los usuarios de Matplotlib."

#: matplotlib._api.deprecation.delete_parameter:2 of
msgid "Decorator indicating that parameter *name* of *func* is being deprecated."
msgstr "Decorador que indica que el parámetro *nombre* de *función* está siendo desaprobado."

#: matplotlib._api.deprecation.delete_parameter:4 of
msgid "The actual implementation of *func* should keep the *name* parameter in its signature, or accept a ``**kwargs`` argument (through which *name* would be passed)."
msgstr "La implementación real de *func* debe mantener el parámetro *name* en su firma, o aceptar un argumento ``**kwargs`` (a través del cual se pasaría *name*)."

#: matplotlib._api.deprecation.delete_parameter:8 of
msgid "Parameters that come after the deprecated parameter effectively become keyword-only (as they cannot be passed positionally without triggering the DeprecationWarning on the deprecated parameter), and should be marked as such after the deprecation period has passed and the deprecated parameter is removed."
msgstr "Los parámetros que vienen después del parámetro obsoleto se convierten efectivamente en palabra clave (ya que no se pueden pasar posicionalmente sin activar la advertencia de destrucción en el parámetro obsoleto), y debe marcarse como tal después de que el período de desaprobación haya pasado y se elimine el parámetro obsoleto."

#: matplotlib._api.deprecation.delete_parameter:14 of
msgid "Parameters other than *since*, *name*, and *func* are keyword-only and forwarded to `.warn_deprecated`."
msgstr "Los parámetros que no sean *n*, *nombre*, y *función* son sólo palabras clave y reenviados a `.warn_deprecated`."

#: matplotlib._api.deprecation.deprecate_method_override:2 of
msgid "Return ``obj.method`` with a deprecation if it was overridden, else None."
msgstr "Devuelve ``obj.method`` con una desaprobación si fue anulada, sino ninguna."

#: matplotlib._api.deprecation.deprecate_method_override:11 of
msgid "**method**"
msgstr "**método**"

#: matplotlib._api.deprecation.deprecate_method_override:8 of
msgid "An unbound method, i.e. an expression of the form ``Class.method_name``.  Remember that within the body of a method, one can always use ``__class__`` to refer to the class that is currently being defined."
msgstr "Un método unbound (unbound method), es decir, una expresión del formulario ``Class.method_name``. Recuerda que dentro del cuerpo de un método, uno siempre puede usar ``__class__`` para referirse a la clase que se está definiendo actualmente."

#: matplotlib._api.deprecation.deprecate_method_override:15 of
msgid "**obj**"
msgstr "**obj**"

#: matplotlib._api.deprecation.deprecate_method_override:14 of
msgid "Either an object of the class where *method* is defined, or a subclass of that class."
msgstr "O bien un objeto de la clase donde *method* es definido, o una subclase de esa clase."

#: matplotlib._api.deprecation.deprecate_method_override:19 of
msgid "**allow_empty**"
msgstr "**permitir_vacío**"

#: of
msgid "bool, default: False"
msgstr "bool, por defecto: False"

#: matplotlib._api.deprecation.deprecate_method_override:18 of
msgid "Whether to allow overrides by \"empty\" methods without emitting a warning."
msgstr "Si permitir sobrescritas mediante métodos \"empty\" sin emitir una advertencia."

#: matplotlib._api.deprecation.deprecate_method_override:22 of
msgid "Additional parameters passed to `warn_deprecated` to generate the deprecation warning; must at least include the \"since\" key."
msgstr "Parámetros adicionales pasados a `warn_deprecated` para generar la advertencia de desaprobación; debe incluir al menos la clave de \"desaprobación\"."

#: matplotlib._api.deprecation.deprecate_privatize_attribute:2 of
msgid "Helper to deprecate public access to an attribute (or method)."
msgstr "Ayudante para desaprobar el acceso público a un atributo (o método)."

#: matplotlib._api.deprecation.deprecate_privatize_attribute:4 of
msgid "This helper should only be used at class scope, as follows::"
msgstr "Este ayudante solo debe ser utilizado en el ámbito de clase, de la siguiente manera::"

#: matplotlib._api.deprecation.deprecate_privatize_attribute:9 of
msgid "where *all* parameters are forwarded to `deprecated`.  This form makes ``attr`` a property which forwards read and write access to ``self._attr`` (same name but with a leading underscore), with a deprecation warning. Note that the attribute name is derived from *the name this helper is assigned to*.  This helper also works for deprecating methods."
msgstr "donde *todos* los parámetros son reenviados a `obsoletos`. Esta forma hace a ``attr`` una propiedad que reenvía el acceso de lectura y escritura a ``self'. attr`` (mismo nombre pero con guiones bajos principales), con una advertencia de desaprobación. Tenga en cuenta que el nombre de atributo se deriva de *el nombre al que se asigna este ayudante*. Este ayudante también funciona para métodos obsoletos."

#: matplotlib._api.deprecation.deprecated:2 of
msgid "Decorator to mark a function, a class, or a property as deprecated."
msgstr "Decorador para marcar una función, una clase o una propiedad como obsoleta."

#: matplotlib._api.deprecation.deprecated:4 of
msgid "When deprecating a classmethod, a staticmethod, or a property, the ``@deprecated`` decorator should go *under* ``@classmethod`` and ``@staticmethod`` (i.e., `deprecated` should directly decorate the underlying callable), but *over* ``@property``."
msgstr "Al desaprobar un método de clase, un método estático o una propiedad, el decorador ``@deprecated`` debería ir *menos* ``@classmethod`` y ``@staticmethod`` (i. ., `deprecated` debe decorar directamente el callable subyacente), pero *sobre* ``@property``."

#: matplotlib._api.deprecation.deprecated:9 of
msgid "When deprecating a class ``C`` intended to be used as a base class in a multiple inheritance hierarchy, ``C`` *must* define an ``__init__`` method (if ``C`` instead inherited its ``__init__`` from its own base class, then ``@deprecated`` would mess up ``__init__`` inheritance when installing its own (deprecation-emitting) ``C.__init__``)."
msgstr "Al desaprobar una clase ``C`` destinada a ser usada como una clase base en una jerarquía de herencia múltiple, ``C`` *debe* definir un método ``__init__`` (si en su lugar ``C`` heredó su ``__init__`` de su propia clase base, entonces ``@deprecated`` arruinaría la herencia ``__init__`` al instalar su propia (deprecation-emitting) ``C.__init__``)."

#: matplotlib._api.deprecation.deprecated:15 of
msgid "Parameters are the same as for `warn_deprecated`, except that *obj_type* defaults to 'class' if decorating a class, 'attribute' if decorating a property, and 'function' otherwise."
msgstr "Los parámetros son los mismos que para `warn_deprecated`, excepto que *obj_type* por defecto es 'class' si decoramos una clase, 'attribute' si decoramos una propiedad, y 'function' si no lo hacemos."

#: matplotlib._api.deprecation.make_keyword_only:2 of
msgid "Decorator indicating that passing parameter *name* (or any of the following ones) positionally to *func* is being deprecated."
msgstr "Decorador que indica que pasar el parámetro *nombre* (o cualquiera de los siguientes) positivamente a *función* está siendo obsoleto."

#: matplotlib._api.deprecation.make_keyword_only:5 of
msgid "When used on a method that has a pyplot wrapper, this should be the outermost decorator, so that :file:`boilerplate.py` can access the original signature."
msgstr "Cuando se utiliza en un método que tiene un envoltorio pyplot, este debe ser el decorador remoto, para que :file:`boilerplate.py` pueda acceder a la firma original."

#: matplotlib._api.deprecation.rename_parameter:2 of
msgid "Decorator indicating that parameter *old* of *func* is renamed to *new*."
msgstr "Decorator indicando que el parámetro *viejo* de *función* es renombrado a *nuevo*."

#: matplotlib._api.deprecation.rename_parameter:4 of
msgid "The actual implementation of *func* should use *new*, not *old*.  If *old* is passed to *func*, a DeprecationWarning is emitted, and its value is used, even if *new* is also passed by keyword (this is to simplify pyplot wrapper functions, which always pass *new* explicitly to the Axes method). If *new* is also passed but positionally, a TypeError will be raised by the underlying function during argument binding."
msgstr "La implementación real de *func* debe usar *new*, no *old*. Si se pasa *viejo* a *func*, se emite una DeprecationWarning y se utiliza su valor. incluso si *new* también es pasado por palabra clave (esto es para simplificar las funciones de envoltura de pyplot, que siempre pasan *new* explícitamente al método de ejes). Si también se pasa *new* pero posicionalmente, la función subyacente generará un TypeError durante la vinculación del argumento."

#: matplotlib._api.deprecation.warn_deprecated:2 of
msgid "Display a standardized deprecation."
msgstr "Muestra una desaprobación estandarizada."

#: matplotlib._api.deprecation.warn_deprecated:8 of
msgid "**since**"
msgstr "**Excelencia**"

#: of
msgid "str"
msgstr "str"

#: matplotlib._api.deprecation.warn_deprecated:8 of
msgid "The release at which this API became deprecated."
msgstr "El lanzamiento en el que esta API se volvió obsoleta."

#: matplotlib._api.deprecation.warn_deprecated:14 of
msgid "**message**"
msgstr "**mensaje**"

#: of
msgid "str, optional"
msgstr "str, opcional"

#: matplotlib._api.deprecation.warn_deprecated:11 of
#, python-format
msgid "Override the default deprecation message.  The ``%(since)s``, ``%(name)s``, ``%(alternative)s``, ``%(obj_type)s``, ``%(addendum)s``, and ``%(removal)s`` format specifiers will be replaced by the values of the respective arguments passed to this function."
msgstr "Anular el mensaje de desaprobación predeterminado. El ``%(since)s``, ``%(name)s``, ``%(alternative)s``, ``%(obj_type)s``, ``%(addendum)s``, y ``%(removal)s`` especificadores de formato serán reemplazados por los valores de los respectivos argumentos pasados a esta función."

#: matplotlib._api.deprecation.warn_deprecated:17 of
msgid "**name**"
msgstr "**name**"

#: matplotlib._api.deprecation.warn_deprecated:17 of
msgid "The name of the deprecated object."
msgstr "El nombre del objeto obsoleto."

#: matplotlib._api.deprecation.warn_deprecated:22 of
msgid "**alternative**"
msgstr "**alternativa**"

#: matplotlib._api.deprecation.warn_deprecated:20 of
msgid "An alternative API that the user may use in place of the deprecated API.  The deprecation warning will tell the user about this alternative if provided."
msgstr "Una API alternativa que el usuario puede utilizar en lugar de la API obsoleta. La advertencia de desaprobación le informará al usuario sobre esta alternativa si se proporciona."

#: matplotlib._api.deprecation.warn_deprecated:26 of
msgid "**pending**"
msgstr "**pending**"

#: of
msgid "bool, optional"
msgstr "bool, optional"

#: matplotlib._api.deprecation.warn_deprecated:25 of
msgid "If True, uses a PendingDeprecationWarning instead of a DeprecationWarning.  Cannot be used together with *removal*."
msgstr "Si es verdadero, usa un PendingDeprecationWarning en lugar de un DeprecationWarning. No se puede usar junto con *removal*."

#: matplotlib._api.deprecation.warn_deprecated:29 of
msgid "**obj_type**"
msgstr "**obj_type**"

#: matplotlib._api.deprecation.warn_deprecated:29 of
msgid "The object type being deprecated."
msgstr "El tipo de objeto que está siendo obsoleto."

#: matplotlib._api.deprecation.warn_deprecated:32 of
msgid "**addendum**"
msgstr "**añadir**"

#: matplotlib._api.deprecation.warn_deprecated:32 of
msgid "Additional text appended directly to the final message."
msgstr "Texto adicional añadido directamente al mensaje final."

#: matplotlib._api.deprecation.warn_deprecated:48 of
msgid "**removal**"
msgstr "**eliminación**"

#: matplotlib._api.deprecation.warn_deprecated:35 of
msgid "The expected removal version.  With the default (an empty string), a removal version is automatically computed from *since*.  Set to other Falsy values to not schedule a removal date.  Cannot be used together with *pending*."
msgstr "La versión de eliminación esperada. Con el valor predeterminado (una cadena vacía), una versión de eliminación es automáticamente calculada desde *a*. Establecer en otros valores de Falsy para no programar una fecha de eliminación. No se puede utilizar junto con *pendiente*."

