msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-07-06 14:33\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/devel/MEP/MEP09.po\n"
"X-Crowdin-File-ID: 1996\n"
"Language: es_ES\n"

#: ../../devel/MEP/MEP09.rst:3
msgid "MEP9: Global interaction manager"
msgstr "MEP9: Gestor global de interacciones"

#: ../../devel/MEP/MEP09.rst:8
msgid "Add a global manager for all user interactivity with artists; make any artist resizeable, moveable, highlightable, and selectable as desired by the user."
msgstr "Añade un gestor global para toda la interactividad del usuario con los artists; haz que cualquier artista sea redimensionable, movible, destacable y seleccionable a gusto del usuario."

#: ../../devel/MEP/MEP09.rst:13
msgid "Status"
msgstr "Estado"

#: ../../devel/MEP/MEP09.rst:15
msgid "**Discussion**"
msgstr "**Discusión**"

#: ../../devel/MEP/MEP09.rst:18
msgid "Branches and Pull requests"
msgstr "Ramas y Pull requests"

#: ../../devel/MEP/MEP09.rst:19
msgid "https://github.com/dhyams/matplotlib/tree/MEP9"
msgstr "https://github.com/dhyams/matplotlib/tree/MEP9"

#: ../../devel/MEP/MEP09.rst:22
msgid "Abstract"
msgstr "Resumen"

#: ../../devel/MEP/MEP09.rst:24
msgid "The goal is to be able to interact with matplotlib artists in a very similar way as drawing programs do.  When appropriate, the user should be able to move, resize, or select an artist that is already on the canvas.  Of course, the script writer is ultimately in control of whether an artist is able to be interacted with, or whether it is static."
msgstr "El objetivo es poder interactuar con los artists de matplotlib de forma muy similar a como lo hacen los programas de dibujo.  Cuando sea apropiado, el usuario debería ser capaz de mover, redimensionar o seleccionar un artist que ya está en el lienzo.  Por supuesto, el script es quien controla en última instancia si se puede interactuar con un artist o si es estático."

#: ../../devel/MEP/MEP09.rst:31
msgid "This code to do this has already been privately implemented and tested, and would need to be migrated from its current \"mixin\" implementation, to a bona-fide part of matplotlib."
msgstr "Este código para hacer esto ya ha sido implementado y probado de forma privada, y necesitaría ser migrado desde su actual implementación \"mixin\", a una parte bona-fide de matplotlib."

#: ../../devel/MEP/MEP09.rst:35
msgid "The end result would be to have four new keywords available to matplotlib.artist.Artist: _moveable_, _resizeable_, _selectable_, and _highlightable_.  Setting any one of these keywords to True would activate interactivity for that artist."
msgstr "El resultado final sería tener cuatro nuevas palabras clave disponibles para matplotlib.artist.Artist: _moveable_, _resizeable_, _selectable_ y _highlightable_.  Al establecer cualquiera de estas palabras clave como True se activaría la interactividad para ese artist."

#: ../../devel/MEP/MEP09.rst:40
msgid "In effect, this MEP is a logical extension of event handling in matplotlib; matplotlib already supports \"low level\" interactions like left mouse presses, a key press, or similar.  The MEP extends the support to the logical level, where callbacks are performed on the artists when certain interactive gestures from the user are detected."
msgstr "En efecto, este MEP es una extensión lógica del manejo de eventos en matplotlib; matplotlib ya soporta interacciones de \"bajo nivel\" como la pulsación del botón izquierdo del ratón, la pulsación de una tecla o similares.  El MEP extiende el soporte al nivel lógico, donde se realizan callbacks en los artists cuando se detectan ciertos gestos interactivos del usuario."

#: ../../devel/MEP/MEP09.rst:47
msgid "Detailed description"
msgstr "Descripción detallada"

#: ../../devel/MEP/MEP09.rst:49
msgid "This new functionality would be used to allow the end-user to better interact with the graph.  Many times, a graph is almost what the user wants, but a small repositioning and/or resizing of components is necessary.  Rather than force the user to go back to the script to trial-and-error the location, and simple drag and drop would be appropriate."
msgstr "Esta nueva funcionalidad serviría para que el usuario final pudiera interactuar mejor con el grafo.  Muchas veces, un grafo es casi lo que el usuario quiere, pero es necesario un pequeño reposicionamiento y/o cambio de tamaño de los componentes.  En lugar de obligar al usuario a volver al script para probar y equivocarse en la ubicación, un simple arrastrar y soltar sería lo adecuado."

#: ../../devel/MEP/MEP09.rst:56
msgid "Also, this would better support applications that use matplotlib; here, the end-user has no reasonable access or desire to edit the underlying source in order to fine-tune a plot.  Here, if matplotlib offered the capability, one could move or resize artists on the canvas to suit their needs.  Also, the user should be able to highlight (with a mouse over) an artist, and select it with a double-click, if the application supports that sort of thing.  In this MEP, we also want to support the highlighting and selection natively; it is up to application to handle what happens when the artist is selected.  A typical handling would be to display a dialog to edit the properties of the artist."
msgstr "Además, esto soportaría mejor las aplicaciones que utilizan matplotlib; aquí, el usuario final no tiene un acceso razonable o el deseo de editar la fuente subyacente con el fin de ajustar un gráfico.  Aquí, si matplotlib ofreciera la capacidad, uno podría mover o cambiar el tamaño de los artists en el lienzo para adaptarse a sus necesidades.  Además, el usuario debería poder resaltar (con el ratón encima) un artist, y seleccionarlo con un doble clic, si la aplicación soporta ese tipo de cosas.  En este MEP, también queremos soportar el resaltado y la selección de forma nativa; depende de la aplicación manejar lo que sucede cuando el artist es seleccionado.  Un manejo típico sería mostrar un diálogo para editar las propiedades del artist."

#: ../../devel/MEP/MEP09.rst:68
msgid "In the future, as well (this is not part of this MEP), matplotlib could offer backend-specific property dialogs for each artist, which are raised on artist selection.  This MEP would be a necessary stepping stone for that sort of capability."
msgstr "En el futuro, también (esto no es parte de este MEP), matplotlib podría ofrecer diálogos de propiedades específicas para cada artist, que se plantea en la selección del artist.  Este MEP sería un paso necesario para ese tipo de capacidad."

#: ../../devel/MEP/MEP09.rst:73
msgid "There are currently a few interactive capabilities in matplotlib (e.g. legend.draggable()), but they tend to be scattered and are not available for all artists.  This MEP seeks to unify the interactive interface and make it work for all artists."
msgstr "Actualmente hay algunas capacidades interactivas en matplotlib (por ejemplo, legend.draggable()), pero tienden a estar dispersas y no están disponibles para todos los artistas.  Este MEP pretende unificar la interfaz interactiva y hacerla funcionar para todos los artists."

#: ../../devel/MEP/MEP09.rst:78
msgid "The current MEP also includes grab handles for resizing artists, and appropriate boxes drawn when artists are moved or resized."
msgstr "El MEP actual también incluye asas de agarre para cambiar el tamaño de los artists, y cajas apropiadas que se dibujan cuando los artists se mueven o cambian de tamaño."

#: ../../devel/MEP/MEP09.rst:82
msgid "Implementation"
msgstr "Implementación"

#: ../../devel/MEP/MEP09.rst:83
msgid "Add appropriate methods to the \"tree\" of artists so that the interactivity manager has a consistent interface for the interactivity manager to deal with.  The proposed methods to add to the artists, if they are to support interactivity, are:"
msgstr "Añadir métodos apropiados al \"árbol\" de artists para que el gestor de la interactividad tenga una interfaz coherente con la que tratar.  Los métodos propuestos para añadir a los artists, si van a soportar la interactividad, son:"

#: ../../devel/MEP/MEP09.rst:88
msgid "get_pixel_position_ll(self): get the pixel position of the lower left corner of the artist's bounding box"
msgstr "get_pixel_position_ll(self): obtiene la posición del píxel de la esquina inferior izquierda de la caja delimitadora del artista"

#: ../../devel/MEP/MEP09.rst:90
msgid "get_pixel_size(self): get the size of the artist's bounding box, in pixels"
msgstr "get_pixel_size(self): obtiene el tamaño de la caja delimitadora del artist, en píxeles"

#: ../../devel/MEP/MEP09.rst:92
msgid "set_pixel_position_and_size(self,x,y,dx,dy): set the new size of the artist, such that it fits within the specified bounding box."
msgstr "set_pixel_position_and_size(self,x,y,dx,dy): establece el nuevo tamaño del artist, de forma que se ajuste a la caja delimitadora especificada."

#: ../../devel/MEP/MEP09.rst:95
msgid "add capability to the backends to 1) provide cursors, since these are needed for visual indication of moving/resizing, and 2) provide a function that gets the current mouse position"
msgstr "añadir capacidad a los backends para 1) proporcionar cursores, ya que estos son necesarios para la indicación visual de movimiento/redimensionamiento, y 2) proporcionar una función que obtenga la posición actual del ratón"

#: ../../devel/MEP/MEP09.rst:98
msgid "Implement the manager.  This has already been done privately (by dhyams) as a mixin, and has been tested quite a bit.  The goal would be to move the functionality of the manager into the artists so that it is in matplotlib properly, and not as a \"monkey patch\" as I currently have it coded."
msgstr "Implementar el gestor.  Esto ya se ha hecho de forma privada (por dhyams) como un mixin, y se ha probado bastante.  El objetivo sería trasladar la funcionalidad del gestor a los artists para que esté en matplotlib correctamente, y no como un \"parche mono\" como lo tengo codificado actualmente."

#: ../../devel/MEP/MEP09.rst:107
msgid "Current summary of the mixin"
msgstr "Resumen actual del mixin"

#: ../../devel/MEP/MEP09.rst:109
msgid "(Note that this mixin is for now just private code, but can be added to a branch obviously)"
msgstr "(Ten en cuenta que este mixin es por ahora sólo código privado, pero puede ser añadido a una rama obviamente)"

#: ../../devel/MEP/MEP09.rst:112
msgid "InteractiveArtistMixin:"
msgstr "InteractiveArtistMixin:"

#: ../../devel/MEP/MEP09.rst:114
msgid "Mixin class to make any generic object that is drawn on a matplotlib canvas moveable and possibly resizeable.  The Powerpoint model is followed as closely as possible; not because I'm enamoured with Powerpoint, but because that's what most people understand.  An artist can also be selectable, which means that the artist will receive the on_activated() callback when double clicked.  Finally, an artist can be highlightable, which means that a highlight is drawn on the artist whenever the mouse passes over.  Typically, highlightable artists will also be selectable, but that is left up to the user.  So, basically there are four attributes that can be set by the user on a per-artist basis:"
msgstr "Clase Mixin para hacer que cualquier objeto genérico que se dibuje en un lienzo de matplotlib sea movible y posiblemente redimensionable.  Se sigue el modelo de Powerpoint lo más fielmente posible; no porque esté encantado con Powerpoint, sino porque es lo que la mayoría de la gente entiende.  Un artist también puede ser seleccionable, lo que significa que el artist recibirá la llamada de retorno on_activated() cuando se haga doble clic.  Por último, un artist puede ser resaltante, lo que significa que un resaltante se dibuja en el artist cada vez que el ratón pasa por encima.  Normalmente, los artists resaltados también son seleccionables, pero eso se deja a criterio del usuario.  Así que, básicamente, hay cuatro atributos que el usuario puede establecer para cada artist:"

#: ../../devel/MEP/MEP09.rst:126
msgid "highlightable"
msgstr "destacable"

#: ../../devel/MEP/MEP09.rst:127
msgid "selectable"
msgstr "seleccionable"

#: ../../devel/MEP/MEP09.rst:128
msgid "moveable"
msgstr "movible"

#: ../../devel/MEP/MEP09.rst:129
msgid "resizeable"
msgstr "redimensionable"

#: ../../devel/MEP/MEP09.rst:131
msgid "To be moveable (draggable) or resizeable, the object that is the target of the mixin must support the following protocols:"
msgstr "Para ser movible (arrastrable) o redimensionable, el objeto que es el objetivo del mixin debe soportar los siguientes protocolos:"

#: ../../devel/MEP/MEP09.rst:134
msgid "get_pixel_position_ll(self)"
msgstr "get_pixel_position_ll(self)"

#: ../../devel/MEP/MEP09.rst:135
msgid "get_pixel_size(self)"
msgstr "get_pixel_size(self)"

#: ../../devel/MEP/MEP09.rst:136
msgid "set_pixel_position_and_size(self,x,y,sx,sy)"
msgstr "set_pixel_position_and_size(self,x,y,sx,sy)"

#: ../../devel/MEP/MEP09.rst:138
msgid "Note that nonresizeable objects are free to ignore the sx and sy parameters. To be highlightable, the object that is the target of the mixin must also support the following protocol:"
msgstr "Ten en cuenta que los objetos no redimensionables son libres de ignorar los parámetros sx y sy. Para ser destacable, el objeto que es el objetivo del mixin también debe soportar el siguiente protocolo:"

#: ../../devel/MEP/MEP09.rst:142
msgid "get_highlight(self)"
msgstr "get_highlight(self)"

#: ../../devel/MEP/MEP09.rst:144
msgid "Which returns a list of artists that will be used to draw the highlight."
msgstr "Que devuelve una lista de artists que se utilizarán para dibujar el resalte."

#: ../../devel/MEP/MEP09.rst:146
msgid "If the object that is the target of the mixin is not an matplotlib artist, the following protocols must also be implemented.  Doing so is usually fairly trivial, as there has to be an artist *somewhere* that is being drawn.  Typically your object would just route these calls to that artist."
msgstr "Si el objeto que es el objetivo del mixin no es un artist de matplotlib, los siguientes protocolos también deben ser implementados.  Hacerlo es normalmente bastante trivial, ya que tiene que haber un artist *en algún lugar* que se esté dibujando.  Típicamente, su objeto sólo dirigirá estas llamadas a ese artist."

#: ../../devel/MEP/MEP09.rst:152
msgid "get_figure(self)"
msgstr "get_figure(self)"

#: ../../devel/MEP/MEP09.rst:153
msgid "get_axes(self)"
msgstr "get_axes(self)"

#: ../../devel/MEP/MEP09.rst:154
msgid "contains(self,event)"
msgstr "contains(self,event)"

#: ../../devel/MEP/MEP09.rst:155
msgid "set_animated(self,flag)"
msgstr "set_animated(self,flag)"

#: ../../devel/MEP/MEP09.rst:156
msgid "draw(self,renderer)"
msgstr "draw(self,renderer)"

#: ../../devel/MEP/MEP09.rst:157
msgid "get_visible(self)"
msgstr "get_visible(self)"

#: ../../devel/MEP/MEP09.rst:159
msgid "The following notifications are called on the artist, and the artist can optionally implement these."
msgstr "Las siguientes notificaciones son invocadas en el artist, y el artist puede implementarlas opcionalmente."

#: ../../devel/MEP/MEP09.rst:162
msgid "on_select_begin(self)"
msgstr "on_select_begin(self)"

#: ../../devel/MEP/MEP09.rst:163
msgid "on_select_end(self)"
msgstr "on_select_end(self)"

#: ../../devel/MEP/MEP09.rst:164
msgid "on_drag_begin(self)"
msgstr "on_drag_begin(self)"

#: ../../devel/MEP/MEP09.rst:165
msgid "on_drag_end(self)"
msgstr "on_drag_end(self)"

#: ../../devel/MEP/MEP09.rst:166
msgid "on_activated(self)"
msgstr "on_activated(self)"

#: ../../devel/MEP/MEP09.rst:167
msgid "on_highlight(self)"
msgstr "on_highlight(self)"

#: ../../devel/MEP/MEP09.rst:168 ../../devel/MEP/MEP09.rst:181
msgid "on_right_click(self,event)"
msgstr "on_right_click(self,event)"

#: ../../devel/MEP/MEP09.rst:169 ../../devel/MEP/MEP09.rst:179
msgid "on_left_click(self,event)"
msgstr "on_left_click(self,event)"

#: ../../devel/MEP/MEP09.rst:170 ../../devel/MEP/MEP09.rst:180
msgid "on_middle_click(self,event)"
msgstr "on_middle_click(self,event)"

#: ../../devel/MEP/MEP09.rst:171 ../../devel/MEP/MEP09.rst:182
msgid "on_context_click(self,event)"
msgstr "on_context_click(self,event)"

#: ../../devel/MEP/MEP09.rst:172 ../../devel/MEP/MEP09.rst:183
msgid "on_key_up(self,event)"
msgstr "on_key_up(self,event)"

#: ../../devel/MEP/MEP09.rst:173 ../../devel/MEP/MEP09.rst:184
msgid "on_key_down(self,event)"
msgstr "on_key_down(self,event)"

#: ../../devel/MEP/MEP09.rst:175
msgid "The following notifications are called on the canvas, if no interactive artist handles the event:"
msgstr "Las siguientes notificaciones son invocadas en el lienzo, si ningún artist interactivo maneja el evento:"

#: ../../devel/MEP/MEP09.rst:178
msgid "on_press(self,event)"
msgstr "on_press(self,event)"

#: ../../devel/MEP/MEP09.rst:186
msgid "The following functions, if present, can be used to modify the behavior of the interactive object:"
msgstr "Las siguientes funciones, si están presentes, pueden utilizarse para modificar el comportamiento del objeto interactivo:"

#: ../../devel/MEP/MEP09.rst:189
msgid "press_filter(self,event) # determines if the object wants to have the press event routed to it"
msgstr "press_filter(self,event) # determina si el objeto quiere que se le envíe el evento de press"

#: ../../devel/MEP/MEP09.rst:191
msgid "handle_unpicked_cursor() # can be used by the object to set a cursor as the cursor passes over the object when it is unpicked."
msgstr "handle_unpicked_cursor() # puede ser utilizado por el objeto para establecer un cursor cuando el cursor pasa por encima del objeto al ser deseleccionado."

#: ../../devel/MEP/MEP09.rst:194
msgid "Supports multiple canvases, maintaining a drag lock, motion notifier, and a global \"enabled\" flag per canvas. Supports fixed aspect ratio resizings by holding the shift key during the resize."
msgstr "Soporta múltiples lienzos, manteniendo un bloqueo de arrastre, un notificador de movimiento y una bandera global \"habilitada\" por lienzo. Admite redimensionamientos de la razón de aspecto fija manteniendo la tecla de mayúsculas durante el redimensionamiento."

#: ../../devel/MEP/MEP09.rst:198
msgid "Known problems:"
msgstr "Problemas conocidos:"

#: ../../devel/MEP/MEP09.rst:200
msgid "Zorder is not obeyed during the selection/drag operations.  Because of the blit technique used, I do not believe this can be fixed.  The only way I can think of is to search for all artists that have a zorder greater then me, set them all to animated, and then redraw them all on top during each drag refresh.  This might be very slow; need to try."
msgstr "No se respeta el orden Z durante las operaciones de selección/arrastramiento.  Debido a la técnica de blit utilizada, no creo que esto se pueda arreglar.  La única forma que se me ocurre es buscar todos los artists que tengan un orden z mayor que el mío, ponerlos a todos como animados, y luego redibujarlos todos encima durante cada refresco de arrastre.  Esto puede ser muy lento; hay que probarlo."

#: ../../devel/MEP/MEP09.rst:206
msgid "the mixin only works for wx backends because of two things: 1) the cursors are hardcoded, and 2) there is a call to wx.GetMousePosition() Both of these shortcomings are reasonably fixed by having each backend supply these things."
msgstr "el mixin sólo funciona para los backends wx debido a dos cosas: 1) los cursores están codificados, y 2) hay una llamada a wx.GetMousePosition() Ambas deficiencias se arreglan razonablemente haciendo que cada backend suministre estas cosas."

#: ../../devel/MEP/MEP09.rst:212
msgid "Backward compatibility"
msgstr "Compatibilidad con el pasado"

#: ../../devel/MEP/MEP09.rst:214
msgid "No problems with backward compatibility, although once this is in place, it would be appropriate to obsolete some of the existing interactive functions (like legend.draggable())"
msgstr "No hay problemas de retrocompatibilidad, aunque una vez que esto esté en marcha, sería conveniente obviar algunas de las funciones interactivas existentes (como legend.draggable())"

#: ../../devel/MEP/MEP09.rst:219
msgid "Alternatives"
msgstr "Alternativas"

#: ../../devel/MEP/MEP09.rst:221
msgid "None that I know of."
msgstr "Que yo sepa, ninguno."

