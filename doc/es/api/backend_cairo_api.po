msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 14:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/backend_cairo_api.po\n"
"X-Crowdin-File-ID: 1724\n"
"Language: es_ES\n"

#: ../../api/backend_cairo_api.rst:2
msgid ":mod:`.backend_cairo`"
msgstr ":mod:`.backend_cairo`"

#: matplotlib.backends.backend_cairo:2 of
msgid "A Cairo backend for Matplotlib"
msgstr "Un backend de El Cairo para Matplotlib"

#: matplotlib.backends.backend_cairo of
msgid "Author"
msgstr "Autor"

#: matplotlib.backends.backend_cairo:3 of
msgid "Steve Chaplin and others"
msgstr "Steve Chaplin y otros"

#: matplotlib.backends.backend_cairo:5 of
msgid "This backend depends on cairocffi or pycairo."
msgstr "Este backend depende de cairocffi o pycairo."

#: matplotlib.backends.backend_cairo.FigureCanvasCairo:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.GraphicsContextBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.GraphicsContextBase`"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.get_rgb:2 of
msgid "Return a tuple of three or four floats from 0-1."
msgstr "Devuelve una tupla de tres o cuatro flotantes de 0-1."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.restore:2 of
msgid "Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack."
msgstr "Restaurar el contexto gráfico de la pila - necesario sólo para los backends que guardan los contextos gráficos en una pila."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_alpha:2 of
msgid "Set the alpha value used for blending - not supported on all backends."
msgstr "Establece el valor alfa usado para mezclar - no soportado en todos los backends."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_alpha:4 of
msgid "If ``alpha=None`` (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, ``alpha`` will override them."
msgstr "Si ``alpha=Ninguno`` (el valor por defecto), los componentes alfa del primer plano y los colores de relleno se utilizarán para establecer sus respectivas transparencias (cuando sea aplicable); de lo contrario, ``alpha`` los anulará."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_antialiased:2 of
msgid "Set whether object should be drawn with antialiased rendering."
msgstr "Define si el objeto debe ser dibujado con renderizado antialias."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle:2 of
msgid "Set how to draw endpoints of lines."
msgstr "Establecer cómo dibujar los extremos de las líneas."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle
#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes
#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground
#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle
#: matplotlib.backends.backend_cairo.RendererCairo.draw_image
#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text
#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle:21 of
msgid "**cs** : `.CapStyle` or {'butt', 'projecting', 'round'}"
msgstr "**cs** : `.CapStyle` o {'butt', 'projecting', 'round'}"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle:20 of
msgid "CapStyle or {'butt', 'projecting', 'round'}"
msgstr "CapEstilo o {'butt', 'projecting', 'round'}"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_path:2 of
msgid "Set the clip path to a `.TransformedPath` or None."
msgstr "Establece la ruta del clip a un `.TransformedPath` o ninguno."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_rectangle:2
#: of
msgid "Set the clip rectangle to a `.Bbox` or None."
msgstr "Establece el rectángulo del clip a un `.Bbox` o ninguno."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:2 of
msgid "Set the dash style for the gc."
msgstr "Establece el estilo de guión para el gc."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:8 of
msgid "**dash_offset**"
msgstr "**dash_offset**"

#: of
msgid "float"
msgstr "float"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:8 of
msgid "The offset (usually 0)."
msgstr "El desplazamiento (por lo general 0)."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:19 of
msgid "**dash_list**"
msgstr "**lista de guiones**"

#: of
msgid "array-like or None"
msgstr "tipo array o ninguno"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:11 of
msgid "The on-off sequence as points.  None specifies a solid line."
msgstr "La secuencia de encendido como puntos. Ninguna especifica una línea sólida."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:22
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:37 of
msgid "Notes"
msgstr "Notes"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:23 of
msgid "See p. 107 of to PostScript `blue book`_ for more info."
msgstr "Vea p. 107 de a PostScript `libro azul`_ para más información."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground:2 of
msgid "Set the foreground color."
msgstr "Establecer el color de primer plano."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground:8 of
msgid "**fg**"
msgstr "**fg**"

#: of
msgid "color"
msgstr "color"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground:25 of
msgid "**isRGBA**"
msgstr "**isRGBA**"

#: of
msgid "bool"
msgstr "bool"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground:11 of
msgid "If *fg* is known to be an ``(r, g, b, a)`` tuple, *isRGBA* can be set to True to improve performance."
msgstr "Si se sabe que *fg* es una tupla ``(r, g, b, a)``, *isRGBA* puede establecerse en True para mejorar el rendimiento."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle:2 of
msgid "Set how to draw connections between line segments."
msgstr "Establecer cómo dibujar conexiones entre segmentos de línea."

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle:21 of
msgid "**js** : `.JoinStyle` or {'miter', 'round', 'bevel'}"
msgstr "**js** : `.JoinStyle` o {'miter', 'round', 'bevel'}"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle:20 of
msgid "JoinStyle or {'miter', 'round', 'bevel'}"
msgstr "Estilo de registro o {'miter', 'round', 'bevel'}"

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_linewidth:2 of
msgid "Set the linewidth in points."
msgstr "Establecer el ancho de línea en puntos."

#: matplotlib.backends.backend_cairo.RendererCairo:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:2 of
msgid "Draw an RGBA image."
msgstr "Draw an RGBA image."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:8
#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:12
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:8 of
msgid "**gc** : `.GraphicsContextBase`"
msgstr "**gc** : `.GraphicsContextBase`"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:7
#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:11
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:7 of
msgid "GraphicsContextBase"
msgstr "Contexto gráfico base"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:8 of
msgid "A graphics context with clipping information."
msgstr "Un contexto gráfico con información de recorte."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:12
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:11 of
msgid "**x**"
msgstr "**x**"

#: of
msgid "scalar"
msgstr "escalar"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:11 of
msgid "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas."
msgstr "La distancia en unidades físicas (es decir, puntos o píxeles) desde el lado izquierdo del lienzo."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:16
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:14 of
msgid "**y**"
msgstr "**y**"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:15 of
msgid "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas."
msgstr "La distancia en unidades físicas (es decir, puntos o píxeles) desde la parte inferior del lienzo."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:19 of
msgid "**im**"
msgstr "**im**"

#: of
msgid "(N, M, 4) array-like of np.uint8"
msgstr "(N, M, 4) array-like de np.uint8"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:19 of
msgid "An array of RGBA pixels."
msgstr "Una matriz de píxeles RGBA."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:43 of
msgid "**transform** : `matplotlib.transforms.Affine2DBase`"
msgstr "**transform** : `matplotlib.transforms.Affine2DBase`"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:42 of
msgid "matplotlib.transforms.Affine2DBase"
msgstr "matplotlib.transforms.Affine2DBase"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:22 of
msgid "If and only if the concrete backend is written such that :meth:`option_scale_image` returns ``True``, an affine transformation (i.e., an `.Affine2DBase`) *may* be passed to :meth:`draw_image`.  The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override *x* and *y*, and has to be applied *before* translating the result by *x* and *y* (this can be accomplished by adding *x* and *y* to the translation vector defined by *transform*)."
msgstr "Si y solo si se escribe el backend concreto tal que :meth:`option_scale_image` devuelva ``True``, una transformación de afino (i.e. un `.Affine2DBase`) *podrá* ser pasado a :meth:`draw_image`. El vector de traducción de la transformación se da en unidades físicas (i. ., puntos o píxeles). Tenga en cuenta que la transformación no anula *x* y *y*, y tiene que ser aplicado *antes* de traducir el resultado por *x* y *y* (esto se puede lograr añadiendo *x* y *y* al vector de traducción definido por *transform*)."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:2 of
msgid "Draw a marker at each of *path*'s vertices (excluding control points)."
msgstr "Dibuja un marcador en cada uno de los vértices de *path* (excluyendo los puntos de control)."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:4 of
msgid "This provides a fallback implementation of draw_markers that makes multiple calls to :meth:`draw_path`.  Some backends may want to override this method in order to draw the marker only once and reuse it multiple times."
msgstr "Esto proporciona una implementación de draw_markers que hace varias llamadas a :meth:`draw_path`. Algunos backends pueden querer sobreescribir este método para dibujar el marcador una sola vez y reutilizarlo varias veces."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:12
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:8 of
msgid "The graphics context."
msgstr "El contexto gráfico."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:15 of
msgid "**marker_trans** : `matplotlib.transforms.Transform`"
msgstr "**marker_trans** : `matplotlib.transforms.Transform`"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:14
#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:30 of
msgid "matplotlib.transforms.Transform"
msgstr "matplotlib.transforms.Transformar"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:15 of
msgid "An affine transform applied to the marker."
msgstr "Una transformación afectada aplicada al marcador."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:31 of
msgid "**trans** : `matplotlib.transforms.Transform`"
msgstr "**trans** : `matplotlib.transforms.Transform`"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:18 of
msgid "An affine transform applied to the path."
msgstr "Una transformación afectada aplicada a la ruta."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_path:2 of
msgid "Draw a `~.path.Path` instance using the given affine transform."
msgstr "Dibuja una instancia `~.path.Path` usando la transforma affine dada."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:2 of
msgid "Draw the text instance."
msgstr "Dibuja la instancia de texto."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:11 of
msgid "The x location of the text in display coords."
msgstr "La posición x del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:14 of
msgid "The y location of the text baseline in display coords."
msgstr "La ubicación y de la línea de referencia del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:17 of
msgid "**s**"
msgstr "**s**"

#: of
msgid "str"
msgstr "str"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:17 of
msgid "The text string."
msgstr "La cadena de texto."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:20 of
msgid "**prop** : `matplotlib.font_manager.FontProperties`"
msgstr "**prop** : `matplotlib.font_manager.FontProperties`"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:19 of
msgid "matplotlib.font_manager.FontProperties"
msgstr "Propiedades de fuente"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:20 of
msgid "The font properties."
msgstr "Las propiedades de la fuente."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:23 of
msgid "**angle**"
msgstr "**angle**"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:23 of
msgid "The rotation angle in degrees anti-clockwise."
msgstr "El ángulo de rotación en grados en sentido anti-reloj."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:34 of
msgid "**mtext** : `matplotlib.text.Text`"
msgstr "**mtext** : `matplotlib.text.Text`"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:33 of
msgid "matplotlib.text.Text"
msgstr "matplotlib.text.Texto"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:26 of
msgid "The original text object to be rendered."
msgstr "El objeto de texto original a ser renderizado."

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:38 of
msgid "**Note for backend implementers:**"
msgstr "**Nota para implementadores de backend:**"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:40 of
msgid "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py::"
msgstr "Cuando está intentando determinar si tiene configurado su cuadro de límite correcto (que es lo que permite que el diseño de texto/alineación funcione correctamente), ayuda a cambiar la línea en el texto. y::"

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:46 of
msgid "to if 1, and then the actual bounding box will be plotted along with your text."
msgstr "a si 1, y luego el cuadro de límite actual será trazado junto con su texto."

#: matplotlib.backends.backend_cairo.RendererCairo.get_canvas_width_height:2 of
msgid "Return the canvas width and height in display coords."
msgstr "Devuelve el ancho y la altura del lienzo en las coordenadas de la pantalla."

#: matplotlib.backends.backend_cairo.RendererCairo.get_text_width_height_descent:2
#: of
msgid "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string *s* with `.FontProperties` *prop*."
msgstr "Obtener la anchura, la altura y el descenso (offset de la parte inferior a la línea de referencia), en las coordenadas de visualización, de la cadena *s* con `.FontProperties` *prop*."

#: matplotlib.backends.backend_cairo.RendererCairo.new_gc:2 of
msgid "Return an instance of a `.GraphicsContextBase`."
msgstr "Devuelve una instancia de un `.GraphicsContextBase`."

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:2 of
msgid "Convert points to display units."
msgstr "Convierte puntos para mostrar unidades."

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:4 of
msgid "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg).  Some imaging systems assume some value for pixels per inch::"
msgstr "Necesitas sobreescribir esta función (a menos que tu backend no tenga un dpi, p.ej. postscript o svg). Algunos sistemas de imágenes asumen algún valor para píxeles por pulgada::"

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:13 of
msgid "**points**"
msgstr "**puntos**"

#: of
msgid "float or array-like"
msgstr "flotante o matriz"

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:13 of
msgid "a float or a numpy array of float"
msgstr "un float o un array numpy de float"

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels of
msgid "Returns"
msgstr "Devuelve"

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:30 of
msgid "Points converted to pixels"
msgstr "Puntos convertidos en píxeles"

