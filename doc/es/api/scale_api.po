msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 14:11\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/scale_api.po\n"
"X-Crowdin-File-ID: 1948\n"
"Language: es_ES\n"

#: ../../api/scale_api.rst:3
msgid "``matplotlib.scale``"
msgstr "``matplotlib.scale``"

#: matplotlib.scale:1 of
msgid "Scales define the distribution of data values on an axis, e.g. a log scaling. They are defined as subclasses of `ScaleBase`."
msgstr "Las escalas definen la distribución de valores de datos en un eje, por ejemplo, una escala de registro. Se definen como subclases de `ScaleBase`."

#: matplotlib.scale:4 of
msgid "See also `.axes.Axes.set_xscale` and the scales examples in the documentation."
msgstr "Vea también `.axes.Axes.set_xscale` y los ejemplos de escalas en la documentación."

#: matplotlib.scale:6 of
msgid "See :doc:`/gallery/scales/custom_scale` for a full example of defining a custom scale."
msgstr "Vea :doc:`/gallery/scales/custom_scale` para un ejemplo completo de definir una escala personalizada."

#: matplotlib.scale:9 of
msgid "Matplotlib also supports non-separable transformations that operate on both `~.axis.Axis` at the same time.  They are known as projections, and defined in `matplotlib.projections`."
msgstr "Matplotlib también soporta transformaciones no separables que operan en `~.axis.Axis` al mismo tiempo. Son conocidas como proyecciones, y definidas en `matplotlib.projections`."

#: matplotlib.scale.FuncScale:1 matplotlib.scale.LinearScale:1
#: matplotlib.scale.LogScale:1 matplotlib.scale.LogitScale:1
#: matplotlib.scale.SymmetricalLogScale:1 of
msgid "Bases: :py:class:`matplotlib.scale.ScaleBase`"
msgstr "Bases: :py:class:`matplotlib.scale.ScaleBase`"

#: matplotlib.scale.FuncScale:2 of
msgid "Provide an arbitrary scale with user-supplied function for the axis."
msgstr "Proporciona una escala arbitraria con la función suministrada por el usuario para el eje."

#: matplotlib.scale.FuncScale matplotlib.scale.FuncScaleLog
#: matplotlib.scale.FuncTransform
#: matplotlib.scale.FuncTransform.transform_non_affine
#: matplotlib.scale.InvertedLogTransform
#: matplotlib.scale.InvertedLogTransform.transform_non_affine
#: matplotlib.scale.InvertedSymmetricalLogTransform
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine
#: matplotlib.scale.LogScale matplotlib.scale.LogTransform
#: matplotlib.scale.LogTransform.transform_non_affine
#: matplotlib.scale.LogisticTransform matplotlib.scale.LogitScale
#: matplotlib.scale.LogitTransform matplotlib.scale.SymmetricalLogScale
#: matplotlib.scale.SymmetricalLogTransform
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine
#: matplotlib.scale.register_scale matplotlib.scale.scale_factory of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.scale.FuncScale:29 matplotlib.scale.LogScale:29 of
msgid "**axis** : `~matplotlib.axis.Axis`"
msgstr "**eje** : `~matplotlib.axis.Axis`"

#: matplotlib.scale.FuncScale:28 matplotlib.scale.LogScale:28 of
msgid "Axis"
msgstr "Eje"

#: matplotlib.scale.FuncScale:29 matplotlib.scale.FuncScaleLog:30
#: matplotlib.scale.LogScale:29 of
msgid "The axis for the scale."
msgstr "El eje de la escala."

#: matplotlib.scale.FuncScale:50 matplotlib.scale.FuncScaleLog:38 of
msgid "**functions**"
msgstr "**funciones**"

#: of
msgid "(callable, callable)"
msgstr "(llamable, llamable)"

#: matplotlib.scale.FuncScale:32 matplotlib.scale.FuncScaleLog:33 of
msgid "two-tuple of the forward and inverse functions for the scale. The forward function must be monotonic."
msgstr "Dos tubos de las funciones hacia adelante e inversa para la escala, la función hacia adelante debe ser monotónica."

#: matplotlib.scale.FuncScale:35 matplotlib.scale.FuncScaleLog:36 of
msgid "Both functions must have the signature::"
msgstr "Ambas funciones deben tener la firma::"

#: matplotlib.scale.FuncScale.get_transform:2 of
msgid "Return the `.FuncTransform` associated with this scale."
msgstr "Devuelve el `.FuncTransform` asociado con esta escala."

#: matplotlib.scale.FuncScale.set_default_locators_and_formatters:2
#: matplotlib.scale.LinearScale.set_default_locators_and_formatters:2
#: matplotlib.scale.LogScale.set_default_locators_and_formatters:2
#: matplotlib.scale.LogitScale.set_default_locators_and_formatters:2
#: matplotlib.scale.ScaleBase.set_default_locators_and_formatters:2
#: matplotlib.scale.SymmetricalLogScale.set_default_locators_and_formatters:2
#: of
msgid "Set the locators and formatters of *axis* to instances suitable for this scale."
msgstr "Establece los localizadores y formateadores de *eje* a instancias adecuadas para esta escala."

#: matplotlib.scale.FuncScaleLog:1 of
msgid "Bases: :py:class:`matplotlib.scale.LogScale`"
msgstr "Bases: :py:class:`matplotlib.scale.LogScale`"

#: matplotlib.scale.FuncScaleLog:2 of
msgid "Provide an arbitrary scale with user-supplied function for the axis and then put on a logarithmic axes."
msgstr "Proporciona una escala arbitraria con la función suministrada por el usuario para el eje y luego coloca un eje logarítmico."

#: matplotlib.scale.FuncScaleLog:30 matplotlib.scale.LogitScale:31
#: matplotlib.scale.scale_factory:24 of
msgid "**axis** : `matplotlib.axis.Axis`"
msgstr "**eje** : `matplotlib.axis.Axis`"

#: matplotlib.scale.FuncScaleLog:29 matplotlib.scale.LogitScale:30
#: matplotlib.scale.scale_factory:23 of
msgid "matplotlib.axis.Axis"
msgstr "matplotlib.axis.Axis"

#: matplotlib.scale.FuncScaleLog:54 matplotlib.scale.LogScale:32
#: matplotlib.scale.SymmetricalLogScale:13 of
msgid "**base**"
msgstr "**base**"

#: of
msgid "float, default: 10"
msgstr "float, por defecto: 10"

#: matplotlib.scale.FuncScaleLog:41 of
msgid "Logarithmic base of the scale."
msgstr "Base logarítmica de la escala."

#: matplotlib.scale.FuncScaleLog.get_transform:2 of
msgid "Return the `.Transform` associated with this scale."
msgstr "Devuelve el `.Transform` asociado con esta escala."

#: matplotlib.scale.FuncTransform:1 matplotlib.scale.InvertedLogTransform:1
#: matplotlib.scale.InvertedSymmetricalLogTransform:1
#: matplotlib.scale.LogTransform:1 matplotlib.scale.LogisticTransform:1
#: matplotlib.scale.LogitTransform:1 matplotlib.scale.SymmetricalLogTransform:1
#: of
msgid "Bases: :py:class:`matplotlib.transforms.Transform`"
msgstr "Bases: :py:class:`matplotlib.transforms.Transform`"

#: matplotlib.scale.FuncTransform:2 of
msgid "A simple transform that takes and arbitrary function for the forward and inverse transform."
msgstr "Una simple transformación que toma y función arbitraria para la transforma hacia adelante e inversa."

#: matplotlib.scale.FuncTransform:34 of
msgid "**forward**"
msgstr "**Adelante**"

#: of
msgid "callable"
msgstr "llamable"

#: matplotlib.scale.FuncTransform:30 of
msgid "The forward function for the transform.  This function must have an inverse and, for best behavior, be monotonic. It must have the signature::"
msgstr "La función delantera para la transforma. Esta función debe tener una inversa y, para el mejor comportamiento, ser monotónica. Debe tener la firma::"

#: matplotlib.scale.FuncTransform:50 of
msgid "**inverse**"
msgstr "**inversa**"

#: matplotlib.scale.FuncTransform:37 of
msgid "The inverse of the forward function.  Signature as ``forward``."
msgstr "La inversa de la función de futuro. Firma como ``adelante``."

#: ../../docstring matplotlib.scale.FuncTransform.has_inverse:2
#: matplotlib.scale.InvertedLogTransform.has_inverse:2
#: matplotlib.scale.InvertedSymmetricalLogTransform.has_inverse:2
#: matplotlib.scale.LogTransform.has_inverse:2
#: matplotlib.scale.LogisticTransform.has_inverse:2
#: matplotlib.scale.LogitTransform.has_inverse:2
#: matplotlib.scale.SymmetricalLogTransform.has_inverse:2 of
msgid "True if this transform has a corresponding inverse transform."
msgstr "Verdadero si esta transformación tiene una transformación inversa correspondiente."

#: ../../docstring matplotlib.scale.FuncTransform.input_dims:2
#: matplotlib.scale.InvertedLogTransform.input_dims:2
#: matplotlib.scale.InvertedSymmetricalLogTransform.input_dims:2
#: matplotlib.scale.LogTransform.input_dims:2
#: matplotlib.scale.LogisticTransform.input_dims:2
#: matplotlib.scale.LogitTransform.input_dims:2
#: matplotlib.scale.SymmetricalLogTransform.input_dims:2 of
msgid "The number of input dimensions of this transform. Must be overridden (with integers) in the subclass."
msgstr "El número de dimensiones de entrada de esta transformación. Debe ser sobrescrito (con enteros) en la subclase."

#: matplotlib.scale.FuncTransform.inverted:2
#: matplotlib.scale.InvertedLogTransform.inverted:2
#: matplotlib.scale.InvertedSymmetricalLogTransform.inverted:2
#: matplotlib.scale.LogTransform.inverted:2
#: matplotlib.scale.LogisticTransform.inverted:2
#: matplotlib.scale.LogitTransform.inverted:2
#: matplotlib.scale.SymmetricalLogTransform.inverted:2 of
msgid "Return the corresponding inverse transformation."
msgstr "Devuelve la transformación inversa correspondiente."

#: matplotlib.scale.FuncTransform.inverted:4
#: matplotlib.scale.InvertedLogTransform.inverted:4
#: matplotlib.scale.InvertedSymmetricalLogTransform.inverted:4
#: matplotlib.scale.LogTransform.inverted:4
#: matplotlib.scale.LogisticTransform.inverted:4
#: matplotlib.scale.LogitTransform.inverted:4
#: matplotlib.scale.SymmetricalLogTransform.inverted:4 of
msgid "It holds ``x == self.inverted().transform(self.transform(x))``."
msgstr "Sostiene ``x == self.inverted().transform(self.transform(x))``."

#: matplotlib.scale.FuncTransform.inverted:6
#: matplotlib.scale.InvertedLogTransform.inverted:6
#: matplotlib.scale.InvertedSymmetricalLogTransform.inverted:6
#: matplotlib.scale.LogTransform.inverted:6
#: matplotlib.scale.LogisticTransform.inverted:6
#: matplotlib.scale.LogitTransform.inverted:6
#: matplotlib.scale.SymmetricalLogTransform.inverted:6 of
msgid "The return value of this method should be treated as temporary.  An update to *self* does not cause a corresponding update to its inverted copy."
msgstr "El valor de retorno de este método debe ser tratado como temporal.  Una actualización de *self* no provoca la correspondiente actualización de su copia invertida."

#: ../../docstring matplotlib.scale.FuncTransform.is_separable:2
#: matplotlib.scale.InvertedLogTransform.is_separable:2
#: matplotlib.scale.InvertedSymmetricalLogTransform.is_separable:2
#: matplotlib.scale.LogTransform.is_separable:2
#: matplotlib.scale.LogisticTransform.is_separable:2
#: matplotlib.scale.LogitTransform.is_separable:2
#: matplotlib.scale.SymmetricalLogTransform.is_separable:2 of
msgid "True if this transform is separable in the x- and y- dimensions."
msgstr "True si esta transformación es separable en las dimensiones x e y."

#: ../../docstring matplotlib.scale.FuncTransform.output_dims:2
#: matplotlib.scale.InvertedLogTransform.output_dims:2
#: matplotlib.scale.InvertedSymmetricalLogTransform.output_dims:2
#: matplotlib.scale.LogTransform.output_dims:2
#: matplotlib.scale.LogisticTransform.output_dims:2
#: matplotlib.scale.LogitTransform.output_dims:2
#: matplotlib.scale.SymmetricalLogTransform.output_dims:2 of
msgid "The number of output dimensions of this transform. Must be overridden (with integers) in the subclass."
msgstr "El número de dimensiones de salida de esta transformación. Debe ser sobrescrito (con enteros) en la subclase."

#: matplotlib.scale.FuncTransform.transform_non_affine:2
#: matplotlib.scale.InvertedLogTransform.transform_non_affine:2
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine:2
#: matplotlib.scale.LogTransform.transform_non_affine:2
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine:2 of
msgid "Apply only the non-affine part of this transformation."
msgstr "Aplicar sólo la parte no afín de esta transformación."

#: matplotlib.scale.FuncTransform.transform_non_affine:4
#: matplotlib.scale.InvertedLogTransform.transform_non_affine:4
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine:4
#: matplotlib.scale.LogTransform.transform_non_affine:4
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine:4 of
msgid "``transform(values)`` is always equivalent to ``transform_affine(transform_non_affine(values))``."
msgstr "``transform(valores)`` siempre es equivalente a ``transform_affine(transform_non_affine(valores))``."

#: matplotlib.scale.FuncTransform.transform_non_affine:7
#: matplotlib.scale.InvertedLogTransform.transform_non_affine:7
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine:7
#: matplotlib.scale.LogTransform.transform_non_affine:7
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine:7 of
msgid "In non-affine transformations, this is generally equivalent to ``transform(values)``.  In affine transformations, this is always a no-op."
msgstr "En las transformaciones no afines, esto es generalmente equivalente a ``transformar(valores)``.  En las transformaciones afines, esto es siempre un no-op."

#: matplotlib.scale.FuncTransform.transform_non_affine:15
#: matplotlib.scale.InvertedLogTransform.transform_non_affine:15
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine:15
#: matplotlib.scale.LogTransform.transform_non_affine:15
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine:15 of
msgid "**values**"
msgstr "**valores**"

#: matplotlib.scale.FuncTransform.transform_non_affine:33
#: matplotlib.scale.InvertedLogTransform.transform_non_affine:33
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine:33
#: matplotlib.scale.LogTransform.transform_non_affine:33
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine:33 of
msgid "array"
msgstr "array"

#: matplotlib.scale.FuncTransform.transform_non_affine:14
#: matplotlib.scale.InvertedLogTransform.transform_non_affine:14
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine:14
#: matplotlib.scale.LogTransform.transform_non_affine:14
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine:14 of
msgid "The input values as NumPy array of length :attr:`input_dims` or shape (N x :attr:`input_dims`)."
msgstr "Los valores de entrada como arreglo NumPy de longitud :attr:`input_dims` o forma (N x :attr:`input_dims`)."

#: matplotlib.scale.FuncTransform.transform_non_affine
#: matplotlib.scale.InvertedLogTransform.transform_non_affine
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine
#: matplotlib.scale.LogTransform.transform_non_affine
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine of
msgid "Returns"
msgstr "Devuelve"

#: matplotlib.scale.FuncTransform.transform_non_affine:20
#: matplotlib.scale.InvertedLogTransform.transform_non_affine:20
#: matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine:20
#: matplotlib.scale.LogTransform.transform_non_affine:20
#: matplotlib.scale.SymmetricalLogTransform.transform_non_affine:20 of
msgid "The output values as NumPy array of length :attr:`input_dims` or shape (N x :attr:`output_dims`), depending on the input."
msgstr "Los valores de salida como arreglo NumPy de longitud :attr:`input_dims` o forma (N x :attr:`output_dims`), dependiendo de la entrada."

#: matplotlib.scale.InvertedLogTransform:23
#: matplotlib.scale.InvertedSymmetricalLogTransform:23
#: matplotlib.scale.LogTransform:23 matplotlib.scale.LogisticTransform:23
#: matplotlib.scale.LogitTransform:23
#: matplotlib.scale.SymmetricalLogTransform:23 of
msgid "**shorthand_name**"
msgstr "**shorthand_name**"

#: of
msgid "str"
msgstr "str"

#: matplotlib.scale.InvertedLogTransform:8
#: matplotlib.scale.InvertedSymmetricalLogTransform:8
#: matplotlib.scale.LogTransform:8 matplotlib.scale.LogisticTransform:8
#: matplotlib.scale.LogitTransform:8 matplotlib.scale.SymmetricalLogTransform:8
#: of
msgid "A string representing the \"name\" of the transform. The name carries no significance other than to improve the readability of ``str(transform)`` when DEBUG=True."
msgstr "Una cadena que representa el \"nombre\" de la transformación. El nombre no tiene más significado que el de mejorar la legibilidad de ``str(transform)`` cuando DEBUG=True."

#: matplotlib.scale.LinearScale:2 of
msgid "The default linear scale."
msgstr "La escala lineal por defecto."

#: matplotlib.scale.LinearScale.get_transform:2 of
msgid "Return the transform for linear scaling, which is just the `~matplotlib.transforms.IdentityTransform`."
msgstr "Devuelve la transformación para escalado lineal, que es sólo el `~matplotlib.transforms.IdentityTransform`."

#: matplotlib.scale.LogScale:2 of
msgid "A standard logarithmic scale.  Care is taken to only plot positive values."
msgstr "Una escala logarítmica estándar. Cuidado con sólo trazar valores positivos."

#: matplotlib.scale.LogScale:32 matplotlib.scale.SymmetricalLogScale:13 of
msgid "The base of the logarithm."
msgstr "La base del logaritmo."

#: matplotlib.scale.LogScale:36 matplotlib.scale.LogitScale:36 of
msgid "**nonpositive**"
msgstr "**no positiva**"

#: of
msgid "{'clip', 'mask'}, default: 'clip'"
msgstr "{'clip', 'mask'}, default: 'clip'"

#: matplotlib.scale.LogScale:35 of
msgid "Determines the behavior for non-positive values. They can either be masked as invalid, or clipped to a very small positive number."
msgstr "Determina el comportamiento para valores no positivos. Pueden ser enmascarados como inválidos, o recortados a un número positivo muy pequeño."

#: matplotlib.scale.LogScale:54 matplotlib.scale.SymmetricalLogScale:22 of
msgid "**subs**"
msgstr "**subs**"

#: of
msgid "sequence of int, default: None"
msgstr "secuencia de int, por defecto: ninguna"

#: matplotlib.scale.LogScale:39 of
msgid "Where to place the subticks between each major tick.  For example, in a log10 scale, ``[2, 3, 4, 5, 6, 7, 8, 9]`` will place 8 logarithmically spaced minor ticks between each major tick."
msgstr "Dónde colocar los subticks entre cada tick importante. Por ejemplo, en una escala log10, ``[2, 3, 4, 5, 6, 7, 8, 9]`` colocará 8 ticks menores con espacio logarítmico entre cada tick principal."

#: matplotlib.scale.LogScale.get_transform:2 of
msgid "Return the `.LogTransform` associated with this scale."
msgstr "Devuelve el `.LogTransform` asociado con esta escala."

#: matplotlib.scale.LogScale.limit_range_for_scale:2 of
msgid "Limit the domain to positive values."
msgstr "Limitar el dominio a valores positivos."

#: matplotlib.scale.LogisticTransform.transform_non_affine:2 of
msgid "logistic transform (base 10)"
msgstr "transformación logística (base 10)"

#: matplotlib.scale.LogitScale:2 of
msgid "Logit scale for data between zero and one, both excluded."
msgstr "Escala de registro para datos entre cero y uno, ambos excluidos."

#: matplotlib.scale.LogitScale:4 of
msgid "This scale is similar to a log scale close to zero and to one, and almost linear around 0.5. It maps the interval ]0, 1[ onto ]-infty, +infty[."
msgstr "Esta escala es similar a una escala de registro cercana a cero y a una, y casi lineal alrededor de 0. . Mapea el intervalo ]0, 1[ en ]-infty, +infty[."

#: matplotlib.scale.LogitScale:31 of
msgid "Currently unused."
msgstr "Actualmente sin usar."

#: of
msgid "{'mask', 'clip'}"
msgstr "{'mask', 'clip'}"

#: matplotlib.scale.LogitScale:34 of
msgid "Determines the behavior for values beyond the open interval ]0, 1[. They can either be masked as invalid, or clipped to a number very close to 0 or 1."
msgstr "Determina el comportamiento de valores más allá del intervalo abierto ]0, 1[. Pueden ser enmascarados como inválidos, o recortados a un número muy cercano a 0 o 1."

#: matplotlib.scale.LogitScale:40 of
msgid "**use_overline**"
msgstr "**use_overline**"

#: of
msgid "bool, default: False"
msgstr "bool, por defecto: False"

#: matplotlib.scale.LogitScale:39 of
msgid "Indicate the usage of survival notation (\\overline{x}) in place of standard notation (1-x) for probability close to one."
msgstr "Indique el uso de notación de supervivencia (\\overline{x}) en lugar de notación estándar (1-x) para probabilidad cercana a una."

#: matplotlib.scale.LogitScale:56 of
msgid "**one_half** : str, default: r\"\\frac{1}{2}\""
msgstr "**one_half** : str, por defecto: r\"\\frac{1}{2}\""

#: of
msgid "str, default: r\"\\frac{1}{2}\""
msgstr "str, por defecto: r\"\\frac{1}{2}\""

#: matplotlib.scale.LogitScale:43 of
msgid "The string used for ticks formatter to represent 1/2."
msgstr "La cadena usada para el formateador de ticks para representar 1/2."

#: matplotlib.scale.LogitScale.get_transform:2 of
msgid "Return the `.LogitTransform` associated with this scale."
msgstr "Devuelve el `.LogitTransform` asociado con esta escala."

#: matplotlib.scale.LogitScale.limit_range_for_scale:2 of
msgid "Limit the domain to values between 0 and 1 (excluded)."
msgstr "Limitar el dominio a valores entre 0 y 1 (excluidos)."

#: matplotlib.scale.LogitTransform.transform_non_affine:2 of
msgid "logit transform (base 10), masked or clipped"
msgstr "transformar logit (base 10), enmascarado o recortado"

#: matplotlib.scale.ScaleBase:1 of
msgid "Bases: :py:class:`object`"
msgstr "Bases: :py:class:`object`"

#: matplotlib.scale.ScaleBase:2 of
msgid "The base class for all scales."
msgstr "La clase base para todas las escalas."

#: matplotlib.scale.ScaleBase:4 of
msgid "Scales are separable transformations, working on a single dimension."
msgstr "Las escalas son transformaciones separables, trabajando en una sola dimensión."

#: matplotlib.scale.ScaleBase:6 of
msgid "Subclasses should override"
msgstr "Las subclases deben sobreescribir"

#: matplotlib.scale.ScaleBase:8 of
msgid ":attr:`name`"
msgstr ":attr:`nombre`"

#: matplotlib.scale.ScaleBase:9 of
msgid "The scale's name."
msgstr "Nombre de la escala."

#: matplotlib.scale.ScaleBase:12 of
msgid ":meth:`get_transform`"
msgstr ":meth:`obtener_transform`"

#: matplotlib.scale.ScaleBase:11 of
msgid "A method returning a `.Transform`, which converts data coordinates to scaled coordinates.  This transform should be invertible, so that e.g. mouse positions can be converted back to data coordinates."
msgstr "Un método que devuelve un `.Transform`, que convierte las coordenadas de datos en coordenadas escaladas. Esta transformación debe ser inversa, de modo que por ejemplo las posiciones del ratón puedan ser convertidas de nuevo a coordenadas de datos."

#: matplotlib.scale.ScaleBase:15 of
msgid ":meth:`set_default_locators_and_formatters`"
msgstr ":meth:`set_default_locators_and_formatters`"

#: matplotlib.scale.ScaleBase:15 of
msgid "A method that sets default locators and formatters for an `~.axis.Axis` that uses this scale."
msgstr "Un método que establece los localizadores y formatos predeterminados para un `~.axis.Axis` que utiliza esta escala."

#: matplotlib.scale.ScaleBase:33 of
msgid ":meth:`limit_range_for_scale`"
msgstr ":meth:`limit_range_para_escala`"

#: matplotlib.scale.ScaleBase:18 of
msgid "An optional method that \"fixes\" the axis range to acceptable values, e.g. restricting log-scaled axes to positive values."
msgstr "Un método opcional que \"corrige\" el rango de ejes a valores aceptables, por ejemplo, restringiendo ejes escalados en el registro a valores positivos."

#: matplotlib.scale.ScaleBase:39 matplotlib.scale.SymmetricalLogScale:49 of
msgid "Construct a new scale."
msgstr "Construye una nueva escala."

#: matplotlib.scale.ScaleBase:52 matplotlib.scale.SymmetricalLogScale:62 of
msgid "Notes"
msgstr "Notes"

#: matplotlib.scale.ScaleBase:53 matplotlib.scale.SymmetricalLogScale:63 of
msgid "The following note is for scale implementors."
msgstr "La siguiente nota es para implementadores de escala."

#: matplotlib.scale.ScaleBase:55 matplotlib.scale.SymmetricalLogScale:65 of
msgid "For back-compatibility reasons, scales take an `~matplotlib.axis.Axis` object as first argument.  However, this argument should not be used: a single scale object should be usable by multiple `~matplotlib.axis.Axis`\\es at the same time."
msgstr "Por razones de compatibilidad inversa, las escalas toman un objeto `~matplotlib.axis.Axis` como primer argumento. Sin embargo, este argumento no debe ser usado: un objeto de una sola escala debe ser usado por múltiples `~matplotlib.axis.Axis`\\es al mismo tiempo."

#: matplotlib.scale.ScaleBase.get_transform:2 of
msgid "Return the `.Transform` object associated with this scale."
msgstr "Devuelve el objeto `.Transform` asociado con esta escala."

#: matplotlib.scale.ScaleBase.limit_range_for_scale:2 of
msgid "Return the range *vmin*, *vmax*, restricted to the domain supported by this scale (if any)."
msgstr "Devuelve el rango *vmin*, *vmax*, restringido al dominio soportado por esta escala (si existe)."

#: matplotlib.scale.ScaleBase.limit_range_for_scale:5 of
msgid "*minpos* should be the minimum positive value in the data. This is used by log scales to determine a minimum value."
msgstr "*minpos* debe ser el valor positivo mínimo en los datos. Esto es usado por escalas de registro para determinar un valor mínimo."

#: matplotlib.scale.SymmetricalLogScale:2 of
msgid "The symmetrical logarithmic scale is logarithmic in both the positive and negative directions from the origin."
msgstr "La escala logarítmica simétrica es logarítmica tanto en las direcciones positivas como negativas desde el origen."

#: matplotlib.scale.SymmetricalLogScale:5 of
msgid "Since the values close to zero tend toward infinity, there is a need to have a range around zero that is linear.  The parameter *linthresh* allows the user to specify the size of this range (-*linthresh*, *linthresh*)."
msgstr "Puesto que los valores cercanos a cero tienden a ser infinitos, hay una necesidad de tener un rango alrededor de cero que sea lineal. El parámetro *linuco* permite al usuario especificar el tamaño de este rango (-*linuco*, *linuco*)."

#: matplotlib.scale.SymmetricalLogScale:17 of
msgid "**linthresh**"
msgstr "**linthresh**"

#: of
msgid "float, default: 2"
msgstr "float, default: 2"

#: matplotlib.scale.SymmetricalLogScale:16 of
msgid "Defines the range ``(-x, x)``, within which the plot is linear. This avoids having the plot go to infinity around zero."
msgstr "Define el rango ``(-x, x)``, dentro del cual la trama es lineal. Esto evita que la trama vaya a infinidad alrededor de cero."

#: of
msgid "sequence of int"
msgstr "secuencia de int"

#: matplotlib.scale.SymmetricalLogScale:20 of
msgid "Where to place the subticks between each major tick. For example, in a log10 scale: ``[2, 3, 4, 5, 6, 7, 8, 9]`` will place 8 logarithmically spaced minor ticks between each major tick."
msgstr "Dónde colocar los subticks entre cada tick importante. Por ejemplo, en una escala log10: ``[2, 3, 4, 5, 6, 7, 8, 9]`` colocará 8 ticks menores, espaciados logarítmicamente entre cada tick principal."

#: matplotlib.scale.SymmetricalLogScale:43 of
msgid "**linscale**"
msgstr "**linscale**"

#: of
msgid "float, optional"
msgstr "float, opcional"

#: matplotlib.scale.SymmetricalLogScale:25 of
msgid "This allows the linear range ``(-linthresh, linthresh)`` to be stretched relative to the logarithmic range. Its value is the number of decades to use for each half of the linear range. For example, when *linscale* == 1.0 (the default), the space used for the positive and negative halves of the linear range will be equal to one decade in the logarithmic range."
msgstr "Esto permite que el rango lineal ``(-linúm, linítmica)`` sea estirado relativo al rango logarítmico. Su valor es el número de décadas a usar para cada mitad del rango lineal. Por ejemplo, cuando *linscale* == 1. (el valor por defecto), el espacio utilizado para las mitades positivas y negativas de la gama lineal será igual a una década en el rango logarítmico."

#: matplotlib.scale.SymmetricalLogScale.get_transform:2 of
msgid "Return the `.SymmetricalLogTransform` associated with this scale."
msgstr "Devuelve el `.SymmetricalLogTransform` asociado con esta escala."

#: matplotlib.scale.get_scale_names:2 of
msgid "Return the names of the available scales."
msgstr "Devuelve los nombres de las escalas disponibles."

#: matplotlib.scale.register_scale:2 of
msgid "Register a new kind of scale."
msgstr "Registrar un nuevo tipo de escala."

#: matplotlib.scale.register_scale:21 of
msgid "**scale_class** : subclass of `ScaleBase`"
msgstr "**clase_escala** : subclase de `ScaleBase`"

#: of
msgid "subclass of"
msgstr "subclase de"

#: matplotlib.scale.register_scale:8 of
msgid "The scale to register."
msgstr "La escala a registrar."

#: matplotlib.scale.scale_factory:2 of
msgid "Return a scale class by name."
msgstr "Devuelve una clase de escala por nombre."

#: matplotlib.scale.scale_factory:8 of
msgid "**scale**"
msgstr "**escala**"

#: of
msgid "{'function', 'functionlog', 'linear', 'log', 'logit', 'symlog'}"
msgstr "{'function', 'functionlog', 'linear', 'log', 'logit', 'symlog'}"

