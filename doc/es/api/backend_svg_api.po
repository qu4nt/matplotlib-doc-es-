msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 14:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/backend_svg_api.po\n"
"X-Crowdin-File-ID: 1744\n"
"Language: es_ES\n"

#: ../../api/backend_svg_api.rst:2
msgid ":mod:`.backend_svg`"
msgstr ":mod:`.backend_svg`"

#: matplotlib.backends.backend_svg.FigureCanvasSVG:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"

#: matplotlib.backends.backend_svg.FigureCanvasSVG.draw:2 of
msgid "Render the `.Figure`."
msgstr "Renderiza la `.Figure`."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.draw:4 of
msgid "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk."
msgstr "Es importante que este método realmente recorra el árbol del artista incluso si no se produce la salida, ya que esto desencadenará trabajos diferidos (como la computación limita los límites automáticos y los valores de tick) a los que los usuarios pueden querer acceder antes de guardar en el disco."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.get_default_filetype:2 of
msgid "Return the default savefig file format as specified in :rc:`savefig.format`."
msgstr "Devuelve el formato predeterminado de archivo savefig especificado en :rc:`savefig.format`."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.get_default_filetype:5 of
msgid "The returned string does not include a period. This method is overridden in backends that only support a single file type."
msgstr "La cadena devuelta no incluye un período. Este método se reemplaza en backends que sólo soportan un único tipo de archivo."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg
#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle
#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles
#: matplotlib.backends.backend_svg.RendererSVG.draw_image
#: matplotlib.backends.backend_svg.RendererSVG.draw_markers
#: matplotlib.backends.backend_svg.RendererSVG.draw_text
#: matplotlib.backends.backend_svg.XMLWriter
#: matplotlib.backends.backend_svg.XMLWriter.close
#: matplotlib.backends.backend_svg.XMLWriter.comment
#: matplotlib.backends.backend_svg.XMLWriter.data
#: matplotlib.backends.backend_svg.XMLWriter.end
#: matplotlib.backends.backend_svg.XMLWriter.start of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:8 of
msgid "**filename**"
msgstr "**nombre de archivo**"

#: of
msgid "str or path-like or file-like"
msgstr "str o como ruta o archivo"

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:8 of
msgid "Output target; if a string, a file will be opened for writing."
msgstr "Destino de salida; si una cadena, un archivo será abierto para escritura."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:46 of
msgid "**metadata**"
msgstr "**metadatos**"

#: of
msgid "dict[str, Any], optional"
msgstr "dict[str, Any], opcional"

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:11 of
msgid "Metadata in the SVG file defined as key-value pairs of strings, datetimes, or lists of strings, e.g., ``{'Creator': 'My software', 'Contributor': ['Me', 'My Friend'], 'Title': 'Awesome'}``."
msgstr "Metadatos en el archivo SVG definidos como pares clave-valor de cadenas, fechas o listas de cadenas, e. ., ``{'Creador': 'Mi software', 'Contributor': ['Yo', 'Mi amigo'], 'Título': 'Awesome'}``."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:15 of
msgid "The standard keys and their value types are:"
msgstr "Las claves estándar y sus tipos de valor son:"

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:17 of
msgid "*str*: ``'Coverage'``, ``'Description'``, ``'Format'``, ``'Identifier'``, ``'Language'``, ``'Relation'``, ``'Source'``, ``'Title'``, and ``'Type'``."
msgstr "*str*: ``'Coverage'``, ``'Description'``, ``'Format'``, ``'Identifier'``, ``'Language'``, ``'Relation'``, ``'Fuente'``, ``'Título'``, y ``'Título'``."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:20 of
msgid "*str* or *list of str*: ``'Contributor'``, ``'Creator'``, ``'Keywords'``, ``'Publisher'``, and ``'Rights'``."
msgstr "*str* o *lista de str*: ``'Contributor'``, ``'Creator'``, ``'Keywords'``, ``'Publisher'``, y ``'rights'``."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:22 of
msgid "*str*, *date*, *datetime*, or *tuple* of same: ``'Date'``. If a non-*str*, then it will be formatted as ISO 8601."
msgstr "*str*, *date*, *datetime*, or *tuple* of same: ``'Date'``. If a non-*str*, then it will be formatted as ISO 8601."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:25 of
msgid "Values have been predefined for ``'Creator'``, ``'Date'``, ``'Format'``, and ``'Type'``. They can be removed by setting them to `None`."
msgstr "Los valores han sido predefinidos para ``'Creator'``, ``'Date'``, ``'Format'``, y ``'Type'``. Pueden ser eliminados estableciéndolos a `Ninguno`."

#: matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg:29 of
msgid "Information is encoded as `Dublin Core Metadata`__."
msgstr "La información está codificada como `Dublin Core Metadata`__."

#: matplotlib.backends.backend_svg.RendererSVG:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"

#: matplotlib.backends.backend_svg.RendererSVG.close_group:2 of
msgid "Close a grouping element with label *s*."
msgstr "Cerrar un elemento de agrupación con la etiqueta *s*."

#: matplotlib.backends.backend_svg.RendererSVG.close_group:4
#: matplotlib.backends.backend_svg.RendererSVG.open_group:4 of
msgid "Only used by the SVG renderer."
msgstr "Sólo usado por el renderizador SVG."

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:2 of
msgid "Draw a Gouraud-shaded triangle."
msgstr "Dibuja un triángulo sombreado por Gouraud."

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:8
#: matplotlib.backends.backend_svg.RendererSVG.draw_image:8
#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:12
#: matplotlib.backends.backend_svg.RendererSVG.draw_text:8 of
msgid "**gc** : `.GraphicsContextBase`"
msgstr "**gc** : `.GraphicsContextBase`"

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:7
#: matplotlib.backends.backend_svg.RendererSVG.draw_image:7
#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:11
#: matplotlib.backends.backend_svg.RendererSVG.draw_text:7 of
msgid "GraphicsContextBase"
msgstr "Contexto gráfico base"

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:8
#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:12
#: matplotlib.backends.backend_svg.RendererSVG.draw_text:8 of
msgid "The graphics context."
msgstr "El contexto gráfico."

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:11
#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles:8 of
msgid "**points**"
msgstr "**puntos**"

#: of
msgid "(3, 2) array-like"
msgstr "(3, 2) matriz"

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:11 of
msgid "Array of (x, y) points for the triangle."
msgstr "Arreglo de puntos (x, y) para el triángulo."

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:14
#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles:11 of
msgid "**colors**"
msgstr "**colores**"

#: of
msgid "(3, 4) array-like"
msgstr "(3, 4) tipo matriz"

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:14 of
msgid "RGBA colors for each point of the triangle."
msgstr "Colores RGBA para cada punto del triángulo."

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:30
#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles:27 of
msgid "**transform** : `matplotlib.transforms.Transform`"
msgstr "**transform** : `matplotlib.transforms.Transform`"

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:29
#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles:26
#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:14
#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:30 of
msgid "matplotlib.transforms.Transform"
msgstr "matplotlib.transforms.Transformar"

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle:17
#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles:14 of
msgid "An affine transform to apply to the points."
msgstr "Una transformación de afecto para aplicar a los puntos."

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles:2 of
msgid "Draw a series of Gouraud triangles."
msgstr "Dibuja una serie de triángulos de Gouraud."

#: of
msgid "(N, 3, 2) array-like"
msgstr "(N, 3, 2) array-like"

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles:8 of
msgid "Array of *N* (x, y) points for the triangles."
msgstr "Array de puntos *N* (x, y) para los triángulos."

#: of
msgid "(N, 3, 4) array-like"
msgstr "(N, 3, 4) matriz"

#: matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles:11 of
msgid "Array of *N* RGBA colors for each point of the triangles."
msgstr "Array de colores *N* RGBA para cada punto de los triángulos."

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:2 of
msgid "Draw an RGBA image."
msgstr "Draw an RGBA image."

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:8 of
msgid "A graphics context with clipping information."
msgstr "Un contexto gráfico con información de recorte."

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:12
#: matplotlib.backends.backend_svg.RendererSVG.draw_text:11 of
msgid "**x**"
msgstr "**x**"

#: of
msgid "scalar"
msgstr "escalar"

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:11 of
msgid "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas."
msgstr "La distancia en unidades físicas (es decir, puntos o píxeles) desde el lado izquierdo del lienzo."

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:16
#: matplotlib.backends.backend_svg.RendererSVG.draw_text:14 of
msgid "**y**"
msgstr "**y**"

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:15 of
msgid "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas."
msgstr "La distancia en unidades físicas (es decir, puntos o píxeles) desde la parte inferior del lienzo."

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:19 of
msgid "**im**"
msgstr "**im**"

#: of
msgid "(N, M, 4) array-like of np.uint8"
msgstr "(N, M, 4) array-like de np.uint8"

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:19 of
msgid "An array of RGBA pixels."
msgstr "Una matriz de píxeles RGBA."

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:43 of
msgid "**transform** : `matplotlib.transforms.Affine2DBase`"
msgstr "**transform** : `matplotlib.transforms.Affine2DBase`"

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:42 of
msgid "matplotlib.transforms.Affine2DBase"
msgstr "matplotlib.transforms.Affine2DBase"

#: matplotlib.backends.backend_svg.RendererSVG.draw_image:22 of
msgid "If and only if the concrete backend is written such that :meth:`option_scale_image` returns ``True``, an affine transformation (i.e., an `.Affine2DBase`) *may* be passed to :meth:`draw_image`.  The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override *x* and *y*, and has to be applied *before* translating the result by *x* and *y* (this can be accomplished by adding *x* and *y* to the translation vector defined by *transform*)."
msgstr "Si y solo si se escribe el backend concreto tal que :meth:`option_scale_image` devuelva ``True``, una transformación de afino (i.e. un `.Affine2DBase`) *podrá* ser pasado a :meth:`draw_image`. El vector de traducción de la transformación se da en unidades físicas (i. ., puntos o píxeles). Tenga en cuenta que la transformación no anula *x* y *y*, y tiene que ser aplicado *antes* de traducir el resultado por *x* y *y* (esto se puede lograr añadiendo *x* y *y* al vector de traducción definido por *transform*)."

#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:2 of
msgid "Draw a marker at each of *path*'s vertices (excluding control points)."
msgstr "Dibuja un marcador en cada uno de los vértices de *path* (excluyendo los puntos de control)."

#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:4 of
msgid "This provides a fallback implementation of draw_markers that makes multiple calls to :meth:`draw_path`.  Some backends may want to override this method in order to draw the marker only once and reuse it multiple times."
msgstr "Esto proporciona una implementación de draw_markers que hace varias llamadas a :meth:`draw_path`. Algunos backends pueden querer sobreescribir este método para dibujar el marcador una sola vez y reutilizarlo varias veces."

#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:15 of
msgid "**marker_trans** : `matplotlib.transforms.Transform`"
msgstr "**marker_trans** : `matplotlib.transforms.Transform`"

#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:15 of
msgid "An affine transform applied to the marker."
msgstr "Una transformación afectada aplicada al marcador."

#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:31 of
msgid "**trans** : `matplotlib.transforms.Transform`"
msgstr "**trans** : `matplotlib.transforms.Transform`"

#: matplotlib.backends.backend_svg.RendererSVG.draw_markers:18 of
msgid "An affine transform applied to the path."
msgstr "Una transformación afectada aplicada a la ruta."

#: matplotlib.backends.backend_svg.RendererSVG.draw_path:2 of
msgid "Draw a `~.path.Path` instance using the given affine transform."
msgstr "Dibuja una instancia `~.path.Path` usando la transforma affine dada."

#: matplotlib.backends.backend_svg.RendererSVG.draw_path_collection:2 of
msgid "Draw a collection of paths selecting drawing properties from the lists *facecolors*, *edgecolors*, *linewidths*, *linestyles* and *antialiaseds*. *offsets* is a list of offsets to apply to each of the paths.  The offsets in *offsets* are first transformed by *offsetTrans* before being applied."
msgstr "Dibuja una colección de rutas seleccionando propiedades de las listas *colores face*, *colores*, *anchuras de línea*, *linestyles* y *antialias*. *offsets* es una lista de desplazamientos a aplicar a cada una de las rutas. Los desplazamientos en *offsets* son transformados primero por *offsetTrans* antes de ser aplicados."

#: matplotlib.backends.backend_svg.RendererSVG.draw_path_collection:9 of
msgid "*offset_position* is unused now, but the argument is kept for backwards compatibility."
msgstr "*offset_position* no se usa ahora, pero el argumento se mantiene por compatibilidad hacia atrás."

#: matplotlib.backends.backend_svg.RendererSVG.draw_path_collection:12 of
msgid "This provides a fallback implementation of :meth:`draw_path_collection` that makes multiple calls to :meth:`draw_path`.  Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc.  The generator methods :meth:`_iter_collection_raw_paths` and :meth:`_iter_collection` are provided to help with (and standardize) the implementation across backends.  It is highly recommended to use those generators, so that changes to the behavior of :meth:`draw_path_collection` can be made globally."
msgstr "Esto proporciona una implementación de respaldo de :meth:`draw_path_collection` que hace varias llamadas a :meth:`draw_path`. Algunos backends pueden querer anular esto para representar cada conjunto de datos de ruta sólo una vez, y luego referencia que ruta varias veces con los diferentes desplazamientos, colores, estilos, etc. Los métodos generadores :meth:`_iter_collection_raw_paths` y :meth:`_iter_collection` son proporcionados para ayudar con (y estandarizar) la implementación a través de los backends. Es altamente recomendable usar esos generadores, de modo que los cambios en el comportamiento de :meth:`draw_path_collection` puedan hacerse globalmente."

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:2 of
msgid "Draw the text instance."
msgstr "Dibuja la instancia de texto."

#: of
msgid "float"
msgstr "float"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:11 of
msgid "The x location of the text in display coords."
msgstr "La posición x del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:14 of
msgid "The y location of the text baseline in display coords."
msgstr "La ubicación y de la línea de referencia del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:17 of
msgid "**s**"
msgstr "**s**"

#: of
msgid "str"
msgstr "str"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:17 of
msgid "The text string."
msgstr "La cadena de texto."

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:20 of
msgid "**prop** : `matplotlib.font_manager.FontProperties`"
msgstr "**prop** : `matplotlib.font_manager.FontProperties`"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:19 of
msgid "matplotlib.font_manager.FontProperties"
msgstr "Propiedades de fuente"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:20 of
msgid "The font properties."
msgstr "Las propiedades de la fuente."

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:23 of
msgid "**angle**"
msgstr "**angle**"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:23 of
msgid "The rotation angle in degrees anti-clockwise."
msgstr "El ángulo de rotación en grados en sentido anti-reloj."

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:34 of
msgid "**mtext** : `matplotlib.text.Text`"
msgstr "**mtext** : `matplotlib.text.Text`"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:33 of
msgid "matplotlib.text.Text"
msgstr "matplotlib.text.Texto"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:26 of
msgid "The original text object to be rendered."
msgstr "El objeto de texto original a ser renderizado."

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:37 of
msgid "Notes"
msgstr "Notes"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:38 of
msgid "**Note for backend implementers:**"
msgstr "**Nota para implementadores de backend:**"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:40 of
msgid "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py::"
msgstr "Cuando está intentando determinar si tiene configurado su cuadro de límite correcto (que es lo que permite que el diseño de texto/alineación funcione correctamente), ayuda a cambiar la línea en el texto. y::"

#: matplotlib.backends.backend_svg.RendererSVG.draw_text:46 of
msgid "to if 1, and then the actual bounding box will be plotted along with your text."
msgstr "a si 1, y luego el cuadro de límite actual será trazado junto con su texto."

#: matplotlib.backends.backend_svg.RendererSVG.flipy:2 of
msgid "Return whether y values increase from top to bottom."
msgstr "Devuelve si los valores y aumentan de arriba a abajo."

#: matplotlib.backends.backend_svg.RendererSVG.flipy:4 of
msgid "Note that this only affects drawing of texts and images."
msgstr "Tenga en cuenta que esto sólo afecta al dibujo de textos e imágenes."

#: matplotlib.backends.backend_svg.RendererSVG.get_canvas_width_height:2 of
msgid "Return the canvas width and height in display coords."
msgstr "Devuelve el ancho y la altura del lienzo en las coordenadas de la pantalla."

#: matplotlib.backends.backend_svg.RendererSVG.get_image_magnification:2 of
msgid "Get the factor by which to magnify images passed to :meth:`draw_image`. Allows a backend to have images at a different resolution to other artists."
msgstr "Obtén el factor por el que magnificar las imágenes pasadas a :meth:`draw_image`. Permite que un backend tenga imágenes con una resolución diferente a otros artistas."

#: matplotlib.backends.backend_svg.RendererSVG.get_text_width_height_descent:2
#: of
msgid "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string *s* with `.FontProperties` *prop*."
msgstr "Obtener la anchura, la altura y el descenso (offset de la parte inferior a la línea de referencia), en las coordenadas de visualización, de la cadena *s* con `.FontProperties` *prop*."

#: matplotlib.backends.backend_svg.RendererSVG.open_group:2 of
msgid "Open a grouping element with label *s* and *gid* (if set) as id."
msgstr "Abre un elemento de agrupación con la etiqueta *s* y *gid* (si se establece) como id."

#: matplotlib.backends.backend_svg.RendererSVG.option_image_nocomposite:2 of
msgid "Return whether image composition by Matplotlib should be skipped."
msgstr "Devuelve si la composición de la imagen por Matplotlib debe ser omitida."

#: matplotlib.backends.backend_svg.RendererSVG.option_image_nocomposite:4 of
msgid "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return ``not rcParams[\"image.composite_image\"]``."
msgstr "Los backends Raster generalmente deben devolver False (dejando que el rasterizador de nivel C se ocupe de la composición de la imagen); los backends de vector generalmente deben devolver ``not rcParams[\"image.composite_image\"]``."

#: matplotlib.backends.backend_svg.RendererSVG.option_scale_image:2 of
msgid "Return whether arbitrary affine transformations in :meth:`draw_image` are supported (True for most vector backends)."
msgstr "Devuelve si las transformaciones afectadas arbitrarias en :meth:`draw_image` son soportadas (Verdadero para la mayoría de los servidores vectoriales)."

#: matplotlib.backends.backend_svg.XMLWriter:1 of
msgid "Bases: :py:class:`object`"
msgstr "Bases: :py:class:`object`"

#: matplotlib.backends.backend_svg.XMLWriter:21 of
msgid "**file**"
msgstr "**archivo**"

#: of
msgid "writable text file-like object"
msgstr "objeto de archivo de texto escribible"

#: matplotlib.backends.backend_svg.XMLWriter.close:2 of
msgid "Close open elements, up to (and including) the element identified by the given identifier."
msgstr "Cerrar elementos abiertos, hasta (e incluir) el elemento identificado por el identificador dado."

#: matplotlib.backends.backend_svg.XMLWriter.close:22 of
msgid "**id**"
msgstr "**id**"

#: matplotlib.backends.backend_svg.XMLWriter.close:9 of
msgid "Element identifier, as returned by the :meth:`start` method."
msgstr "Identificador de elementos, retornado por el método :meth:`start`."

#: matplotlib.backends.backend_svg.XMLWriter.comment:2 of
msgid "Add a comment to the output stream."
msgstr "Añadir un comentario a la secuencia de salida."

#: matplotlib.backends.backend_svg.XMLWriter.comment:21 of
msgid "**comment**"
msgstr "**comentario**"

#: matplotlib.backends.backend_svg.XMLWriter.comment:8 of
msgid "Comment text."
msgstr "Comentar texto."

#: matplotlib.backends.backend_svg.XMLWriter.data:2 of
msgid "Add character data to the output stream."
msgstr "Agrega datos de caracteres al flujo de salida."

#: matplotlib.backends.backend_svg.XMLWriter.data:21 of
msgid "**text**"
msgstr "**texto**"

#: matplotlib.backends.backend_svg.XMLWriter.data:8 of
msgid "Character data."
msgstr "Datos del personaje."

#: matplotlib.backends.backend_svg.XMLWriter.element:2 of
msgid "Add an entire element.  This is the same as calling :meth:`start`, :meth:`data`, and :meth:`end` in sequence. The *text* argument can be omitted."
msgstr "Añade un elemento completo. Esto es lo mismo que llamar a :meth:`start`, :meth:`data` y :meth:`end` en secuencia. El argumento *text* puede ser omitido."

#: matplotlib.backends.backend_svg.XMLWriter.end:2 of
msgid "Close the current element (opened by the most recent call to :meth:`start`)."
msgstr "Cerrar el elemento actual (abierto por la llamada más reciente a :meth:`start`)."

#: matplotlib.backends.backend_svg.XMLWriter.end:23
#: matplotlib.backends.backend_svg.XMLWriter.start:11 of
msgid "**tag**"
msgstr "**etiqueta**"

#: matplotlib.backends.backend_svg.XMLWriter.end:9 of
msgid "Element tag.  If given, the tag must match the start tag.  If omitted, the current element is closed."
msgstr "Etiqueta de elemento. Si se proporciona, la etiqueta debe coincidir con la etiqueta de inicio. Si se omite, el elemento actual está cerrado."

#: matplotlib.backends.backend_svg.XMLWriter.flush:2 of
msgid "Flush the output stream."
msgstr "Vaciar el flujo de salida."

#: matplotlib.backends.backend_svg.XMLWriter.start:2 of
msgid "Open a new element.  Attributes can be given as keyword arguments, or as a string/string dictionary. The method returns an opaque identifier that can be passed to the :meth:`close` method, to close all open elements up to and including this one."
msgstr "Abre un nuevo elemento. Los atributos se pueden dar como argumentos de palabras clave, o como un diccionario de cadena/cadena. El método devuelve un identificador opaco que puede ser pasado al método :meth:`close`, para cerrar todos los elementos abiertos hasta e incluir éste."

#: matplotlib.backends.backend_svg.XMLWriter.start:11 of
msgid "Element tag."
msgstr "Etiqueta de elementos."

#: matplotlib.backends.backend_svg.XMLWriter.start:15 of
msgid "**attrib**"
msgstr "**attrib**"

#: matplotlib.backends.backend_svg.XMLWriter.start:14 of
msgid "Attribute dictionary.  Alternatively, attributes can be given as keyword arguments."
msgstr "Diccionario de atributo. Alternativamente, se pueden dar atributos como argumentos de palabra clave."

#: matplotlib.backends.backend_svg.XMLWriter.start of
msgid "Returns"
msgstr "Devuelve"

#: matplotlib.backends.backend_svg.XMLWriter.start:32 of
msgid "An element identifier."
msgstr "Un identificador de elemento."

#: matplotlib.backends.backend_svg.short_float_fmt:2 of
#, python-format
msgid "Create a short string representation of a float, which is %f formatting with trailing zeros and the decimal point removed."
msgstr "Crea una representación corta de un float, que es %f formateando con ceros finales y el punto decimal eliminado."

