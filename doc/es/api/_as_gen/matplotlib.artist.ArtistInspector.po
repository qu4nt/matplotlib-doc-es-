msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 13:48\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/_as_gen/matplotlib.artist.ArtistInspector.po\n"
"X-Crowdin-File-ID: 300\n"
"Language: es_ES\n"

#: ../../api/_as_gen/matplotlib.artist.ArtistInspector.rst:2
msgid "matplotlib.artist.ArtistInspector"
msgstr "matplotlib.artist.ArtistInspector"

#: matplotlib.artist.ArtistInspector:2 of
msgid "A helper class to inspect an `~matplotlib.artist.Artist` and return information about its settable properties and their current values."
msgstr "Una clase auxiliar para inspeccionar un `~matplotlib.artist.Artist` y devolver información sobre sus propiedades configurables y sus valores actuales."

#: matplotlib.artist.ArtistInspector:24
#: matplotlib.artist.ArtistInspector.__init__:2 of
msgid "Initialize the artist inspector with an `Artist` or an iterable of `Artist`\\s.  If an iterable is used, we assume it is a homogeneous sequence (all `Artist`\\s are of the same type) and it is your responsibility to make sure this is so."
msgstr "Inicializa el artista inspector con un `Artist` o un iterable de `Artist`\\s. Si se utiliza un iterable asumimos que es una secuencia homogénea (todos los `Artist`\\s son del mismo tipo) y es responsabilidad suya asegurarse de que así sea."

#: ../../api/_as_gen/matplotlib.artist.ArtistInspector.rst:13
msgid "Methods"
msgstr "Métodos"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`__init__ <matplotlib.artist.ArtistInspector.__init__>`\\ \\(o\\)"
msgstr ":py:obj:`__init__ <matplotlib.artist.ArtistInspector.__init__>`\\ \\(o\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid "Initialize the artist inspector with an `Artist` or an iterable of `Artist`\\s."
msgstr "Inicializa el artista inspector con un `Artist` o un iterable de `Artist`\\s."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`aliased_name <matplotlib.artist.ArtistInspector.aliased_name>`\\ \\(s\\)"
msgstr ":py:obj:`aliased_name <matplotlib.artist.ArtistInspector.aliased_name>`\\ \\(s\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:2
#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid "Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME'."
msgstr "Devuelve 'PROPNAME o alias' si *s* tiene un alias, de lo contrario devuelve 'PROPNAME'."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`aliased_name_rest <matplotlib.artist.ArtistInspector.aliased_name_rest>`\\ \\(s\\, target\\)"
msgstr ":py:obj:`aliased_name_rest <matplotlib.artist.ArtistInspector.aliased_name_rest>`\\ \\(s\\, target\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.aliased_name_rest:2 of
msgid "Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME', formatted for reST."
msgstr "Devuelve 'PROPNAME o alias' si *s* tiene un alias, sino devuelve 'PROPNAME', formateado para reST."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`get_aliases <matplotlib.artist.ArtistInspector.get_aliases>`\\ \\(\\)"
msgstr ":py:obj:`get_aliases <matplotlib.artist.ArtistInspector.get_aliases>`\\ \\(\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.get_aliases:2 of
msgid "Get a dict mapping property fullnames to sets of aliases for each alias in the :class:`~matplotlib.artist.ArtistInspector`."
msgstr "Obtén un nombre de propiedad de mapeo de dados a conjuntos de alias para cada alias en el :class:`~matplotlib.artist.ArtistInspector`."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`get_setters <matplotlib.artist.ArtistInspector.get_setters>`\\ \\(\\)"
msgstr ":py:obj:`get_setters <matplotlib.artist.ArtistInspector.get_setters>`\\ \\(\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.get_setters:2 of
msgid "Get the attribute strings with setters for object."
msgstr "Obtener las cadenas de atributos con setters para el objeto."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`get_valid_values <matplotlib.artist.ArtistInspector.get_valid_values>`\\ \\(attr\\)"
msgstr ":py:obj:`get_valid_values <matplotlib.artist.ArtistInspector.get_valid_values>`\\ \\(attr\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.get_valid_values:2 of
msgid "Get the legal arguments for the setter associated with *attr*."
msgstr "Obtener los argumentos legales para el setter asociado con *attr*."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`is_alias <matplotlib.artist.ArtistInspector.is_alias>`\\ \\(o\\)"
msgstr ":py:obj:`is_alias <matplotlib.artist.ArtistInspector.is_alias>`\\ \\(o\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.is_alias:2 of
msgid "Return whether method object *o* is an alias for another method."
msgstr "Devuelve si el objeto de método *o* es un alias para otro método."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`pprint_getters <matplotlib.artist.ArtistInspector.pprint_getters>`\\ \\(\\)"
msgstr ":py:obj:`pprint_getters <matplotlib.artist.ArtistInspector.pprint_getters>`\\ \\(\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.pprint_getters:2 of
msgid "Return the getters and actual values as list of strings."
msgstr "Devuelve los getters y los valores reales como lista de cadenas."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`pprint_setters <matplotlib.artist.ArtistInspector.pprint_setters>`\\ \\(\\[prop\\, leadingspace\\]\\)"
msgstr ":py:obj:`pprint_setters <matplotlib.artist.ArtistInspector.pprint_setters>`\\ \\(\\[prop\\, leadingspace\\]\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.pprint_setters:2 of
msgid "If *prop* is *None*, return a list of strings of all settable properties and their valid values."
msgstr "Si *prop* es *nunca*, retorna una lista de cadenas de todas las propiedades settable y sus valores válidos."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`pprint_setters_rest <matplotlib.artist.ArtistInspector.pprint_setters_rest>`\\ \\(\\[prop\\, leadingspace\\]\\)"
msgstr ":py:obj:`pprint_setters_rest <matplotlib.artist.ArtistInspector.pprint_setters_rest>`\\ \\(\\[prop\\, leadingspace\\]\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.pprint_setters_rest:2 of
msgid "If *prop* is *None*, return a list of reST-formatted strings of all settable properties and their valid values."
msgstr "Si *prop* es *nunca*, retorna una lista de cadenas con formato reST de todas las propiedades configurables y sus valores válidos."

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`properties <matplotlib.artist.ArtistInspector.properties>`\\ \\(\\)"
msgstr ":py:obj:`properties <matplotlib.artist.ArtistInspector.properties>`\\ \\(\\)"

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.properties:2 of
msgid "Return a dictionary mapping property name -> value."
msgstr "Devuelve un nombre de propiedad de mapeo de diccionarios -> valor."

#: matplotlib.artist.ArtistInspector.aliased_name:4
#: matplotlib.artist.ArtistInspector.aliased_name_rest:5 of
msgid "e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'."
msgstr "por ejemplo, para la propiedad markerfacecolor de línea, que tiene un alias, devolver 'markerfacecolor o mfc' y para la propiedad transformación, que no devuelve 'transform'."

#: matplotlib.artist.ArtistInspector.get_aliases:5 of
msgid "e.g., for lines::"
msgstr "e.g., para líneas::"

#: matplotlib.artist.ArtistInspector.get_setters:4 of
msgid "For example, for a line, return ``['markerfacecolor', 'linewidth', ....]``."
msgstr "Por ejemplo, para una línea, devolver ``['markerfacecolor', 'linewidth', ....]``."

#: matplotlib.artist.ArtistInspector.get_valid_values:4 of
msgid "This is done by querying the docstring of the setter for a line that begins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a numpydoc-style documentation for the setter's first argument."
msgstr "Esto se hace consultando la docstring del setter para una línea que comienza con \"ACCEPTS:\" o \".. ACCEPTS:\", y luego buscando una documentación tipo numpydoc-style para el primer argumento del setter."

#: matplotlib.artist.ArtistInspector.pprint_setters:5 of
msgid "If *prop* is not *None*, it is a valid property name and that property will be returned as a string of property : valid values."
msgstr "Si *prop* no es *Ninguno*, es un nombre de propiedad válido y esa propiedad será devuelta como una cadena de propiedad: valores válidos."

#: matplotlib.artist.ArtistInspector.pprint_setters_rest:5 of
msgid "If *prop* is not *None*, it is a valid property name and that property will be returned as a string of \"property : valid\" values."
msgstr "Si *prop* no es *Ninguno*, es un nombre de propiedad válido y esa propiedad será devuelta como una cadena de valores \"property : valid\"."

