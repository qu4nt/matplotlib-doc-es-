msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 14:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/backend_pdf_api.po\n"
"X-Crowdin-File-ID: 1736\n"
"Language: es_ES\n"

#: ../../api/backend_pdf_api.rst:2
msgid ":mod:`.backend_pdf`"
msgstr ":mod:`.backend_pdf`"

#: matplotlib.backends.backend_pdf:1 of
msgid "A PDF Matplotlib backend."
msgstr "Un backend PDF de Matplotlib."

#: matplotlib.backends.backend_pdf:3 of
msgid "Author: Jouni K Seppänen <jks@iki.fi> and others."
msgstr "Autor: Jouni K Seppańnen <jks@iki.fi> y otros."

#: matplotlib.backends.backend_pdf.FigureCanvasPdf:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"

#: matplotlib.backends.backend_pdf.FigureCanvasPdf.draw:2 of
msgid "Render the `.Figure`."
msgstr "Renderiza la `.Figure`."

#: matplotlib.backends.backend_pdf.FigureCanvasPdf.draw:4 of
msgid "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk."
msgstr "Es importante que este método realmente recorra el árbol del artista incluso si no se produce la salida, ya que esto desencadenará trabajos diferidos (como la computación limita los límites automáticos y los valores de tick) a los que los usuarios pueden querer acceder antes de guardar en el disco."

#: matplotlib.backends.backend_pdf.FigureCanvasPdf.get_default_filetype:2 of
msgid "Return the default savefig file format as specified in :rc:`savefig.format`."
msgstr "Devuelve el formato predeterminado de archivo savefig especificado en :rc:`savefig.format`."

#: matplotlib.backends.backend_pdf.FigureCanvasPdf.get_default_filetype:5 of
msgid "The returned string does not include a period. This method is overridden in backends that only support a single file type."
msgstr "La cadena devuelta no incluye un período. Este método se reemplaza en backends que sólo soportan un único tipo de archivo."

#: matplotlib.backends.backend_pdf.GraphicsContextPdf:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.GraphicsContextBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.GraphicsContextBase`"

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.clip_cmd:2 of
msgid "Set clip rectangle. Calls `.pop()` and `.push()`."
msgstr "Establece el rectángulo de clip. Llama `.pop()` y `.push()`."

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.copy_properties:2 of
msgid "Copy properties of other into self."
msgstr "Copia las propiedades de los demás en uno mismo."

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.delta:2 of
msgid "Copy properties of other into self and return PDF commands needed to transform self into other."
msgstr "Copia propiedades de otros en sí mismos y devuelve comandos PDF necesarios para transformarse en otro."

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.fill:2 of
msgid "Predicate: does the path need to be filled?"
msgstr "Predicación: ¿es necesario llenar la ruta?"

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.fill:4 of
msgid "An optional argument can be used to specify an alternative _fillcolor, as needed by RendererPdf.draw_markers."
msgstr "Un argumento opcional puede ser usado para especificar un _fillcolor alternativo, como lo necesita RendererPdf.draw_markers."

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.finalize:2 of
msgid "Make sure every pushed graphics state is popped."
msgstr "Asegúrate de que cada estado gráfico empujado sea desplegado."

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.paint:2 of
msgid "Return the appropriate pdf operator to cause the path to be stroked, filled, or both."
msgstr "Devuelve el operador pdf apropiado para que la ruta sea trazada, llenada, o ambos."

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.stroke:2 of
msgid "Predicate: does the path need to be stroked (its outline drawn)? This tests for the various conditions that disable stroking the path, in which case it would presumably be filled."
msgstr "Predicación: ¿necesita trazar la ruta (su dibujo de contorno)? Estas pruebas para las diversas condiciones que deshabilitan el trazado del camino, en cuyo caso sería presuntualmente llenado."

#: matplotlib.backends.backend_pdf.Name:1
#: matplotlib.backends.backend_pdf.Operator:1
#: matplotlib.backends.backend_pdf.PdfFile:1
#: matplotlib.backends.backend_pdf.PdfPages:1
#: matplotlib.backends.backend_pdf.Reference:1
#: matplotlib.backends.backend_pdf.Stream:1
#: matplotlib.backends.backend_pdf.Verbatim:1 of
msgid "Bases: :py:class:`object`"
msgstr "Bases: :py:class:`object`"

#: matplotlib.backends.backend_pdf.Name:2 of
msgid "PDF name object."
msgstr "Objeto de nombre PDF."

#: matplotlib.backends.backend_pdf.Op:1 of
msgid "Bases: :py:class:`matplotlib.backends.backend_pdf.Operator`, :py:class:`enum.Enum`"
msgstr "Bases: :py:class:`matplotlib.backends.backend_pdf.Operator`, :py:class:`enum.Enum`"

#: matplotlib.backends.backend_pdf.Op:2 of
msgid "An enumeration."
msgstr "Una enumeración."

#: matplotlib.backends.backend_pdf.Op.paint_path:2 of
msgid "Return the PDF operator to paint a path."
msgstr "Devuelve el operador PDF para pintar una ruta."

#: matplotlib.backends.backend_pdf.Op.paint_path
#: matplotlib.backends.backend_pdf.PdfFile
#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles
#: matplotlib.backends.backend_pdf.PdfPages
#: matplotlib.backends.backend_pdf.PdfPages.savefig
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles
#: matplotlib.backends.backend_pdf.RendererPdf.draw_image
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text
#: matplotlib.backends.backend_pdf.Stream of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.backends.backend_pdf.Op.paint_path:8 of
msgid "**fill**"
msgstr "**rellenar**"

#: of
msgid "bool"
msgstr "bool"

#: matplotlib.backends.backend_pdf.Op.paint_path:8 of
msgid "Fill the path with the fill color."
msgstr "Rellena la ruta con el color de llenado."

#: matplotlib.backends.backend_pdf.Op.paint_path:24 of
msgid "**stroke**"
msgstr "**stroke**"

#: matplotlib.backends.backend_pdf.Op.paint_path:11 of
msgid "Stroke the outline of the path with the line color."
msgstr "Trazar el contorno de la ruta con el color de la línea."

#: matplotlib.backends.backend_pdf.Operator:2 of
msgid "PDF operator object."
msgstr "Objeto del operador PDF."

#: matplotlib.backends.backend_pdf.PdfFile:2 of
msgid "PDF file object."
msgstr "Objeto de archivo PDF."

#: matplotlib.backends.backend_pdf.PdfFile:29
#: matplotlib.backends.backend_pdf.PdfPages:45 of
msgid "**filename**"
msgstr "**nombre de archivo**"

#: of
msgid "str or path-like or file-like"
msgstr "str o como ruta o archivo"

#: matplotlib.backends.backend_pdf.PdfFile:29 of
msgid "Output target; if a string, a file will be opened for writing."
msgstr "Destino de salida; si una cadena, un archivo será abierto para escritura."

#: matplotlib.backends.backend_pdf.PdfFile:52
#: matplotlib.backends.backend_pdf.PdfPages:72 of
msgid "**metadata**"
msgstr "**metadatos**"

#: of
msgid "dict from strings to strings and dates"
msgstr "dictar de cadenas a cadenas y fechas"

#: matplotlib.backends.backend_pdf.PdfFile:32
#: matplotlib.backends.backend_pdf.PdfPages:52 of
msgid "Information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary'), e.g.: ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``."
msgstr "Objeto de diccionario de información (consulte la sección de referencia de PDF 10.2.1 'Diccionario de información de documento'), por ejemplo: ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``."

#: matplotlib.backends.backend_pdf.PdfFile:36
#: matplotlib.backends.backend_pdf.PdfPages:56 of
msgid "The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator', 'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed by setting them to `None`."
msgstr "Las claves estándar son 'Título', 'Autor', 'Tamaño', 'Palabras clave', 'Creador', 'Productor', 'CreationDate', 'ModDate' y 'Trapped'. Los valores han sido predefinidos para 'Creador', 'Productor' y 'CreationDate'. Pueden ser eliminados poniéndolos en 'Ning'."

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:2 of
msgid "Add a Gouraud triangle shading."
msgstr "Agrega un sombreado del triángulo de Gouraud."

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:9
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:11
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:8 of
msgid "**points**"
msgstr "**puntos**"

#: of
msgid "np.ndarray"
msgstr "np.ndarray"

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:8 of
msgid "Triangle vertices, shape (n, 3, 2) where n = number of triangles, 3 = vertices, 2 = x, y."
msgstr "Triángulo vértices, forma (n, 3, 2) donde n = número de triángulos, 3 = vértices, 2 = x, y."

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:14
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:14
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:11 of
msgid "**colors**"
msgstr "**colores**"

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:12 of
msgid "Vertex colors, shape (n, 3, 1) or (n, 3, 4) as with points, but last dimension is either (gray,) or (r, g, b, alpha)."
msgstr "Colores de vértices, forma (n, 3, 1) o (n, 3, 4) como con puntos, pero la última dimensión es (gris,) o (r, g, b, alfa)."

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles of
msgid "Returns"
msgstr "Devuelve"

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:31 of
msgid "Name, Reference"
msgstr "Nombre, referencia"

#: matplotlib.backends.backend_pdf.PdfFile.alphaState:2 of
msgid "Return name of an ExtGState that sets alpha to the given value."
msgstr "Devuelve el nombre de un ExtGState que establece el alfa al valor dado."

#: matplotlib.backends.backend_pdf.PdfFile.close:2 of
msgid "Flush all buffers and free all resources."
msgstr "Vaciar todos los búferes y liberar todos los recursos."

#: matplotlib.backends.backend_pdf.PdfFile.dviFontName:2 of
msgid "Given a dvi font object, return a name suitable for Op.selectfont. This registers the font information in ``self.dviFontInfo`` if not yet registered."
msgstr "Dado un objeto dvi de fuente, devuelve un nombre adecuado para Op.selectfont. Esto registra la información de la fuente en ``self.dviFontInfo`` si aún no está registrado."

#: matplotlib.backends.backend_pdf.PdfFile.embedTTF:2 of
msgid "Embed the TTF font from the named file into the document."
msgstr "Inserte la fuente TTF del archivo nombrado en el documento."

#: matplotlib.backends.backend_pdf.PdfFile.finalize:2 of
msgid "Write out the various deferred objects and the pdf end matter."
msgstr "Escriba los diversos objetos diferidos y la materia final de pdf."

#: matplotlib.backends.backend_pdf.PdfFile.fontName:2 of
msgid "Select a font based on fontprop and return a name suitable for Op.selectfont. If fontprop is a string, it will be interpreted as the filename of the font."
msgstr "Seleccione una fuente basada en fontprop y devuelva un nombre adecuado para Op.selectfont. Si fontprop es una cadena, se interpretará como el nombre de archivo de la fuente."

#: matplotlib.backends.backend_pdf.PdfFile.imageObject:2 of
msgid "Return name of an image XObject representing the given image."
msgstr "Retorna el nombre de una imagen XObject que representa la imagen dada."

#: matplotlib.backends.backend_pdf.PdfFile.markerObject:2 of
msgid "Return name of a marker XObject representing the given path."
msgstr "Devuelve el nombre de un marcador XObject que representa la ruta dada."

#: matplotlib.backends.backend_pdf.PdfFile.reserveObject:2 of
msgid "Reserve an ID for an indirect object."
msgstr "Reservar un ID para un objeto indirecto."

#: matplotlib.backends.backend_pdf.PdfFile.reserveObject:4 of
msgid "The name is used for debugging in case we forget to print out the object with writeObject."
msgstr "El nombre se usa para depurar en caso de que olvidemos imprimir el objeto con writeObject."

#: matplotlib.backends.backend_pdf.PdfFile.writeInfoDict:2 of
msgid "Write out the info dictionary, checking it for good form"
msgstr "Escriba el diccionario de información, compruébalo para obtener un buen formulario"

#: matplotlib.backends.backend_pdf.PdfFile.writeTrailer:2 of
msgid "Write out the PDF trailer."
msgstr "Escriba el rastreador PDF."

#: matplotlib.backends.backend_pdf.PdfFile.writeXref:2 of
msgid "Write out the xref table."
msgstr "Escriba la tabla xref."

#: matplotlib.backends.backend_pdf.PdfPages:2 of
msgid "A multi-page PDF file."
msgstr "Un archivo PDF de varias páginas."

#: matplotlib.backends.backend_pdf.PdfPages:15
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:37 of
msgid "Notes"
msgstr "Notes"

#: matplotlib.backends.backend_pdf.PdfPages:16 of
msgid "In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid confusion when using `~.pyplot.savefig` and forgetting the format argument."
msgstr "En realidad `PdfPages` es un envoltorio delgado alrededor de `PdfFile`, para evitar confusión al usar `~.pyplot.savefig` y olvidar el argumento de formato."

#: matplotlib.backends.backend_pdf.PdfPages:21 of
msgid "Examples"
msgstr "Ejemplos"

#: matplotlib.backends.backend_pdf.PdfPages:37 of
msgid "Create a new PdfPages object."
msgstr "Crear un nuevo objeto PdfPages."

#: matplotlib.backends.backend_pdf.PdfPages:43 of
msgid "Plots using `PdfPages.savefig` will be written to a file at this location. The file is opened at once and any older file with the same name is overwritten."
msgstr "Las parcelas usando `PdfPages.savefig` serán escritas en un archivo en esta ubicación. El archivo se abre a la vez y cualquier archivo antiguo con el mismo nombre es sobrescrito."

#: matplotlib.backends.backend_pdf.PdfPages:49 of
msgid "**keep_empty**"
msgstr "**guardar_vacío**"

#: of
msgid "bool, optional"
msgstr "bool, optional"

#: matplotlib.backends.backend_pdf.PdfPages:48 of
msgid "If set to False, then empty pdf files will be deleted automatically when closed."
msgstr "Si se establece en False, los archivos pdf vacíos se eliminarán automáticamente cuando se cierre."

#: of
msgid "dict, optional"
msgstr "dict, optional"

#: matplotlib.backends.backend_pdf.PdfPages.attach_note:2 of
msgid "Add a new text note to the page to be saved next. The optional positionRect specifies the position of the new note on the page. It is outside the page per default to make sure it is invisible on printouts."
msgstr "Añadir una nueva nota de texto a la página que se guardará a continuación. La posición opcional de Rect especifica la posición de la nueva nota en la página. Está fuera de la página por defecto para asegurarse de que es invisible en impresiones."

#: matplotlib.backends.backend_pdf.PdfPages.close:2 of
msgid "Finalize this object, making the underlying file a complete PDF file."
msgstr "Finalice este objeto, haciendo del archivo subyacente un archivo PDF completo."

#: matplotlib.backends.backend_pdf.PdfPages.get_pagecount:2 of
msgid "Return the current number of pages in the multipage pdf file."
msgstr "Devuelve el número actual de páginas en el archivo pdf multipágina."

#: matplotlib.backends.backend_pdf.PdfPages.infodict:2 of
msgid "Return a modifiable information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary')."
msgstr "Devuelve un objeto de diccionario de información modificable (consulte la sección de referencia de PDF 10.2.1 'Diccionario de información de documentos')."

#: matplotlib.backends.backend_pdf.PdfPages.savefig:2 of
msgid "Save a `.Figure` to this file as a new page."
msgstr "Guarda un `.Figure` en este archivo como una nueva página."

#: matplotlib.backends.backend_pdf.PdfPages.savefig:4 of
msgid "Any other keyword arguments are passed to `~.Figure.savefig`."
msgstr "Cualquier otro argumento de palabra clave se pasa a `~.Figure.savefig`."

#: matplotlib.backends.backend_pdf.PdfPages.savefig:22 of
msgid "**figure** : `.Figure` or int, default: the active figure"
msgstr "**figura** : `.Figure` o int, por defecto: la figura activa"

#: matplotlib.backends.backend_pdf.PdfPages.savefig:21 of
msgid "Figure or int, default: the active figure"
msgstr "Figura o int, por defecto: la figura activa"

#: matplotlib.backends.backend_pdf.PdfPages.savefig:9 of
msgid "The figure, or index of the figure, that is saved to the file."
msgstr "La figura, o índice de la figura, que se guarda en el archivo."

#: matplotlib.backends.backend_pdf.Reference:2 of
msgid "PDF reference object."
msgstr "Objeto de referencia PDF."

#: matplotlib.backends.backend_pdf.Reference:4 of
msgid "Use PdfFile.reserveObject() to create References."
msgstr "Use PdfFile.reserveObject() para crear referencias."

#: matplotlib.backends.backend_pdf.RendererPdf:1 of
msgid "Bases: :py:class:`matplotlib.backends._backend_pdf_ps.RendererPDFPSBase`"
msgstr "Bases: :py:class:`matplotlib.backends._backend_pdf_ps.RendererPDFPSBase`"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:2 of
msgid "Draw a Gouraud-shaded triangle."
msgstr "Dibuja un triángulo sombreado por Gouraud."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:8
#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:8
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:12
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:8 of
msgid "**gc** : `.GraphicsContextBase`"
msgstr "**gc** : `.GraphicsContextBase`"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:7
#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:7
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:11
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:7 of
msgid "GraphicsContextBase"
msgstr "Contexto gráfico base"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:8
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:12
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:8 of
msgid "The graphics context."
msgstr "El contexto gráfico."

#: of
msgid "(3, 2) array-like"
msgstr "(3, 2) matriz"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:11 of
msgid "Array of (x, y) points for the triangle."
msgstr "Arreglo de puntos (x, y) para el triángulo."

#: of
msgid "(3, 4) array-like"
msgstr "(3, 4) tipo matriz"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:14 of
msgid "RGBA colors for each point of the triangle."
msgstr "Colores RGBA para cada punto del triángulo."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:30
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:27 of
msgid "**transform** : `matplotlib.transforms.Transform`"
msgstr "**transform** : `matplotlib.transforms.Transform`"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:29
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:26
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:14
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:30 of
msgid "matplotlib.transforms.Transform"
msgstr "matplotlib.transforms.Transformar"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:17
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:14 of
msgid "An affine transform to apply to the points."
msgstr "Una transformación de afecto para aplicar a los puntos."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:2 of
msgid "Draw a series of Gouraud triangles."
msgstr "Dibuja una serie de triángulos de Gouraud."

#: of
msgid "(N, 3, 2) array-like"
msgstr "(N, 3, 2) array-like"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:8 of
msgid "Array of *N* (x, y) points for the triangles."
msgstr "Array de puntos *N* (x, y) para los triángulos."

#: of
msgid "(N, 3, 4) array-like"
msgstr "(N, 3, 4) matriz"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:11 of
msgid "Array of *N* RGBA colors for each point of the triangles."
msgstr "Array de colores *N* RGBA para cada punto de los triángulos."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:2 of
msgid "Draw an RGBA image."
msgstr "Draw an RGBA image."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:8 of
msgid "A graphics context with clipping information."
msgstr "Un contexto gráfico con información de recorte."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:12
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:11 of
msgid "**x**"
msgstr "**x**"

#: of
msgid "scalar"
msgstr "escalar"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:11 of
msgid "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas."
msgstr "La distancia en unidades físicas (es decir, puntos o píxeles) desde el lado izquierdo del lienzo."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:16
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:14 of
msgid "**y**"
msgstr "**y**"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:15 of
msgid "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas."
msgstr "La distancia en unidades físicas (es decir, puntos o píxeles) desde la parte inferior del lienzo."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:19 of
msgid "**im**"
msgstr "**im**"

#: of
msgid "(N, M, 4) array-like of np.uint8"
msgstr "(N, M, 4) array-like de np.uint8"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:19 of
msgid "An array of RGBA pixels."
msgstr "Una matriz de píxeles RGBA."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:43 of
msgid "**transform** : `matplotlib.transforms.Affine2DBase`"
msgstr "**transform** : `matplotlib.transforms.Affine2DBase`"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:42 of
msgid "matplotlib.transforms.Affine2DBase"
msgstr "matplotlib.transforms.Affine2DBase"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:22 of
msgid "If and only if the concrete backend is written such that :meth:`option_scale_image` returns ``True``, an affine transformation (i.e., an `.Affine2DBase`) *may* be passed to :meth:`draw_image`.  The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override *x* and *y*, and has to be applied *before* translating the result by *x* and *y* (this can be accomplished by adding *x* and *y* to the translation vector defined by *transform*)."
msgstr "Si y solo si se escribe el backend concreto tal que :meth:`option_scale_image` devuelva ``True``, una transformación de afino (i.e. un `.Affine2DBase`) *podrá* ser pasado a :meth:`draw_image`. El vector de traducción de la transformación se da en unidades físicas (i. ., puntos o píxeles). Tenga en cuenta que la transformación no anula *x* y *y*, y tiene que ser aplicado *antes* de traducir el resultado por *x* y *y* (esto se puede lograr añadiendo *x* y *y* al vector de traducción definido por *transform*)."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:2 of
msgid "Draw a marker at each of *path*'s vertices (excluding control points)."
msgstr "Dibuja un marcador en cada uno de los vértices de *path* (excluyendo los puntos de control)."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:4 of
msgid "This provides a fallback implementation of draw_markers that makes multiple calls to :meth:`draw_path`.  Some backends may want to override this method in order to draw the marker only once and reuse it multiple times."
msgstr "Esto proporciona una implementación de draw_markers que hace varias llamadas a :meth:`draw_path`. Algunos backends pueden querer sobreescribir este método para dibujar el marcador una sola vez y reutilizarlo varias veces."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:15 of
msgid "**marker_trans** : `matplotlib.transforms.Transform`"
msgstr "**marker_trans** : `matplotlib.transforms.Transform`"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:15 of
msgid "An affine transform applied to the marker."
msgstr "Una transformación afectada aplicada al marcador."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:31 of
msgid "**trans** : `matplotlib.transforms.Transform`"
msgstr "**trans** : `matplotlib.transforms.Transform`"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:18 of
msgid "An affine transform applied to the path."
msgstr "Una transformación afectada aplicada a la ruta."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_path:2 of
msgid "Draw a `~.path.Path` instance using the given affine transform."
msgstr "Dibuja una instancia `~.path.Path` usando la transforma affine dada."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection:2 of
msgid "Draw a collection of paths selecting drawing properties from the lists *facecolors*, *edgecolors*, *linewidths*, *linestyles* and *antialiaseds*. *offsets* is a list of offsets to apply to each of the paths.  The offsets in *offsets* are first transformed by *offsetTrans* before being applied."
msgstr "Dibuja una colección de rutas seleccionando propiedades de las listas *colores face*, *colores*, *anchuras de línea*, *linestyles* y *antialias*. *offsets* es una lista de desplazamientos a aplicar a cada una de las rutas. Los desplazamientos en *offsets* son transformados primero por *offsetTrans* antes de ser aplicados."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection:9 of
msgid "*offset_position* is unused now, but the argument is kept for backwards compatibility."
msgstr "*offset_position* no se usa ahora, pero el argumento se mantiene por compatibilidad hacia atrás."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection:12 of
msgid "This provides a fallback implementation of :meth:`draw_path_collection` that makes multiple calls to :meth:`draw_path`.  Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc.  The generator methods :meth:`_iter_collection_raw_paths` and :meth:`_iter_collection` are provided to help with (and standardize) the implementation across backends.  It is highly recommended to use those generators, so that changes to the behavior of :meth:`draw_path_collection` can be made globally."
msgstr "Esto proporciona una implementación de respaldo de :meth:`draw_path_collection` que hace varias llamadas a :meth:`draw_path`. Algunos backends pueden querer anular esto para representar cada conjunto de datos de ruta sólo una vez, y luego referencia que ruta varias veces con los diferentes desplazamientos, colores, estilos, etc. Los métodos generadores :meth:`_iter_collection_raw_paths` y :meth:`_iter_collection` son proporcionados para ayudar con (y estandarizar) la implementación a través de los backends. Es altamente recomendable usar esos generadores, de modo que los cambios en el comportamiento de :meth:`draw_path_collection` puedan hacerse globalmente."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:2 of
msgid "Draw the text instance."
msgstr "Dibuja la instancia de texto."

#: of
msgid "float"
msgstr "float"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:11 of
msgid "The x location of the text in display coords."
msgstr "La posición x del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:14 of
msgid "The y location of the text baseline in display coords."
msgstr "La ubicación y de la línea de referencia del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:17 of
msgid "**s**"
msgstr "**s**"

#: of
msgid "str"
msgstr "str"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:17 of
msgid "The text string."
msgstr "La cadena de texto."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:20 of
msgid "**prop** : `matplotlib.font_manager.FontProperties`"
msgstr "**prop** : `matplotlib.font_manager.FontProperties`"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:19 of
msgid "matplotlib.font_manager.FontProperties"
msgstr "Propiedades de fuente"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:20 of
msgid "The font properties."
msgstr "Las propiedades de la fuente."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:23 of
msgid "**angle**"
msgstr "**angle**"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:23 of
msgid "The rotation angle in degrees anti-clockwise."
msgstr "El ángulo de rotación en grados en sentido anti-reloj."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:34 of
msgid "**mtext** : `matplotlib.text.Text`"
msgstr "**mtext** : `matplotlib.text.Text`"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:33 of
msgid "matplotlib.text.Text"
msgstr "matplotlib.text.Texto"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:26 of
msgid "The original text object to be rendered."
msgstr "El objeto de texto original a ser renderizado."

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:38 of
msgid "**Note for backend implementers:**"
msgstr "**Nota para implementadores de backend:**"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:40 of
msgid "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py::"
msgstr "Cuando está intentando determinar si tiene configurado su cuadro de límite correcto (que es lo que permite que el diseño de texto/alineación funcione correctamente), ayuda a cambiar la línea en el texto. y::"

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:46 of
msgid "to if 1, and then the actual bounding box will be plotted along with your text."
msgstr "a si 1, y luego el cuadro de límite actual será trazado junto con su texto."

#: matplotlib.backends.backend_pdf.RendererPdf.get_image_magnification:2 of
msgid "Get the factor by which to magnify images passed to :meth:`draw_image`. Allows a backend to have images at a different resolution to other artists."
msgstr "Obtén el factor por el que magnificar las imágenes pasadas a :meth:`draw_image`. Permite que un backend tenga imágenes con una resolución diferente a otros artistas."

#: matplotlib.backends.backend_pdf.RendererPdf.new_gc:2 of
msgid "Return an instance of a `.GraphicsContextBase`."
msgstr "Devuelve una instancia de un `.GraphicsContextBase`."

#: matplotlib.backends.backend_pdf.Stream:2 of
msgid "PDF stream object."
msgstr "Objeto de flujo PDF."

#: matplotlib.backends.backend_pdf.Stream:4 of
msgid "This has no pdfRepr method. Instead, call begin(), then output the contents of the stream by calling write(), and finally call end()."
msgstr "Esto no tiene el método pdfRepr sino que el comando begin(), luego genera el contenido de la secuencia llamando write(), y finalmente llama end()."

#: matplotlib.backends.backend_pdf.Stream:31 of
msgid "**id**"
msgstr "**id**"

#: of
msgid "int"
msgstr "int"

#: matplotlib.backends.backend_pdf.Stream:31 of
msgid "Object id of the stream."
msgstr "Id del objeto del flujo."

#: matplotlib.backends.backend_pdf.Stream:35 of
msgid "**len**"
msgstr "**len**"

#: of
msgid "Reference or None"
msgstr "Referencia o ninguna"

#: matplotlib.backends.backend_pdf.Stream:34 of
msgid "An unused Reference object for the length of the stream; None means to use a memory buffer so the length can be inlined."
msgstr "Un objeto de referencia no utilizado para la longitud del stream; Ninguno significa usar un buffer de memoria para que la longitud pueda estar en linea."

#: matplotlib.backends.backend_pdf.Stream:38 of
msgid "**file**"
msgstr "**archivo**"

#: of
msgid "PdfFile"
msgstr "PdfFile"

#: matplotlib.backends.backend_pdf.Stream:38 of
msgid "The underlying object to write the stream to."
msgstr "El objeto subyacente al que escribir el stream."

#: matplotlib.backends.backend_pdf.Stream:41 of
msgid "**extra**"
msgstr "**extra**"

#: of
msgid "dict from Name to anything, or None"
msgstr "dictar del nombre a cualquier cosa, o ninguno"

#: matplotlib.backends.backend_pdf.Stream:41 of
msgid "Extra key-value pairs to include in the stream header."
msgstr "Pares de clave y valor extra para incluir en la cabecera de la secuencia."

#: matplotlib.backends.backend_pdf.Stream:57 of
msgid "**png**"
msgstr "**png**"

#: of
msgid "dict or None"
msgstr "dict o None"

#: matplotlib.backends.backend_pdf.Stream:44 of
msgid "If the data is already png encoded, the decode parameters."
msgstr "Si los datos ya están codificados en png, los parámetros de decodificación."

#: matplotlib.backends.backend_pdf.Stream.end:2 of
msgid "Finalize stream."
msgstr "Finalizar secuencia."

#: matplotlib.backends.backend_pdf.Stream.write:2 of
msgid "Write some data on the stream."
msgstr "Escribe algunos datos en la secuencia."

#: matplotlib.backends.backend_pdf.Verbatim:2 of
msgid "Store verbatim PDF command content for later inclusion in the stream."
msgstr "Almacene contenido del comando PDF literal para su posterior inclusión en el stream."

#: matplotlib.backends.backend_pdf.fill:2 of
msgid "Make one string from sequence of strings, with whitespace in between."
msgstr "Crea una cadena a partir de la secuencia de cadenas, con espacios en blanco intermedio."

#: matplotlib.backends.backend_pdf.fill:4 of
msgid "The whitespace is chosen to form lines of at most *linelen* characters, if possible."
msgstr "El espacio en blanco es elegido para formar líneas de como máximo caracteres *linelen*, si es posible."

#: matplotlib.backends.backend_pdf.pdfRepr:2 of
msgid "Map Python objects to PDF syntax."
msgstr "Mapear objetos Python a sintaxis PDF."

