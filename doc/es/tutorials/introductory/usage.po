msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-05-22 21:01\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/tutorials/introductory/usage.po\n"
"X-Crowdin-File-ID: 3330\n"
"Language: es_ES\n"

#: ../../tutorials/introductory/usage.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorials_introductory_usage.py>` to download the full example code"
msgstr "Haz clic en :ref:`aquí <sphx_glr_download_tutorials_introductory_usage.py>` para descargar el código de ejemplo completo"

#: ../../tutorials/introductory/usage.rst:23
msgid "Basic Usage"
msgstr "Uso básico"

#: ../../tutorials/introductory/usage.rst:25
msgid "This tutorial covers some basic usage patterns and best practices to help you get started with Matplotlib."
msgstr "Este tutorial cubre algunos patrones básicos de uso y las mejores prácticas para ayudarte a empezar con Matplotlib."

#: ../../tutorials/introductory/usage.rst:47
msgid "A simple example"
msgstr "Un ejemplo simple"

#: ../../tutorials/introductory/usage.rst:49
msgid "Matplotlib graphs your data on `~.figure.Figure`\\s (e.g., windows, Jupyter widgets, etc.), each of which can contain one or more `~.axes.Axes`, an area where points can be specified in terms of x-y coordinates (or theta-r in a polar plot, x-y-z in a 3D plot, etc).  The simplest way of creating a Figure with an Axes is using `.pyplot.subplots`. We can then use `.Axes.plot` to draw some data on the Axes:"
msgstr "Matplotlib grafica sus datos en `~.figure.Figure` (por ejemplo, ventanas, widgets de Jupyter, etc.), cada uno de los cuales puede contener uno o más `~.axes.Axes`, un área donde los puntos pueden ser especificados en términos de coordenadas x-y (o theta-r en un gráfico polar, x-y-z en un gráfico 3D, etc).  La forma más sencilla de crear una Figura con Ejes es utilizando `.pyplot.subplots`. Luego podemos utilizar `.Axes.plot` para dibujar algunos datos en los Ejes:"

#: ../../tutorials/introductory/usage.rst:75
#: ../../tutorials/introductory/usage.rst:199
#: ../../tutorials/introductory/usage.rst:255
#: ../../tutorials/introductory/usage.rst:295
#: ../../tutorials/introductory/usage.rst:374
#: ../../tutorials/introductory/usage.rst:453
#: ../../tutorials/introductory/usage.rst:503
#: ../../tutorials/introductory/usage.rst:616
#: ../../tutorials/introductory/usage.rst:660
#: ../../tutorials/introductory/usage.rst:717
#: ../../tutorials/introductory/usage.rst:765
#: ../../tutorials/introductory/usage.rst:843
#: ../../tutorials/introductory/usage.rst:902
#: ../../tutorials/introductory/usage.rst:956
#: ../../tutorials/introductory/usage.rst:1035
msgid "Out:"
msgstr "Salida:"

#: ../../tutorials/introductory/usage.rst:89
msgid "Parts of a Figure"
msgstr "Partes de una Figura"

#: ../../tutorials/introductory/usage.rst:91
msgid "Here are the components of a Matplotlib Figure."
msgstr "Aquí están los componentes de una figura de Matplotlib."

#: ../../tutorials/introductory/usage.rst:96
msgid ":class:`~matplotlib.figure.Figure`"
msgstr ":class:`~matplotlib.figure.Figure`"

#: ../../tutorials/introductory/usage.rst:98
msgid "The **whole** figure.  The Figure keeps track of all the child :class:`~matplotlib.axes.Axes`, a group of 'special' Artists (titles, figure legends, colorbars, etc), and even nested subfigures."
msgstr "La **figura completa**.  La Figura mantiene un registro de todos los hijos :class:`~matplotlib.axes.Axes`, un grupo de Artists 'especiales' (títulos, leyendas de figuras, barras de color, etc), e incluso subfiguras anidadas."

#: ../../tutorials/introductory/usage.rst:103
msgid "The easiest way to create a new Figure is with pyplot::"
msgstr "La forma más sencilla de crear una nueva Figura es con pyplot::"

#: ../../tutorials/introductory/usage.rst:109
msgid "It is often convenient to create the Axes together with the Figure, but you can also manually add Axes later on.  Note that many :doc:`Matplotlib backends </users/explain/backends>` support zooming and panning on figure windows."
msgstr "A menudo es conveniente crear los Ejes junto con la Figura, pero también se pueden añadir manualmente los Ejes más tarde.  Ten en cuenta que muchos backends de :doc:`Matplotlib </users/explain/backends>` soportan el zoom y la panorámica en las ventanas de las figuras."

#: ../../tutorials/introductory/usage.rst:115
msgid ":class:`~matplotlib.axes.Axes`"
msgstr ":class:`~matplotlib.axes.Axes`"

#: ../../tutorials/introductory/usage.rst:117
msgid "An Axes is an Artist attached to a Figure that contains a region for plotting data, and usually includes two (or three in the case of 3D) :class:`~matplotlib.axis.Axis` objects (be aware of the difference between **Axes** and **Axis**) that provide ticks and tick labels to provide scales for the data in the Axes. Each :class:`~.axes.Axes` also has a title (set via :meth:`~matplotlib.axes.Axes.set_title`), an x-label (set via :meth:`~matplotlib.axes.Axes.set_xlabel`), and a y-label set via :meth:`~matplotlib.axes.Axes.set_ylabel`)."
msgstr "Un Eje es un Artist adjunto a una Figura que contiene una región para trazar datos, y normalmente incluye dos (o tres en el caso de 3D) objetos :class:`~matplotlib.axis.Axis` (ten en cuenta la diferencia entre **Axes** y **Axis**) que proporcionan ticks y etiquetas de marca para proporcionar escalas para los datos en los Ejes. Cada :class:`~.axes.Axes` también tiene un título (establecido mediante :meth:`~matplotlib.axes.Axes.set_title`), una etiqueta x (establecida mediante :meth:`~matplotlib.axes.Axes.set_xlabel`), y una etiqueta y establecida mediante :meth:`~matplotlib.axes.Axes.set_ylabel`)."

#: ../../tutorials/introductory/usage.rst:127
msgid "The :class:`~.axes.Axes` class and its member functions are the primary entry point to working with the OOP interface, and have most of the plotting methods defined on them (e.g. ``ax.plot()``, shown above, uses the `~.Axes.plot` method)"
msgstr "La clase :class:`~.axes.Axes` y sus funciones miembro son el principal punto de entrada para trabajar con la interfaz OOP, y tienen la mayoría de los métodos de trazado definidos en ellos (por ejemplo, ``ax.plot()``, mostrado arriba, utiliza el método `~.Axes.plot`)"

#: ../../tutorials/introductory/usage.rst:133
msgid ":class:`~matplotlib.axis.Axis`"
msgstr ":class:`~matplotlib.axis.Axis`"

#: ../../tutorials/introductory/usage.rst:135
msgid "These objects set the scale and limits and generate ticks (the marks on the Axis) and ticklabels (strings labeling the ticks).  The location of the ticks is determined by a `~matplotlib.ticker.Locator` object and the ticklabel strings are formatted by a `~matplotlib.ticker.Formatter`.  The combination of the correct `.Locator` and `.Formatter` gives very fine control over the tick locations and labels."
msgstr "Estos objetos establecen la escala y los límites y generan ticks (las marcas en el Eje) y ticklabel (cadenas que etiquetan los ticks).  La ubicación de los ticks se determina mediante un objeto `~matplotlib.ticker.Locator` y las cadenas de ticklabel son formateadas por un `~matplotlib.ticker.Formatter`.  La combinación de los objetos `.Locator` y `.Formatter` correctos proporciona un control muy fino sobre las ubicaciones y etiquetas de los ticks."

#: ../../tutorials/introductory/usage.rst:143
msgid ":class:`~matplotlib.artist.Artist`"
msgstr ":class:`~matplotlib.artist.Artist`"

#: ../../tutorials/introductory/usage.rst:145
msgid "Basically, everything visible on the Figure is an Artist (even `.Figure`, `Axes <.axes.Axes>`, and `~.axis.Axis` objects).  This includes `.Text` objects, `.Line2D` objects, :mod:`.collections` objects, `.Patch` objects, etc. When the Figure is rendered, all of the Artists are drawn to the **canvas**.  Most Artists are tied to an Axes; such an Artist cannot be shared by multiple Axes, or moved from one to another."
msgstr "Básicamente, todo lo visible en la Figura es un Artist (incluso los objetos `.Figure`, `Axes <.axes.Axes>`, y `~.axis.Axis`).  Esto incluye objetos `.Text`, objetos `.Line2D`, objetos :mod:`.collections`, objetos `.Patch`, etc. Cuando se renderiza la Figura, todos los Artists se dibujan en el **lienzo**.  La mayoría de los Artists están ligados a un Eje; un Artist no puede ser compartido por varios Ejes, ni moverse de uno a otro."

#: ../../tutorials/introductory/usage.rst:155
msgid "Types of inputs to plotting functions"
msgstr "Tipos de entradas a las funciones de gráfico"

#: ../../tutorials/introductory/usage.rst:157
msgid "Plotting functions expect `numpy.array` or `numpy.ma.masked_array` as input, or objects that can be passed to `numpy.asarray`. Classes that are similar to arrays ('array-like') such as `pandas` data objects and `numpy.matrix` may not work as intended.  Common convention is to convert these to `numpy.array` objects prior to plotting. For example, to convert a `numpy.matrix` ::"
msgstr "Las funciones de grafico esperan `numpy.array` o `numpy.ma.masked_array` como entrada, u objetos que puedan pasarse a `numpy.asarray`. Las clases que son similares a los arreglos ('array-like') como los objetos de datos `pandas` y `numpy.matrix` pueden no funcionar como se pretende.  La convención común es convertirlos en objetos `numpy.array` antes de graficarlos. Por ejemplo, para convertir un `numpy.matrix` ::"

#: ../../tutorials/introductory/usage.rst:167
msgid "Most methods will also parse an addressable object like a *dict*, a `numpy.recarray`, or a `pandas.DataFrame`.  Matplotlib allows you provide the ``data`` keyword argument and generate plots passing the strings corresponding to the *x* and *y* variables."
msgstr "La mayoría de los métodos también analizarán un objeto direccionable como un *dict*, un `numpy.recarray`, o un `pandas.DataFrame`.  Matplotlib permite proporcionar el argumento de la palabra clave ``data`` y generar gráficos pasando las cadenas correspondientes a las variables *x* e *y*."

#: ../../tutorials/introductory/usage.rst:213
msgid "Coding styles"
msgstr "Estilos de código"

#: ../../tutorials/introductory/usage.rst:216
msgid "The object-oriented and the pyplot interfaces"
msgstr "Las interfaces orientada a objetos y pyplot"

#: ../../tutorials/introductory/usage.rst:218
msgid "As noted above, there are essentially two ways to use Matplotlib:"
msgstr "Como se ha señalado anteriormente, hay esencialmente dos maneras de utilizar Matplotlib:"

#: ../../tutorials/introductory/usage.rst:220
msgid "Explicitly create Figures and Axes, and call methods on them (the \"object-oriented (OO) style\")."
msgstr "Crear explícitamente Figuras y Ejes, e invocar métodos sobre ellos (el \"estilo orientado a objetos (OO)\")."

#: ../../tutorials/introductory/usage.rst:222
msgid "Rely on pyplot to automatically create and manage the Figures and Axes, and use pyplot functions for plotting."
msgstr "Confía en pyplot para crear y gestionar automáticamente las figuras y los ejes, y utiliza las funciones de pyplot para graficar."

#: ../../tutorials/introductory/usage.rst:225
msgid "So one can use the OO-style"
msgstr "Así que uno puede usar el estilo OO"

#: ../../tutorials/introductory/usage.rst:266
msgid "or the pyplot-style:"
msgstr "o el estilo pyplot:"

#: ../../tutorials/introductory/usage.rst:306
msgid "(In addition, there is a third approach, for the case when embedding Matplotlib in a GUI application, which completely drops pyplot, even for figure creation. See the corresponding section in the gallery for more info: :ref:`user_interfaces`.)"
msgstr "(Además, hay un tercer enfoque, para el caso de incrustar Matplotlib en una aplicación IGU, que deja de lado completamente a pyplot, incluso para la creación de figuras. Ver la sección correspondiente en la galería para más información: :ref:`user_interfaces`.)"

#: ../../tutorials/introductory/usage.rst:311
msgid "Matplotlib's documentation and examples use both the OO and the pyplot styles. In general, we suggest using the OO style, particularly for complicated plots, and functions and scripts that are intended to be reused as part of a larger project. However, the pyplot style can be very convenient for quick interactive work."
msgstr "La documentación y los ejemplos de Matplotlib utilizan los estilos OO y pyplot. En general, sugerimos que se utilice el estilo OO, sobre todo para los gráficos complicados, y las funciones y scripts que están destinados a ser reutilizados como parte de un proyecto más grande. Sin embargo, el estilo pyplot puede ser muy conveniente para el trabajo interactivo rápido."

#: ../../tutorials/introductory/usage.rst:319
msgid "You may find older examples that use the ``pylab`` interface, via ``from pylab import *``. This approach is strongly deprecated."
msgstr "Puedes encontrar ejemplos antiguos que utilizan la interfaz ``pylab``, a través de ``from pylab import *``. Este enfoque está fuertemente obsoleto."

#: ../../tutorials/introductory/usage.rst:323
msgid "Making a helper functions"
msgstr "Realización de funciones de ayuda"

#: ../../tutorials/introductory/usage.rst:325
msgid "If you need to make the same plots over and over again with different data sets, or want to easily wrap Matplotlib methods, use the recommended signature function below."
msgstr "Si necesitas hacer los mismos gráficos una y otra vez con diferentes conjuntos de datos, o quieres envolver fácilmente los métodos de Matplotlib, utiliza la función de firma recomendada a continuación."

#: ../../tutorials/introductory/usage.rst:351
msgid "which you would then use twice to populate two subplots:"
msgstr "que luego se utilizaría dos veces para rellenar dos subgráficos:"

#: ../../tutorials/introductory/usage.rst:385
msgid "Note that if you want to install these as a python package, or any other customizations you could use one of the many templates on the web; Matplotlib has one at `mpl-cookiecutter <https://github.com/matplotlib/matplotlib-extension-cookiecutter>`_"
msgstr "Ten en cuenta que si quieres instalar esto como un paquete de python, o cualquier otra personalización podrías usar una de las muchas plantillas que hay en la web; Matplotlib tiene una en `mpl-cookiecutter <https://github.com/matplotlib/matplotlib-extension-cookiecutter>`_"

#: ../../tutorials/introductory/usage.rst:392
msgid "Styling Artists"
msgstr "Estilo de Artists"

#: ../../tutorials/introductory/usage.rst:394
msgid "Most plotting methods have styling options for the Artists, accessible either when a plotting method is called, or from a \"setter\" on the Artist.  In the plot below we manually set the *color*, *linewidth*, and *linestyle* of the Artists created by `~.Axes.plot`, and we set the linestyle of the second line after the fact with `~.Line2D.set_linestyle`."
msgstr "La mayoría de los métodos de gráfico tienen opciones de estilo para los Artists, accesibles cuando se llama a un método de graficar, o desde un \"setter\" en el Artist.  En el gráfico que se muestra a continuación, establecemos manualmente el *color*, el *ancho de línea* y el *estilo de línea* de los Artistas creados por `~.Axes.plot`, y establecemos el estilo de línea de la segunda línea después del hecho con `~.Line2D.set_linestyle`."

#: ../../tutorials/introductory/usage.rst:426
msgid "Colors"
msgstr "Colores"

#: ../../tutorials/introductory/usage.rst:428
msgid "Matplotlib has a very flexible array of colors that are accepted for most Artists; see the :doc:`colors tutorial </tutorials/colors/colors>` for a list of specifications. Some Artists will take multiple colors.  i.e. for a `~.Axes.scatter` plot, the edge of the markers can be different colors from the interior:"
msgstr "Matplotlib tiene un arreglo muy flexible de colores que se aceptan para la mayoría de los Artists; ver el :doc:`tutorial de colores </tutorials/colors/colors>` para una lista de especificaciones. Algunos Artists tomarán múltiples colores. Por ejemplo, para un gráfico `~.Axes.scatter`, el borde de los marcadores puede ser de diferentes colores que el interior:"

#: ../../tutorials/introductory/usage.rst:465
msgid "Linewidths, linestyles, and markersizes"
msgstr "Anchos de línea, estilos de línea y tamaños de marcadores"

#: ../../tutorials/introductory/usage.rst:467
msgid "Line widths are typically in typographic points (1 pt = 1/72 inch) and available for Artists that have stroked lines.  Similarly, stroked lines can have a linestyle.  See the :doc:`linestyles example </gallery/lines_bars_and_markers/linestyles>`."
msgstr "Los anchos de línea suelen estar en puntos tipográficos (1 pt = 1/72 pulgadas) y están disponibles para los Artists que tienen líneas trazadas.  Del mismo modo, las líneas trazadas pueden tener un estilo de línea.  Consulta el :doc:`ejemplo de estilos de línea </gallery/lines_bars_and_markers/linestyles>`."

#: ../../tutorials/introductory/usage.rst:472
msgid "Marker size depends on the method being used.  `~.Axes.plot` specifies markersize in points, and is generally the \"diameter\" or width of the marker.  `~.Axes.scatter` specifies markersize as approximately proportional to the visual area of the marker.  There is an array of markerstyles available as string codes (see :mod:`~.matplotlib.markers`), or users can define their own `~.MarkerStyle` (see :doc:`/gallery/lines_bars_and_markers/marker_reference`):"
msgstr "El tamaño del marcador depende del método que se utilice.  `~.Axes.plot` especifica el tamaño del marcador en puntos, y es generalmente el \"diámetro\" o la anchura del marcador. `~.Axes.scatter` especifica el tamaño del marcador como aproximadamente proporcional al área visual del marcador.  Hay una serie de estilos de marcador disponibles como códigos de cadena (ver :mod:`~.matplotlib.markers`), o los usuarios pueden definir su propio `~.MarkerStyle` (ver :doc:`/gallery/lines_bars_and_markers/marker_reference`):"

#: ../../tutorials/introductory/usage.rst:515
msgid "Labelling plots"
msgstr "Etiquetado de gráficos"

#: ../../tutorials/introductory/usage.rst:518
msgid "Axes labels and text"
msgstr "Etiquetas y texto de los ejes"

#: ../../tutorials/introductory/usage.rst:520
msgid "`~.Axes.set_xlabel`, `~.Axes.set_ylabel`, and `~.Axes.set_title` are used to add text in the indicated locations (see :doc:`/tutorials/text/text_intro` for more discussion).  Text can also be directly added to plots using `~.Axes.text`:"
msgstr "Las funciones `~.Axes.set_xlabel`, `~.Axes.set_ylabel` y `~.Axes.set_title` se utilizan para añadir texto en los lugares indicados ( ver :doc:`/tutorials/text/text_intro` para más información).  El texto también puede añadirse directamente a los gráficos utilizando `~.Axes.text`:"

#: ../../tutorials/introductory/usage.rst:557
msgid "All of the `~.Axes.text` functions return a `matplotlib.text.Text` instance.  Just as with lines above, you can customize the properties by passing keyword arguments into the text functions::"
msgstr "Todas las funciones `~.Axes.text` devuelven una instancia `matplotlib.text.Text`.  Al igual que con las líneas anteriores, puede personalizar las propiedades pasando argumentos de palabras clave a las funciones de texto::"

#: ../../tutorials/introductory/usage.rst:563
msgid "These properties are covered in more detail in :doc:`/tutorials/text/text_props`."
msgstr "Estas propiedades se tratan con más detalle en :doc:`/tutorials/text/text_props`."

#: ../../tutorials/introductory/usage.rst:567
msgid "Using mathematical expressions in text"
msgstr "Usar expresiones matemáticas en el texto"

#: ../../tutorials/introductory/usage.rst:569
msgid "Matplotlib accepts TeX equation expressions in any text expression. For example to write the expression :math:`\\sigma_i=15` in the title, you can write a TeX expression surrounded by dollar signs::"
msgstr "Matplotlib acepta expresiones de ecuaciones TeX en cualquier expresión de texto. Por ejemplo, para escribir la expresión :math:`\\sigma_i=15` en el título, puede escribir una expresión TeX rodeada de signos de dólar::"

#: ../../tutorials/introductory/usage.rst:575
msgid "where the ``r`` preceding the title string signifies that the string is a *raw* string and not to treat backslashes as python escapes. Matplotlib has a built-in TeX expression parser and layout engine, and ships its own math fonts – for details see :doc:`/tutorials/text/mathtext`.  You can also use LaTeX directly to format your text and incorporate the output directly into your display figures or saved postscript – see :doc:`/tutorials/text/usetex`."
msgstr "donde la ``r`` que precede a la cadena del título significa que la cadena es una cadena *raw* y que no debe tratar las barras invertidas como escapes de python. Matplotlib tiene un analizador de expresiones TeX y un motor de diseño incorporados, y envía sus propias fuentes matemáticas - para más detalles ver :doc:`/tutorials/text/mathtext`.  También puedes utilizar LaTeX directamente para formatear su texto e incorporar la salida directamente en sus figuras de visualización o postscript guardado - ver :doc:`/tutorials/text/usetex`."

#: ../../tutorials/introductory/usage.rst:584
msgid "Annotations"
msgstr "Anotaciones"

#: ../../tutorials/introductory/usage.rst:586
msgid "We can also annotate points on a plot, often by connecting an arrow pointing to *xy*, to a piece of text at *xytext*:"
msgstr "También podemos anotar puntos en un gráfico, a menudo conectando una flecha que apunta a *xy*, con un trozo de texto en *xytext*:"

#: ../../tutorials/introductory/usage.rst:627
msgid "In this basic example, both *xy* and *xytext* are in data coordinates. There are a variety of other coordinate systems one can choose -- see :ref:`annotations-tutorial` and :ref:`plotting-guide-annotation` for details.  More examples also can be found in :doc:`/gallery/text_labels_and_annotations/annotation_demo`."
msgstr "En este ejemplo básico, tanto *xy* como *xytext* están en coordenadas de datos. Hay una variedad de otros sistemas de coordenadas que se pueden elegir -- ver :ref:`annotations-tutorial` y :ref:`plotting-guide-annotation` para más detalles.  También se pueden encontrar más ejemplos en :doc:`/gallery/text_labels_and_annotations/annotation_demo`."

#: ../../tutorials/introductory/usage.rst:634
msgid "Legends"
msgstr "Leyendas"

#: ../../tutorials/introductory/usage.rst:636
msgid "Often we want to identify lines or markers with a `.Axes.legend`:"
msgstr "A menudo queremos identificar líneas o marcadores con un `.Axes.legend`:"

#: ../../tutorials/introductory/usage.rst:671
msgid "Legends in Matplotlib are quite flexible in layout, placement, and what Artists they can represent. They are discussed in detail in :doc:`/tutorials/intermediate/legend_guide`."
msgstr "Las leyendas en Matplotlib son bastante flexibles en cuanto a su diseño, colocación y los Artists que pueden representar. Se discuten en detalle en :doc:`/tutorials/intermediate/legend_guide`."

#: ../../tutorials/introductory/usage.rst:676
msgid "Axis scales and ticks"
msgstr "Escalas y ticks de los ejes"

#: ../../tutorials/introductory/usage.rst:678
msgid "Each Axes has two (or three) `~.axis.Axis` objects representing the x- and y-axis. These control the *scale* of the Axis, the tick *locators* and the tick *formatters*. Additional Axes can be attached to display further Axis objects."
msgstr "Cada Eje tiene dos (o tres) objetos `~.axis.Axis` que representan los ejes x e y. Éstos controlan la *escala* del Eje, los *localizadores* de ticks y los *formateadores* de ticks. Se pueden adjuntar ejes adicionales para mostrar más objetos Axis."

#: ../../tutorials/introductory/usage.rst:684
msgid "Scales"
msgstr "Escalas"

#: ../../tutorials/introductory/usage.rst:686
msgid "In addition to the linear scale, Matplotlib supplies non-linear scales, such as a log-scale.  Since log-scales are used so much there are also direct methods like `~.Axes.loglog`, `~.Axes.semilogx`, and `~.Axes.semilogy`.  There are a number of scales (see :doc:`/gallery/scales/scales` for other examples).  Here we set the scale manually:"
msgstr "Además de la escala lineal, Matplotlib proporciona escalas no lineales, como una escala logarítmica.  Dado que las escalas logarítmicas se utilizan mucho, también hay métodos directos como `~.Axes.loglog`, `~.Axes.semilogx` y `~.Axes.semilogy`.  Hay varias escalas (ver :doc:`/gallery/scales/scales` para otros ejemplos).  Aquí establecemos la escala manualmente:"

#: ../../tutorials/introductory/usage.rst:728
msgid "The scale sets the mapping from data values to spacing along the Axis. This happens in both directions, and gets combined into a *transform*, which is the way that Matplotlib maps from data coordinates to Axes, Figure, or screen coordinates.  See :doc:`/tutorials/advanced/transforms_tutorial`."
msgstr "La escala establece el mapeo de los valores de los datos al espacio a lo largo del Eje. Esto ocurre en ambas direcciones, y se combina en una *transformación*, que es la forma en que Matplotlib mapea desde las coordenadas de los datos a los Ejes, la Figura o las coordenadas de la pantalla.  Ver :doc:`/tutorials/advanced/transforms_tutorial`."

#: ../../tutorials/introductory/usage.rst:734
msgid "Tick locators and formatters"
msgstr "Localizadores y formateadores de tick"

#: ../../tutorials/introductory/usage.rst:736
msgid "Each Axis has a tick *locator* and *formatter* that choose where along the Axis objects to put tick marks.  A simple interface to this is `~.Axes.set_xticks`:"
msgstr "Cada Eje tiene un *localizador* de tick y un *formateador* que eligen en qué lugar de los objetos del Eje se colocan las marcas de ticks.  Una interfaz sencilla para esto es `~.Axes.set_xticks`:"

#: ../../tutorials/introductory/usage.rst:776
msgid "Different scales can have different locators and formatters; for instance the log-scale above uses `~.LogLocator` and `~.LogFormatter`. See :doc:`/gallery/ticks/tick-locators` and :doc:`/gallery/ticks/tick-formatters` for other formatters and locators and information for writing your own."
msgstr "Diferentes escalas pueden tener diferentes localizadores y formateadores; por ejemplo, la escala de registro anterior utiliza `~.LogLocator` y `~.LogFormatter`. Ver :doc:`/gallery/ticks/tick-locators` y :doc:`/gallery/ticks/tick-formatters` para otros formateadores y localizadores e información para escribir los suyos propios."

#: ../../tutorials/introductory/usage.rst:783
msgid "Plotting dates and strings"
msgstr "Graficar fechas y cadenas"

#: ../../tutorials/introductory/usage.rst:785
msgid "Matplotlib can handle plotting arrays of dates and arrays of strings, as well as floating point numbers.  These get special locators and formatters as appropriate.  For dates:"
msgstr "Matplotlib puede manejar arreglos de fechas y arreglos de cadenas, así como números de punto flotante.  Estos obtienen localizadores y formateadores especiales, según corresponda.  Para las fechas:"

#: ../../tutorials/introductory/usage.rst:816
msgid "For more information see the date examples (e.g. :doc:`/gallery/text_labels_and_annotations/date`)"
msgstr "Para más información, consulta los ejemplos de fechas (por ejemplo, :doc:`/gallery/text_labels_and_annotations/date`)"

#: ../../tutorials/introductory/usage.rst:819
msgid "For strings, we get categorical plotting (see: :doc:`/gallery/lines_bars_and_markers/categorical_variables`)."
msgstr "En el caso de las cadenas, obtenemos un gráfico categórico (ver: :doc:`/gallery/lines_bars_and_markers/categorical_variables`)."

#: ../../tutorials/introductory/usage.rst:854
msgid "One caveat about categorical plotting is that some methods of parsing text files return a list of strings, even if the strings all represent numbers or dates.  If you pass 1000 strings, Matplotlib will think you meant 1000 categories and will add 1000 ticks to your plot!"
msgstr "Una advertencia sobre el graficado categórico es que algunos métodos de análisis de archivos de texto devuelven una lista de cadenas, incluso si todas las cadenas representan números o fechas.  Si pasas 1000 cadenas, Matplotlib pensará que quiere decir 1000 categorías y añadirá 1000 marcas a su gráfico."

#: ../../tutorials/introductory/usage.rst:861
msgid "Additional Axis objects"
msgstr "Objetos adicionales del eje"

#: ../../tutorials/introductory/usage.rst:863
msgid "Plotting data of different magnitude in one chart may require an additional y-axis. Such an Axis can be created by using `~.Axes.twinx` to add a new Axes with an invisible x-axis and a y-axis positioned at the right (analogously for `~.Axes.twiny`). See :doc:`/gallery/subplots_axes_and_figures/two_scales` for another example."
msgstr "El graficado de datos de diferente magnitud en un gráfico puede requerir un eje y adicional. Dicho eje puede crearse utilizando `~.Axes.twinx` para añadir un nuevo eje con un eje x invisible y un eje y posicionado a la derecha (análogamente para `~.Axes.twiny`). Ver :doc:`/gallery/subplots_axes_and_figures/two_scales` para otro ejemplo."

#: ../../tutorials/introductory/usage.rst:869
msgid "Similarly, you can add a `~.Axes.secondary_xaxis` or `~.Axes.secondary_yaxis` having a different scale than the main Axis to represent the data in different scales or units. See :doc:`/gallery/subplots_axes_and_figures/secondary_axis` for further examples."
msgstr "Del mismo modo, puede añadir un `~.Axes.secondary_xaxis` o `~.Axes.secondary_yaxis` con una escala diferente a la del eje principal para representar los datos en diferentes escalas o unidades. Consulta :doc:`/gallery/subplots_axes_and_figures/secondary_axis` para ver más ejemplos."

#: ../../tutorials/introductory/usage.rst:914
msgid "Color mapped data"
msgstr "Datos mapeados en color"

#: ../../tutorials/introductory/usage.rst:916
msgid "Often we want to have a third dimension in a plot represented by a colors in a colormap. Matplotlib has a number of plot types that do this:"
msgstr "A menudo queremos tener una tercera dimensión en un gráfico representada por colores en un mapa de colores. Matplotlib tiene una serie de tipos de gráficos que hacen esto:"

#: ../../tutorials/introductory/usage.rst:968
msgid "Colormaps"
msgstr "Mapas de colores"

#: ../../tutorials/introductory/usage.rst:970
msgid "These are all examples of Artists that derive from  `~.ScalarMappable` objects.  They all can set a linear mapping between *vmin* and *vmax* into the colormap specified by *cmap*.  Matplotlib has many colormaps to choose from (:doc:`/tutorials/colors/colormaps`) you can make your own (:doc:`/tutorials/colors/colormap-manipulation`) or download as `third-party packages <https://matplotlib.org/mpl-third-party/#colormaps-and-styles>`_."
msgstr "Todos estos son ejemplos de Artists que derivan de objetos `~.ScalarMappable`.  Todos ellos pueden establecer un mapeo lineal entre *vmin* y *vmax* en el mapa de colores especificado por *cmap*.  Matplotlib tiene muchos mapas de colores entre los que elegir (:doc:`/tutorials/colors/colormaps`), puedes hacer los tuyos propios (:doc:`/tutorials/colors/colormap-manipulation`) o descargarlos como `paquetes de terceros <https://matplotlib.org/mpl-third-party/#colormaps-and-styles>`_."

#: ../../tutorials/introductory/usage.rst:979
msgid "Normalizations"
msgstr "Normalizaciones"

#: ../../tutorials/introductory/usage.rst:981
msgid "Sometimes we want a non-linear mapping of the data to the colormap, as in the ``LogNorm`` example above.  We do this by supplying the ScalarMappable with the *norm* argument instead of *vmin* and *vmax*. More normalizations are shown at :doc:`/tutorials/colors/colormapnorms`."
msgstr "A veces queremos un mapeo no lineal de los datos al mapa de colores, como en el ejemplo ``LogNorm`` de arriba.  Esto se hace suministrando el ScalarMappable con el argumento *norm* en lugar de *vmin* y *vmax*. Se muestran más normalizaciones en :doc:`/tutorials/colors/colormnorms`."

#: ../../tutorials/introductory/usage.rst:987
msgid "Colorbars"
msgstr "Barras de colores"

#: ../../tutorials/introductory/usage.rst:989
msgid "Adding a `~.Figure.colorbar` gives a key to relate the color back to the underlying data. Colorbars are figure-level Artists, and are attached to a ScalarMappable (where they get their information about the norm and colormap) and usually steal space from a parent Axes.  Placement of colorbars can be complex: see :doc:`/gallery/subplots_axes_and_figures/colorbar_placement` for details.  You can also change the appearance of colorbars with the *extend* keyword to add arrows to the ends, and *shrink* and *aspect* to control the size.  Finally, the colorbar will have default locators and formatters appropriate to the norm.  These can be changed as for other Axis objects."
msgstr "Añadir un `~.Figure.colorbar` da una clave para relacionar el color con los datos subyacentes. Las barras de color son Artists a nivel de figura, y se adjuntan a un ScalarMappable (de donde obtienen su información sobre la norma y el mapa de color) y normalmente roban espacio de un Eje padre.  La colocación de las barras de color puede ser compleja: ver :doc:`/gallery/subplots_axes_and_figures/colorbar_placement` para más detalles.  También puedes cambiar la apariencia de las barras de color con la palabra clave *extend* para añadir flechas a los extremos, y *shrink* y *aspect* para controlar el tamaño.  Por último, la barra de colores tendrá localizadores y formateadores por defecto adecuados a la norma.  Estos pueden ser cambiados como para otros objetos Eje."

#: ../../tutorials/introductory/usage.rst:1003
msgid "Working with multiple Figures and Axes"
msgstr "Trabajar con múltiples figuras y ejes"

#: ../../tutorials/introductory/usage.rst:1005
msgid "You can open multiple Figures with multiple calls to ``fig = plt.figure()`` or ``fig2, ax = plt.subplots()``.  By keeping the object references you can add Artists to either Figure."
msgstr "Puedes abrir múltiples Figuras con múltiples invocaciones a ``fig = plt.figure()`` o ``fig2, ax = plt.subplots()``.  Manteniendo las referencias a los objetos puedes añadir Artists a cualquiera de las Figuras."

#: ../../tutorials/introductory/usage.rst:1009
msgid "Multiple Axes can be added a number of ways, but the most basic is ``plt.subplots()`` as used above.  One can achieve more complex layouts, with Axes objects spanning columns or rows, using `~.pyplot.subplot_mosaic`."
msgstr "Se pueden añadir múltiples ejes de varias maneras, pero la más básica es ``plt.subplots()`` como se ha utilizado anteriormente.  Se pueden conseguir diseños más complejos, con objetos Axes que abarquen columnas o filas, utilizando `~.pyplot.subplot_mosaic`."

#: ../../tutorials/introductory/usage.rst:1046
msgid "Matplotlib has quite sophisticated tools for arranging Axes: See :doc:`/tutorials/intermediate/arranging_axes` and :doc:`/tutorials/provisional/mosaic`."
msgstr "Matplotlib tiene herramientas bastante sofisticadas para organizar los ejes: Ver :doc:`/tutorials/intermediate/arranging_axes` y :doc:`/tutorials/provisional/mosaic`."

#: ../../tutorials/introductory/usage.rst:1052
msgid "More reading"
msgstr "Más lectura"

#: ../../tutorials/introductory/usage.rst:1054
msgid "For more plot types see :doc:`Plot types </plot_types/index>` and the :doc:`API reference </api/index>`, in particlar the :doc:`Axes API </api/axes_api>`."
msgstr "Para ver más tipos de gráficos, consulta :doc:`Tipos de gráficos </plot_types/index>` y el :doc:`Referencia a la API </api/index>`, en particular el :doc:`Axes API </api/axes_api>`."

#: ../../tutorials/introductory/usage.rst:1061
msgid "**Total running time of the script:** ( 0 minutes  7.055 seconds)"
msgstr "**Tiempo total de ejecución del script:** (0 minutos 7.055 segundos)"

#: ../../tutorials/introductory/usage.rst:1076
msgid ":download:`Download Python source code: usage.py <usage.py>`"
msgstr ":download:`Download Python source code: usage.py <usage.py>`"

#: ../../tutorials/introductory/usage.rst:1082
msgid ":download:`Download Jupyter notebook: usage.ipynb <usage.ipynb>`"
msgstr ":download:`Download Jupyter notebook: usage.ipynb <usage.ipynb>`"

#: ../../tutorials/introductory/usage.rst:1089
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"

