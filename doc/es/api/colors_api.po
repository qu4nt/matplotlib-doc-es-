msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 14:10\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/colors_api.po\n"
"X-Crowdin-File-ID: 1770\n"
"Language: es_ES\n"

#: ../../api/colors_api.rst:3
msgid "``matplotlib.colors``"
msgstr "``matplotlib.colors``"

#: ../../api/colors_api.rst:7
msgid "The Color :ref:`tutorials <tutorials-colors>` and :ref:`examples <color_examples>` demonstrate how to set colors and colormaps. You may want to read those instead."
msgstr "El color :ref:`tutorials <tutorials-colors>` y :ref:`examples <color_examples>` demuestran cómo establecer colores y mapas de color. Puede que quieras leerlos en su lugar."

#: matplotlib.colors:1 of
msgid "A module for converting numbers or color arguments to *RGB* or *RGBA*."
msgstr "Un módulo para convertir números o argumentos de color a *RGB* o *RGBA*."

#: matplotlib.colors:3 of
msgid "*RGB* and *RGBA* are sequences of, respectively, 3 or 4 floats in the range 0-1."
msgstr "*RGB* y *RGBA* son secuencias de, respectivamente, 3 o 4 flotantes en el rango 0-1."

#: matplotlib.colors:6 of
msgid "This module includes functions and classes for color specification conversions, and for mapping numbers to colors in a 1-D array of colors called a colormap."
msgstr "Este módulo incluye funciones y clases para las conversiones de las especificaciones de color, y para mapear números a los colores en un array de colores 1-D llamado mapa de colores."

#: matplotlib.colors:9 of
msgid "Mapping data onto colors using a colormap typically involves two steps: a data array is first mapped onto the range 0-1 using a subclass of `Normalize`, then this number is mapped to a color using a subclass of `Colormap`.  Two subclasses of `Colormap` provided here:  `LinearSegmentedColormap`, which uses piecewise-linear interpolation to define colormaps, and `ListedColormap`, which makes a colormap from a list of colors."
msgstr "Mapear datos sobre colores usando un mapa de colores típicamente implica dos pasos: un array de datos es mapeado por primera vez al rango 0-1 usando una subclase de `Normalize`, entonces este número se asigna a un color usando una subclase de `Colormap`. Dos subclases de `Colormap` proporcionadas aquí: `LinearSegmentedColormap`, que utiliza la interpolación lineal piecewise-para definir mapas de colores, y `ListedColormap`, que hace un mapa de colores de una lista de colores."

#: matplotlib.colors:18 of
msgid ":doc:`/tutorials/colors/colormap-manipulation` for examples of how to make colormaps and"
msgstr ":doc:`/tutorials/colors/colormap-manipulation` para ejemplos de cómo hacer colormaps y"

#: matplotlib.colors:21 of
msgid ":doc:`/tutorials/colors/colormaps` for a list of built-in colormaps."
msgstr ":doc:`/tutorials/colors/colormaps` para una lista de mapas de colores incorporados."

#: matplotlib.colors:23 of
msgid ":doc:`/tutorials/colors/colormapnorms` for more details about data normalization"
msgstr ":doc:`/tutorials/colors/colormapnorms` para más detalles sobre la normalización de datos"

#: matplotlib.colors:26 of
msgid "More colormaps are available at palettable_."
msgstr "Más mapas de colores están disponibles en palettable_."

#: matplotlib.colors:28 of
msgid "The module also provides functions for checking whether an object can be interpreted as a color (`is_color_like`), for converting such an object to an RGBA tuple (`to_rgba`) or to an HTML-like hex string in the \"#rrggbb\" format (`to_hex`), and a sequence of colors to an (n, 4) RGBA array (`to_rgba_array`).  Caching is used for efficiency."
msgstr "El módulo también proporciona funciones para comprobar si un objeto puede ser interpretado como un color (`is_color_like`), para convertir tal objeto a una tupla RGBA (`to_rgba`) o a una cadena hexadecimal similar a HTML en el formato \"#rggbb\" (`to_hex`), y una secuencia de colores a un array (n, 4) RGBA (`to_rgba_array`). El caché se utiliza para la eficiencia."

#: matplotlib.colors:34 of
msgid "Colors that Matplotlib recognizes are listed at :doc:`/tutorials/colors/colors`."
msgstr "Los colores que reconoce Matplotlib están listados en :doc:`/tutorials/colors/colores`."

#: ../../api/colors_api.rst:18
msgid "Classes"
msgstr "Clases"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`BoundaryNorm <matplotlib.colors.BoundaryNorm>`\\ \\(boundaries\\, ncolors\\[\\, clip\\, extend\\]\\)"
msgstr ":py:obj:`BoundaryNorm <matplotlib.colors.BoundaryNorm>`\\ \\(boundaries\\, ncolors\\[\\, clip\\, extend\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Generate a colormap index based on discrete intervals."
msgstr "Genera un índice de mapa de colores basado en intervalos discretos."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`Colormap <matplotlib.colors.Colormap>`\\ \\(name\\[\\, N\\]\\)"
msgstr ":py:obj:`Colormap <matplotlib.colors.Colormap>`\\ \\(name\\[\\, N\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Baseclass for all scalar to RGBA mappings."
msgstr "Baseclass para todos los escalares a mapeos RGBA."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`CenteredNorm <matplotlib.colors.CenteredNorm>`\\ \\(\\[vcenter\\, halfrange\\, clip\\]\\)"
msgstr ":py:obj:`CenteredNorm <matplotlib.colors.CenteredNorm>`\\ \\(\\[vcenter\\, halfrange\\, clip\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Normalize symmetrical data around a center (0 by default)."
msgstr "Normaliza los datos simétricos alrededor de un centro (0 por defecto)."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`LightSource <matplotlib.colors.LightSource>`\\ \\(\\[azdeg\\, altdeg\\, hsv\\_min\\_val\\, ...\\]\\)"
msgstr ":py:obj:`LightSource <matplotlib.colors.LightSource>`\\ \\(\\[azdeg\\, altdeg\\, hsv\\_min\\_val\\, ...\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Create a light source coming from the specified azimuth and elevation."
msgstr "Crea una fuente de luz proveniente del azimut y la elevación especificados."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`LinearSegmentedColormap <matplotlib.colors.LinearSegmentedColormap>`\\ \\(name\\, segmentdata\\[\\, ...\\]\\)"
msgstr ":py:obj:`LinearSegmentedColormap <matplotlib.colors.LinearSegmentedColormap>`\\ \\(name\\, segmentdata\\[\\, ...\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Colormap objects based on lookup tables using linear segments."
msgstr "Objetos de mapa de colores basados en tablas de búsqueda usando segmentos lineales."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`ListedColormap <matplotlib.colors.ListedColormap>`\\ \\(colors\\[\\, name\\, N\\]\\)"
msgstr ":py:obj:`ListedColormap <matplotlib.colors.ListedColormap>`\\ \\(colors\\[\\, name\\, N\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Colormap object generated from a list of colors."
msgstr "Objeto de mapa de colores generado a partir de una lista de colores."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`LogNorm <matplotlib.colors.LogNorm>`\\ \\(\\[vmin\\, vmax\\, clip\\]\\)"
msgstr ":py:obj:`LogNorm <matplotlib.colors.LogNorm>`\\ \\(\\[vmin\\, vmax\\, clip\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Normalize a given value to the 0-1 range on a log scale."
msgstr "Normalizar un valor dado al rango 0-1 en una escala de registro."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`NoNorm <matplotlib.colors.NoNorm>`\\ \\(\\[vmin\\, vmax\\, clip\\]\\)"
msgstr ":py:obj:`NoNorm <matplotlib.colors.NoNorm>`\\ \\(\\[vmin\\, vmax\\, clip\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Dummy replacement for `Normalize`, for the case where we want to use indices directly in a `~matplotlib.cm.ScalarMappable`."
msgstr "Sustitución de Dummy para `Normalize`, para el caso en el que queremos usar índices directamente en un `~matplotlib.cm.ScalarMappable`."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`Normalize <matplotlib.colors.Normalize>`\\ \\(\\[vmin\\, vmax\\, clip\\]\\)"
msgstr ":py:obj:`Normalize <matplotlib.colors.Normalize>`\\ \\(\\[vmin\\, vmax\\, clip\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "A class which, when called, linearly normalizes data into the ``[0.0, 1.0]`` interval."
msgstr "Una clase que, cuando se llama, normaliza los datos en el intervalo ``[0.0, 1.0]``."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`PowerNorm <matplotlib.colors.PowerNorm>`\\ \\(gamma\\[\\, vmin\\, vmax\\, clip\\]\\)"
msgstr ":py:obj:`PowerNorm <matplotlib.colors.PowerNorm>`\\ \\(gamma\\[\\, vmin\\, vmax\\, clip\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Linearly map a given value to the 0-1 range and then apply a power-law normalization over that range."
msgstr "Mapa lineal un valor dado al rango 0-1 y luego aplicar una normalización de la ley de poder sobre ese rango."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`SymLogNorm <matplotlib.colors.SymLogNorm>`\\ \\(linthresh\\[\\, linscale\\, vmin\\, ...\\]\\)"
msgstr ":py:obj:`SymLogNorm <matplotlib.colors.SymLogNorm>`\\ \\(linthresh\\[\\, linscale\\, vmin\\, ...\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "The symmetrical logarithmic scale is logarithmic in both the positive and negative directions from the origin."
msgstr "La escala logarítmica simétrica es logarítmica tanto en las direcciones positivas como negativas desde el origen."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`TwoSlopeNorm <matplotlib.colors.TwoSlopeNorm>`\\ \\(vcenter\\[\\, vmin\\, vmax\\]\\)"
msgstr ":py:obj:`TwoSlopeNorm <matplotlib.colors.TwoSlopeNorm>`\\ \\(vcenter\\[\\, vmin\\, vmax\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Normalize data with a set center."
msgstr "Normalizar los datos con un centro determinado."

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid ":py:obj:`FuncNorm <matplotlib.colors.FuncNorm>`\\ \\(functions\\[\\, vmin\\, vmax\\, clip\\]\\)"
msgstr ":py:obj:`FuncNorm <matplotlib.colors.FuncNorm>`\\ \\(functions\\[\\, vmin\\, vmax\\, clip\\]\\)"

#: ../../api/colors_api.rst:37:<autosummary>:1
msgid "Arbitrary normalization using functions for the forward and inverse."
msgstr "Normalización arbitraria utilizando funciones para el futuro y la inversión."

#: ../../api/colors_api.rst:39
msgid "Functions"
msgstr "Funciones"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`from_levels_and_colors <matplotlib.colors.from_levels_and_colors>`\\ \\(levels\\, colors\\[\\, extend\\]\\)"
msgstr ":py:obj:`from_levels_and_colors <matplotlib.colors.from_levels_and_colors>`\\ \\(levels\\, colors\\[\\, extend\\]\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "A helper routine to generate a cmap and a norm instance which behave similar to contourf's levels and colors arguments."
msgstr "Una rutina auxiliar para generar un cmap y una instancia de la norma que se comportan de forma similar a los niveles y colores de contorno."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`hsv_to_rgb <matplotlib.colors.hsv_to_rgb>`\\ \\(hsv\\)"
msgstr ":py:obj:`hsv_to_rgb <matplotlib.colors.hsv_to_rgb>`\\ \\(hsv\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Convert hsv values to rgb."
msgstr "Convierte valores de hsv a rgb."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`rgb_to_hsv <matplotlib.colors.rgb_to_hsv>`\\ \\(arr\\)"
msgstr ":py:obj:`rgb_to_hsv <matplotlib.colors.rgb_to_hsv>`\\ \\(arr\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Convert float rgb values (in the range [0, 1]), in a numpy array to hsv values."
msgstr "Convierte valores rgb flotantes (en el rango [0, 1]), en una matriz numpy a valores hsv."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`to_hex <matplotlib.colors.to_hex>`\\ \\(c\\[\\, keep\\_alpha\\]\\)"
msgstr ":py:obj:`to_hex <matplotlib.colors.to_hex>`\\ \\(c\\[\\, keep\\_alpha\\]\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Convert *c* to a hex color."
msgstr "Convierte *c* a un color hexadecimal."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`to_rgb <matplotlib.colors.to_rgb>`\\ \\(c\\)"
msgstr ":py:obj:`to_rgb <matplotlib.colors.to_rgb>`\\ \\(c\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Convert *c* to an RGB color, silently dropping the alpha channel."
msgstr "Convierte *c* a un color RGB, descartando silenciosamente el canal alfa."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`to_rgba <matplotlib.colors.to_rgba>`\\ \\(c\\[\\, alpha\\]\\)"
msgstr ":py:obj:`to_rgba <matplotlib.colors.to_rgba>`\\ \\(c\\[\\, alpha\\]\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Convert *c* to an RGBA color."
msgstr "Convierte *c* a un color RGBA."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`to_rgba_array <matplotlib.colors.to_rgba_array>`\\ \\(c\\[\\, alpha\\]\\)"
msgstr ":py:obj:`to_rgba_array <matplotlib.colors.to_rgba_array>`\\ \\(c\\[\\, alpha\\]\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Convert *c* to a (n, 4) array of RGBA colors."
msgstr "Convierte *c* a un array (n, 4) de colores RGBA."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`is_color_like <matplotlib.colors.is_color_like>`\\ \\(c\\)"
msgstr ":py:obj:`is_color_like <matplotlib.colors.is_color_like>`\\ \\(c\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Return whether *c* can be interpreted as an RGB(A) color."
msgstr "Devuelve si *c* puede interpretarse como un color RGB(A)."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`same_color <matplotlib.colors.same_color>`\\ \\(c1\\, c2\\)"
msgstr ":py:obj:`same_color <matplotlib.colors.same_color>`\\ \\(c1\\, c2\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Return whether the colors *c1* and *c2* are the same."
msgstr "Devuelve si los colores *c1* y *c2* son los mismos."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`get_named_colors_mapping <matplotlib.colors.get_named_colors_mapping>`\\ \\(\\)"
msgstr ":py:obj:`get_named_colors_mapping <matplotlib.colors.get_named_colors_mapping>`\\ \\(\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Return the global mapping of names to named colors."
msgstr "Devuelve el mapeo global de nombres a los colores nombrados."

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid ":py:obj:`make_norm_from_scale <matplotlib.colors.make_norm_from_scale>`\\ \\(scale\\_cls\\[\\, ...\\]\\)"
msgstr ":py:obj:`make_norm_from_scale <matplotlib.colors.make_norm_from_scale>`\\ \\(scale\\_cls\\[\\, ...\\]\\)"

#: ../../api/colors_api.rst:55:<autosummary>:1
msgid "Decorator for building a `.Normalize` subclass from a `~.scale.ScaleBase` subclass."
msgstr "Decorador para construir una subclase `.Normalize` desde una subclase `~.scale.ScaleBase`."

