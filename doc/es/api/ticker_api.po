msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-07-19 05:15\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/ticker_api.po\n"
"X-Crowdin-File-ID: 1968\n"
"Language: es_ES\n"

#: ../../api/ticker_api.rst:3
msgid "``matplotlib.ticker``"
msgstr "``matplotlib.ticker``"

#: matplotlib.ticker:2 of
msgid "Tick locating and formatting"
msgstr "Localización y formato de los marcadores"

#: matplotlib.ticker:4 of
msgid "This module contains classes for configuring tick locating and formatting. Generic tick locators and formatters are provided, as well as domain specific custom ones."
msgstr "Este módulo contiene clases para configurar la localización y el formato de los marcadores. Se proporcionan localizadores y formateadores de marcadores genéricos, así como los personalizados específicos del dominio."

#: matplotlib.ticker:8 of
msgid "Although the locators know nothing about major or minor ticks, they are used by the Axis class to support major and minor tick locating and formatting."
msgstr "Aunque los localizadores no saben nada de los marcadores mayores o menores, son utilizados por la clase Axis para soportar la localización y el formato de los marcadores mayores y menores."

#: matplotlib.ticker:12 of
msgid "Tick locating"
msgstr "Localización de marcadores"

#: matplotlib.ticker:14 of
msgid "The Locator class is the base class for all tick locators. The locators handle autoscaling of the view limits based on the data limits, and the choosing of tick locations. A useful semi-automatic tick locator is `MultipleLocator`. It is initialized with a base, e.g., 10, and it picks axis limits and ticks that are multiples of that base."
msgstr "La clase Locator es la clase base para todos los localizadores de marcadores. Los localizadores manejan el autoescalado de los límites de la vista basado en los límites de los datos, y la elección de las ubicaciones de los marcadores. Un útil localizador de marcadores semiautomático es `MultipleLocator`. Se inicializa con una base, por ejemplo, 10, y selecciona los límites del eje y los marcadores que son múltiplos de esa base."

#: matplotlib.ticker:20 of
msgid "The Locator subclasses defined here are:"
msgstr "Las subclases de localizadores definidas aquí son:"

#: matplotlib.ticker:23 of
msgid "`AutoLocator`"
msgstr "`AutoLocator`"

#: matplotlib.ticker:23 of
msgid "`MaxNLocator` with simple defaults. This is the default tick locator for most plotting."
msgstr "`MaxNLocator` con valores predeterminados simples. Este es el localizador de marcadores por defecto para la mayoría de los trazados."

#: matplotlib.ticker:25 of
msgid "`MaxNLocator`"
msgstr "`MaxNLocator`"

#: matplotlib.ticker:25 of
msgid "Finds up to a max number of intervals with ticks at nice locations."
msgstr "Encuentra hasta un número máximo de intervalos con marcadores en buenas ubicaciones."

#: matplotlib.ticker:27 of
msgid "`LinearLocator`"
msgstr "`LinearLocator`"

#: matplotlib.ticker:27 of
msgid "Space ticks evenly from min to max."
msgstr "Espaciar los marcadores uniformemente desde el mínimo hasta el máximo."

#: matplotlib.ticker:28 of
msgid "`LogLocator`"
msgstr "`LogLocator`"

#: matplotlib.ticker:28 of
msgid "Space ticks logarithmically from min to max."
msgstr "Espaciar los marcadores logarítmicamente desde el mínimo al máximo."

#: matplotlib.ticker:29 of
msgid "`MultipleLocator`"
msgstr "`MultipleLocator`"

#: matplotlib.ticker:29 of
msgid "Ticks and range are a multiple of base; either integer or float."
msgstr "Los marcadores y el rango son un múltiplo de la base; ya sea entero o flotante."

#: matplotlib.ticker:31 of
msgid "`FixedLocator`"
msgstr "`FixedLocator`"

#: matplotlib.ticker:31 of
msgid "Tick locations are fixed."
msgstr "Las ubicaciones de los marcadores están arregladas."

#: matplotlib.ticker:32 of
msgid "`IndexLocator`"
msgstr "`IndexLocator`"

#: matplotlib.ticker:32 of
msgid "Locator for index plots (e.g., where ``x = range(len(y))``)."
msgstr "Localizador para gráficos de índice (por ejemplo, donde ``x = range(len(y))``)."

#: matplotlib.ticker:34 of
msgid "`NullLocator`"
msgstr "`NullLocator`"

#: matplotlib.ticker:34 of
msgid "No ticks."
msgstr "No hay marcadores."

#: matplotlib.ticker:35 of
msgid "`SymmetricalLogLocator`"
msgstr "`SymmetricalLogLocator`"

#: matplotlib.ticker:35 of
msgid "Locator for use with with the symlog norm; works like `LogLocator` for the part outside of the threshold and adds 0 if inside the limits."
msgstr "Localizador para usar con la norma symlog; funciona como `LogLocator` para la parte fuera del umbral y añade 0 si está dentro de los límites."

#: matplotlib.ticker:38 of
msgid "`LogitLocator`"
msgstr "`LogitLocator`"

#: matplotlib.ticker:38 of
msgid "Locator for logit scaling."
msgstr "Localizador para el escalado logit."

#: matplotlib.ticker:39 of
msgid "`AutoMinorLocator`"
msgstr "`AutoMinorLocator`"

#: matplotlib.ticker:39 of
msgid "Locator for minor ticks when the axis is linear and the major ticks are uniformly spaced. Subdivides the major tick interval into a specified number of minor intervals, defaulting to 4 or 5 depending on the major interval."
msgstr "Localizador para los marcadores menores cuando el eje es lineal y los marcadores mayores están uniformemente espaciados. Subdivide el intervalo de ticks mayores en un número especificado de intervalos menores, por defecto 4 o 5 dependiendo del intervalo mayor."

#: matplotlib.ticker:46 of
msgid "There are a number of locators specialized for date locations - see the :mod:`.dates` module."
msgstr "Hay una serie de localizadores especializados en ubicaciones de fechas - véase el módulo :mod:`.dates`."

#: matplotlib.ticker:49 of
msgid "You can define your own locator by deriving from Locator. You must override the ``__call__`` method, which returns a sequence of locations, and you will probably want to override the autoscale method to set the view limits from the data limits."
msgstr "Puedes definir tu propio localizador derivando de Locator. Debes anular el método ``__call__``, que devuelve una secuencia de localizaciones, y probablemente querrás anular el método autoscale para establecer los límites de la vista a partir de los límites de los datos."

#: matplotlib.ticker:54 of
msgid "If you want to override the default locator, use one of the above or a custom locator and pass it to the x or y axis instance. The relevant methods are::"
msgstr "Si quieres anular el localizador por defecto, utiliza uno de los anteriores o un localizador personalizado y pásalo a la instancia del eje x o y. Los métodos relevantes son::"

#: matplotlib.ticker:62 of
msgid "The default minor locator is `NullLocator`, i.e., no minor ticks on by default."
msgstr "El localizador menor por defecto es `NullLocator`, es decir, no hay marcadores menores por defecto."

#: matplotlib.ticker:65 of
msgid "`Locator` instances should not be used with more than one `~matplotlib.axis.Axis` or `~matplotlib.axes.Axes`. So instead of::"
msgstr "Las instancias de `Locator` no deben utilizarse con más de un `~matplotlib.axis.Axis` o `~matplotlib.axes.Axes`. Así que en lugar de::"

#: matplotlib.ticker:72 of
msgid "do the following instead::"
msgstr "haz lo siguiente en su lugar::"

#: matplotlib.ticker:78 of
msgid "Tick formatting"
msgstr "Formato de los marcadores"

#: matplotlib.ticker:80 of
msgid "Tick formatting is controlled by classes derived from Formatter. The formatter operates on a single tick value and returns a string to the axis."
msgstr "El formato de los marcadores se controla mediante clases derivadas de Formatter. El formateador opera sobre un único valor de marcador y devuelve una cadena al eje."

#: matplotlib.ticker:84 of
msgid "`NullFormatter`"
msgstr "`NullFormatter`"

#: matplotlib.ticker:84 of
msgid "No labels on the ticks."
msgstr "No hay etiquetas en los marcadores."

#: matplotlib.ticker:85 of
msgid "`FixedFormatter`"
msgstr "`FixedFormatter`"

#: matplotlib.ticker:85 of
msgid "Set the strings manually for the labels."
msgstr "Establecer las cadenas manualmente para las etiquetas."

#: matplotlib.ticker:86 of
msgid "`FuncFormatter`"
msgstr "`FuncFormatter`"

#: matplotlib.ticker:86 of
msgid "User defined function sets the labels."
msgstr "La función definida por el usuario establece las etiquetas."

#: matplotlib.ticker:87 of
msgid "`StrMethodFormatter`"
msgstr "`StrMethodFormatter`"

#: matplotlib.ticker:87 of
msgid "Use string `format` method."
msgstr "Utiliza el método de cadena `format`."

#: matplotlib.ticker:88 of
msgid "`FormatStrFormatter`"
msgstr "`FormatStrFormatter`"

#: matplotlib.ticker:88 of
msgid "Use an old-style sprintf format string."
msgstr "Utilizar una cadena de formato sprintf de estilo antiguo."

#: matplotlib.ticker:89 of
msgid "`ScalarFormatter`"
msgstr "`ScalarFormatter`"

#: matplotlib.ticker:89 of
msgid "Default formatter for scalars: autopick the format string."
msgstr "Formateador por defecto para escalares: autoescoge la cadena de formato."

#: matplotlib.ticker:91 of
msgid "`LogFormatter`"
msgstr "`LogFormatter`"

#: matplotlib.ticker:91 of
msgid "Formatter for log axes."
msgstr "Formateador para los ejes de registro."

#: matplotlib.ticker:92 of
msgid "`LogFormatterExponent`"
msgstr "`LogFormatterExponent`"

#: matplotlib.ticker:92 matplotlib.ticker.LogFormatterExponent:2
#: matplotlib.ticker.LogFormatterMathtext:2 of
msgid "Format values for log axis using ``exponent = log_base(value)``."
msgstr "Formatea los valores para el eje log usando ``exponente = log_base(valor)``."

#: matplotlib.ticker:94 of
msgid "`LogFormatterMathtext`"
msgstr "`LogFormatterMathtext`"

#: matplotlib.ticker:94 of
msgid "Format values for log axis using ``exponent = log_base(value)`` using Math text."
msgstr "Formatear los valores para el eje logarítmico usando ``exponente = log_base(valor)`` usando Math text."

#: matplotlib.ticker:96 of
msgid "`LogFormatterSciNotation`"
msgstr "`LogFormatterSciNotation`"

#: matplotlib.ticker:96 of
msgid "Format values for log axis using scientific notation."
msgstr "Formatear los valores para el eje logarítmico utilizando la notación científica."

#: matplotlib.ticker:97 of
msgid "`LogitFormatter`"
msgstr "`LogitFormatter`"

#: matplotlib.ticker:97 of
msgid "Probability formatter."
msgstr "Formateador de probabilidad."

#: matplotlib.ticker:98 of
msgid "`EngFormatter`"
msgstr "`EngFormatter`"

#: matplotlib.ticker:98 of
msgid "Format labels in engineering notation."
msgstr "Formatear las etiquetas en notación de ingeniería."

#: matplotlib.ticker:99 of
msgid "`PercentFormatter`"
msgstr "`PercentFormatter`"

#: matplotlib.ticker:99 of
msgid "Format labels as a percentage."
msgstr "Formatear las etiquetas como un porcentaje."

#: matplotlib.ticker:102 of
msgid "You can derive your own formatter from the Formatter base class by simply overriding the ``__call__`` method. The formatter class has access to the axis view and data limits."
msgstr "Puedes derivar tu propio formateador de la clase base Formatter simplemente anulando el método ``__call__``. La clase formatter tiene acceso a la vista de los ejes y a los límites de los datos."

#: matplotlib.ticker:106 of
msgid "To control the major and minor tick label formats, use one of the following methods::"
msgstr "Para controlar los formatos de las etiquetas de los marcadores mayores y menores, utilice uno de los siguientes métodos::"

#: matplotlib.ticker:114 of
msgid "In addition to a `.Formatter` instance, `~.Axis.set_major_formatter` and `~.Axis.set_minor_formatter` also accept a ``str`` or function.  ``str`` input will be internally replaced with an autogenerated `.StrMethodFormatter` with the input ``str``. For function input, a `.FuncFormatter` with the input function will be generated and used."
msgstr "Además de una instancia `.Formatter`, `~.Axis.set_major_formatter` y `~.Axis.set_minor_formatter` también aceptan una ``str`` o función.  La entrada ``str`` será reemplazada internamente por un `.StrMethodFormatter` autogenerado con la entrada ``str``. Para la entrada de funciones, se generará y utilizará un `.FuncFormatter` con la función de entrada."

#: matplotlib.ticker:120 of
msgid "See :doc:`/gallery/ticks/major_minor_demo` for an example of setting major and minor ticks. See the :mod:`matplotlib.dates` module for more information and examples of using date locators and formatters."
msgstr "Ver :doc:`/gallery/ticks/major_minor_demo` para un ejemplo de configuración de marcadores mayores y menores. Consulta el módulo :mod:`matplotlib.dates` para obtener más información y ejemplos de uso de localizadores y formateadores de fechas."

#: matplotlib.ticker.AutoLocator:1 matplotlib.ticker.LogitLocator:1 of
msgid "Bases: :py:class:`matplotlib.ticker.MaxNLocator`"
msgstr "Bases: :py:class:`matplotlib.ticker.MaxNLocator`"

#: matplotlib.ticker.AutoLocator:2 of
msgid "Dynamically find major tick positions. This is actually a subclass of `~matplotlib.ticker.MaxNLocator`, with parameters *nbins = 'auto'* and *steps = [1, 2, 2.5, 5, 10]*."
msgstr "Encuentra dinámicamente las principales posiciones de los marcadores. En realidad es una subclase de `~matplotlib.ticker.MaxNLocator`, con los parámetros *nbins = 'auto'* y *steps = [1, 2, 2.5, 5, 10]*."

#: matplotlib.ticker.AutoLocator:25 of
msgid "To know the values of the non-public parameters, please have a look to the defaults of `~matplotlib.ticker.MaxNLocator`."
msgstr "Para conocer los valores de los parámetros no públicos, por favor, echa un vistazo a los valores por defecto de `~matplotlib.ticker.MaxNLocator`."

#: matplotlib.ticker.AutoMinorLocator:1 matplotlib.ticker.FixedLocator:1
#: matplotlib.ticker.IndexLocator:1 matplotlib.ticker.LinearLocator:1
#: matplotlib.ticker.LogLocator:1 matplotlib.ticker.MaxNLocator:1
#: matplotlib.ticker.MultipleLocator:1 matplotlib.ticker.NullLocator:1
#: matplotlib.ticker.SymmetricalLogLocator:1 of
msgid "Bases: :py:class:`matplotlib.ticker.Locator`"
msgstr "Bases: :py:class:`matplotlib.ticker.Locator`"

#: matplotlib.ticker.AutoMinorLocator:2 of
msgid "Dynamically find minor tick positions based on the positions of major ticks. The scale must be linear with major ticks evenly spaced."
msgstr "Encuentra dinámicamente las posiciones de los marcadores menores basándose en las posiciones de los marcadores mayores. La escala debe ser lineal con los marcadores mayores espaciados uniformemente."

#: matplotlib.ticker.AutoMinorLocator:24 of
msgid "*n* is the number of subdivisions of the interval between major ticks; e.g., n=2 will place a single minor tick midway between major ticks."
msgstr "*n* es el número de subdivisiones del intervalo entre los marcadores mayores; por ejemplo, n=2 colocará un único marcador menor a medio camino entre los marcadores mayores."

#: matplotlib.ticker.AutoMinorLocator:28 of
msgid "If *n* is omitted or None, it will be set to 5 or 4."
msgstr "Si *n* se omite o es None, se establecerá en 5 o 4."

#: matplotlib.ticker.AutoMinorLocator.tick_values:2
#: matplotlib.ticker.IndexLocator.tick_values:2
#: matplotlib.ticker.LinearLocator.tick_values:2
#: matplotlib.ticker.Locator.tick_values:2
#: matplotlib.ticker.LogLocator.tick_values:2
#: matplotlib.ticker.LogitLocator.tick_values:2
#: matplotlib.ticker.MaxNLocator.tick_values:2
#: matplotlib.ticker.MultipleLocator.tick_values:2
#: matplotlib.ticker.SymmetricalLogLocator.tick_values:2 of
msgid "Return the values of the located ticks given **vmin** and **vmax**."
msgstr "Devuelve los valores de los marcadores localizados dados **vmin** y **vmax**."

#: matplotlib.ticker.AutoMinorLocator.tick_values:5
#: matplotlib.ticker.IndexLocator.tick_values:5
#: matplotlib.ticker.LinearLocator.tick_values:5
#: matplotlib.ticker.Locator.tick_values:5
#: matplotlib.ticker.LogLocator.tick_values:5
#: matplotlib.ticker.LogitLocator.tick_values:5
#: matplotlib.ticker.MaxNLocator.tick_values:5
#: matplotlib.ticker.MultipleLocator.tick_values:5
#: matplotlib.ticker.SymmetricalLogLocator.tick_values:5 of
msgid "To get tick locations with the vmin and vmax values defined automatically for the associated :attr:`axis` simply call the Locator instance::"
msgstr "Para obtener las ubicaciones de los marcadores con los valores vmin y vmax definidos automáticamente para el :attr:`eje` asociado, simplemente llame a la instancia Locator::"

#: matplotlib.ticker.EngFormatter:1 matplotlib.ticker.FixedFormatter:1
#: matplotlib.ticker.FormatStrFormatter:1 matplotlib.ticker.FuncFormatter:1
#: matplotlib.ticker.LogFormatter:1 matplotlib.ticker.LogitFormatter:1
#: matplotlib.ticker.NullFormatter:1 matplotlib.ticker.PercentFormatter:1
#: matplotlib.ticker.ScalarFormatter:1 matplotlib.ticker.StrMethodFormatter:1
#: of
msgid "Bases: :py:class:`matplotlib.ticker.Formatter`"
msgstr "Bases: :py:class:`matplotlib.ticker.Formatter`"

#: matplotlib.ticker.EngFormatter:2 of
msgid "Format axis values using engineering prefixes to represent powers of 1000, plus a specified unit, e.g., 10 MHz instead of 1e7."
msgstr "Formatea los valores del eje utilizando prefijos de ingeniería para representar potencias de 1000, más una unidad especificada, por ejemplo, 10 MHz en lugar de 1e7."

#: matplotlib.ticker.EngFormatter matplotlib.ticker.LogFormatter
#: matplotlib.ticker.LogFormatter.label_minor matplotlib.ticker.LogLocator
#: matplotlib.ticker.LogitFormatter
#: matplotlib.ticker.LogitFormatter.set_minor_number
#: matplotlib.ticker.LogitFormatter.set_minor_threshold
#: matplotlib.ticker.LogitFormatter.use_overline matplotlib.ticker.LogitLocator
#: matplotlib.ticker.MaxNLocator matplotlib.ticker.MaxNLocator.set_params
#: matplotlib.ticker.PercentFormatter matplotlib.ticker.ScalarFormatter
#: matplotlib.ticker.ScalarFormatter.set_powerlimits
#: matplotlib.ticker.ScalarFormatter.set_useLocale
#: matplotlib.ticker.ScalarFormatter.set_useMathText
#: matplotlib.ticker.ScalarFormatter.set_useOffset
#: matplotlib.ticker.SymmetricalLogLocator of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.ticker.EngFormatter:31 of
msgid "**unit**"
msgstr "**unit**"

#: of
msgid "str, default: \"\""
msgstr "str, default: \"\""

#: matplotlib.ticker.EngFormatter:30 of
msgid "Unit symbol to use, suitable for use with single-letter representations of powers of 1000. For example, 'Hz' or 'm'."
msgstr "Símbolo de la unidad a utilizar, adecuado para usar con representaciones de una sola letra de potencias de 1000. Por ejemplo, 'Hz' o 'm'."

#: matplotlib.ticker.EngFormatter:39 of
msgid "**places**"
msgstr "**places**"

#: of
msgid "int, default: None"
msgstr "int, default: None"

#: matplotlib.ticker.EngFormatter:34 of
#, python-format
msgid "Precision with which to display the number, specified in digits after the decimal point (there will be between one and three digits before the decimal point). If it is None, the formatting falls back to the floating point format '%g', which displays up to 6 *significant* digits, i.e. the equivalent value for *places* varies between 0 and 5 (inclusive)."
msgstr "Precisión con la que se muestra el número, especificada en dígitos después del punto decimal (habrá entre uno y tres dígitos antes del punto decimal). Si es None, el formato vuelve al formato de punto flotante '%g', que muestra hasta 6 dígitos *significativos*, es decir, el valor equivalente para *lugares* varía entre 0 y 5 (inclusive)."

#: matplotlib.ticker.EngFormatter:50 of
msgid "**sep**"
msgstr "**sep**"

#: of
msgid "str, default: \" \""
msgstr "str, default: \" \""

#: matplotlib.ticker.EngFormatter:42 of
msgid "Separator used between the value and the prefix/unit. For example, one get '3.14 mV' if ``sep`` is \" \" (default) and '3.14mV' if ``sep`` is \"\". Besides the default behavior, some other useful options may be:"
msgstr "Separador utilizado entre el valor y el prefijo/unidad. Por ejemplo, se obtiene '3.14 mV' si ``sep`` es \" \" (por defecto) y '3.14mV' si ``sep`` es \"\". Además del comportamiento por defecto, algunas otras opciones útiles pueden ser:"

#: matplotlib.ticker.EngFormatter:47 of
msgid "``sep=\"\"`` to append directly the prefix/unit to the value;"
msgstr "``sep=\"\"`` para añadir directamente el prefijo/unidad al valor;"

#: matplotlib.ticker.EngFormatter:48 of
msgid "``sep=\"\\N{THIN SPACE}\"`` (``U+2009``);"
msgstr "``sep=\"\\N{THIN SPACE}\"`` (``U+2009``);"

#: matplotlib.ticker.EngFormatter:49 of
msgid "``sep=\"\\N{NARROW NO-BREAK SPACE}\"`` (``U+202F``);"
msgstr "``sep=\"\\N{NARROW NO-BREAK SPACE}\"`` (``U+202F``);"

#: matplotlib.ticker.EngFormatter:50 of
msgid "``sep=\"\\N{NO-BREAK SPACE}\"`` (``U+00A0``)."
msgstr "``sep=\"\\N{NO-BREAK SPACE}\"`` (``U+00A0``)."

#: matplotlib.ticker.EngFormatter:54 of
msgid "**usetex** : bool, default: :rc:`text.usetex`"
msgstr "**usetex** : bool, por defecto: :rc:`text.usetex`"

#: of
msgid "bool, default:"
msgstr "bool, default:"

#: matplotlib.ticker.EngFormatter:53 of
msgid "To enable/disable the use of TeX's math mode for rendering the numbers in the formatter."
msgstr "Para activar/desactivar el uso del modo matemático de TeX para renderizar los números en el formateador."

#: matplotlib.ticker.EngFormatter:71 matplotlib.ticker.ScalarFormatter:11 of
msgid "**useMathText** : bool, default: :rc:`axes.formatter.use_mathtext`"
msgstr "**useMathText** : bool, por defecto: :rc:`axes.formatter.use_mathtext`"

#: matplotlib.ticker.EngFormatter:57 of
msgid "To enable/disable the use mathtext for rendering the numbers in the formatter."
msgstr "Para activar/desactivar el uso de mathtext para renderizar los números en el formateador."

#: matplotlib.ticker.EngFormatter.format_eng:2 of
msgid "Format a number in engineering notation, appending a letter representing the power of 1000 of the original number. Some examples:"
msgstr "Formatea un número en notación de ingeniería, añadiendo una letra que representa la potencia de 1000 del número original. Algunos ejemplos:"

#: matplotlib.ticker.FixedFormatter:2 of
msgid "Return fixed strings for tick labels based only on position, not value."
msgstr "Devuelve cadenas fijas para las etiquetas de los marcadores basadas sólo en la posición, no en el valor."

#: matplotlib.ticker.FixedFormatter:5 of
msgid "`.FixedFormatter` should only be used together with `.FixedLocator`. Otherwise, the labels may end up in unexpected positions."
msgstr "`.FixedFormatter` sólo debe utilizarse junto con `.FixedLocator`. De lo contrario, las etiquetas pueden terminar en posiciones inesperadas."

#: matplotlib.ticker.FixedFormatter:26 of
msgid "Set the sequence *seq* of strings that will be used for labels."
msgstr "Establecer la secuencia *seq* de cadenas que se utilizarán para las etiquetas."

#: matplotlib.ticker.FixedLocator:2 of
msgid "Tick locations are fixed.  If nbins is not None, the array of possible positions will be subsampled to keep the number of ticks <= nbins +1. The subsampling will be done so as to include the smallest absolute value; for example, if zero is included in the array of possibilities, then it is guaranteed to be one of the chosen ticks."
msgstr "Se arreglan las ubicaciones de los marcadores.  Si nbins no es None, el arreglo de posibles posiciones será submuestreado para mantener el número de marcadores <= nbins +1. El submuestreo se hará de forma que se incluya el valor absoluto más pequeño; por ejemplo, si se incluye el cero en el arreglo de posibilidades, se garantiza que sea uno de los marcadores elegidos."

#: matplotlib.ticker.FixedLocator.set_params:2
#: matplotlib.ticker.LinearLocator.set_params:2
#: matplotlib.ticker.LogLocator.set_params:2
#: matplotlib.ticker.LogitLocator.set_params:2
#: matplotlib.ticker.MultipleLocator.set_params:2
#: matplotlib.ticker.SymmetricalLogLocator.set_params:2 of
msgid "Set parameters within this locator."
msgstr "Establece los parámetros dentro de este localizador."

#: matplotlib.ticker.FixedLocator.tick_values:2
#: matplotlib.ticker.NullLocator.tick_values:2 of
msgid "Return the locations of the ticks."
msgstr "Devuelve las ubicaciones de los marcadores."

#: matplotlib.ticker.FixedLocator.tick_values:6 of
msgid "Because the values are fixed, vmin and vmax are not used in this method."
msgstr "Como los valores están arreglados, vmin y vmax no se usan en este método."

#: matplotlib.ticker.FormatStrFormatter:2 of
msgid "Use an old-style ('%' operator) format string to format the tick."
msgstr "Utiliza una cadena de formato de estilo antiguo (operador '%') para formatear el marcador."

#: matplotlib.ticker.FormatStrFormatter:4 of
msgid "The format string should have a single variable format (%) in it. It will be applied to the value (not the position) of the tick."
msgstr "La cadena de formato debe tener una sola variable de formato (%) en ella. Se aplicará al valor (no a la posición) del marcador."

#: matplotlib.ticker.FormatStrFormatter:7 of
#, python-format
msgid "Negative numeric values will use a dash not a unicode minus, use mathtext to get a unicode minus by wrappping the format specifier with $ (e.g. \"$%g$\")."
msgstr "Los valores numéricos negativos utilizarán un guión y no un signo de menos unicode, utilice mathtext para obtener un signo de menos unicode envolviendo el especificador de formato con $ (por ejemplo, \"$%g$\")."

#: matplotlib.ticker.Formatter:1 matplotlib.ticker.Locator:1 of
msgid "Bases: :py:class:`matplotlib.ticker.TickHelper`"
msgstr "Bases: :py:class:`matplotlib.ticker.TickHelper`"

#: matplotlib.ticker.Formatter:2 of
msgid "Create a string based on a tick value and location."
msgstr "Crea una cadena basada en un valor de marcador y una ubicación."

#: matplotlib.ticker.Formatter.fix_minus:2 of
msgid "Some classes may want to replace a hyphen for minus with the proper unicode symbol (U+2212) for typographical correctness.  This is a helper method to perform such a replacement when it is enabled via :rc:`axes.unicode_minus`."
msgstr "Algunas clases pueden querer reemplazar un guión por menos con el símbolo unicode apropiado (U+2212) para la corrección tipográfica.  Este es un método de ayuda para realizar dicho reemplazo cuando se habilita a través de :rc:`axes.unicode_minus`."

#: matplotlib.ticker.Formatter.format_data:2
#: matplotlib.ticker.LogFormatter.format_data:2
#: matplotlib.ticker.ScalarFormatter.format_data:2 of
msgid "Return the full string representation of the value with the position unspecified."
msgstr "Devuelve la representación de cadena completa del valor con la posición sin especificar."

#: matplotlib.ticker.Formatter.format_data_short:2
#: matplotlib.ticker.LogFormatter.format_data_short:2
#: matplotlib.ticker.LogitFormatter.format_data_short:2
#: matplotlib.ticker.ScalarFormatter.format_data_short:2 of
msgid "Return a short string version of the tick value."
msgstr "Devuelve una versión de cadena corta del valor del marcador."

#: matplotlib.ticker.Formatter.format_data_short:4
#: matplotlib.ticker.LogFormatter.format_data_short:4
#: matplotlib.ticker.LogitFormatter.format_data_short:4
#: matplotlib.ticker.ScalarFormatter.format_data_short:4 of
msgid "Defaults to the position-independent long value."
msgstr "Por defecto, el valor largo independiente de la posición."

#: matplotlib.ticker.Formatter.format_ticks:2 of
msgid "Return the tick labels for all the ticks at once."
msgstr "Devuelve las etiquetas de los marcadores de todos los ticks a la vez."

#: matplotlib.ticker.Formatter.set_locs:2
#: matplotlib.ticker.LogitFormatter.set_locs:2
#: matplotlib.ticker.ScalarFormatter.set_locs:2 of
msgid "Set the locations of the ticks."
msgstr "Establecer las ubicaciones de los marcadores."

#: matplotlib.ticker.Formatter.set_locs:4
#: matplotlib.ticker.LogitFormatter.set_locs:4
#: matplotlib.ticker.ScalarFormatter.set_locs:4 of
msgid "This method is called before computing the tick labels because some formatters need to know all tick locations to do so."
msgstr "Este método se llama antes de calcular las etiquetas de los marcadores porque algunos formateadores necesitan conocer todas las ubicaciones de los marcadores para hacerlo."

#: matplotlib.ticker.FuncFormatter:2 of
msgid "Use a user-defined function for formatting."
msgstr "Utilizar una función definida por el usuario para el formateo."

#: matplotlib.ticker.FuncFormatter:4 of
msgid "The function should take in two inputs (a tick value ``x`` and a position ``pos``), and return a string containing the corresponding tick label."
msgstr "La función debe tomar dos entradas (un valor de marcador ``x`` y una posición ``pos``), y devolver una cadena que contenga la etiqueta de marcador correspondiente."

#: matplotlib.ticker.IndexLocator:2 of
msgid "Place a tick on every multiple of some base number of points plotted, e.g., on every 5th point.  It is assumed that you are doing index plotting; i.e., the axis is 0, len(data).  This is mainly useful for x ticks."
msgstr "Coloca un marcador en cada múltiplo de algún número base de puntos trazados, por ejemplo, en cada quinto punto.  Se asume que está haciendo un trazado de índice; es decir, el eje es 0, len(data).  Esto es útil principalmente para los marcadores de x."

#: matplotlib.ticker.IndexLocator:26 of
msgid "Place ticks every *base* data point, starting at *offset*."
msgstr "Coloca los marcadores cada punto de datos *básico*, comenzando en el *desplazamiento*."

#: matplotlib.ticker.IndexLocator.set_params:2 of
msgid "Set parameters within this locator"
msgstr "Establece los parámetros dentro de este localizador"

#: matplotlib.ticker.LinearLocator:2 of
msgid "Determine the tick locations"
msgstr "Determinar las ubicaciones de los marcadores"

#: matplotlib.ticker.LinearLocator:4 of
msgid "The first time this function is called it will try to set the number of ticks to make a nice tick partitioning.  Thereafter the number of ticks will be fixed so that interactive navigation will be nice"
msgstr "La primera vez que se llame a esta función se intentará establecer el número de marcadores para hacer una buena partición de los mismos.  A partir de entonces se arreglará el número de marcadores para que la navegación interactiva sea agradable"

#: matplotlib.ticker.LinearLocator:27 of
msgid "Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs"
msgstr "Utiliza preajustes para establecer locs basados en lom.  Un mapeo dict vmin, vmax->locs"

#: matplotlib.ticker.LinearLocator.view_limits:2
#: matplotlib.ticker.LogLocator.view_limits:2
#: matplotlib.ticker.SymmetricalLogLocator.view_limits:2 of
msgid "Try to choose the view limits intelligently."
msgstr "Intenta elegir los límites de la vista de forma inteligente."

#: matplotlib.ticker.Locator:2 of
msgid "Determine the tick locations;"
msgstr "Determinar las ubicaciones de los marcadores;"

#: matplotlib.ticker.Locator:4 of
msgid "Note that the same locator should not be used across multiple `~matplotlib.axis.Axis` because the locator stores references to the Axis data and view limits."
msgstr "Ten en cuenta que el mismo localizador no debe ser utilizado a través de múltiples `~matplotlib.axis.Axis` porque el localizador almacena referencias a los datos del Eje y los límites de la vista."

#: matplotlib.ticker.Locator.nonsingular:2
#: matplotlib.ticker.LogLocator.nonsingular:2
#: matplotlib.ticker.LogitLocator.nonsingular:2 of
msgid "Adjust a range as needed to avoid singularities."
msgstr "Ajustar un rango según sea necesario para evitar singularidades."

#: matplotlib.ticker.Locator.nonsingular:4
#: matplotlib.ticker.LogLocator.nonsingular:4
#: matplotlib.ticker.LogitLocator.nonsingular:4 of
msgid "This method gets called during autoscaling, with ``(v0, v1)`` set to the data limits on the axes if the axes contains any data, or ``(-inf, +inf)`` if not."
msgstr "Este método se llama durante el autoescalado, con ``(v0, v1)`` establecido a los límites de los datos en los ejes si los ejes contienen algún dato, o ``(-inf, +inf)`` si no."

#: matplotlib.ticker.Locator.nonsingular:8
#: matplotlib.ticker.LogLocator.nonsingular:8
#: matplotlib.ticker.LogitLocator.nonsingular:8 of
msgid "If ``v0 == v1`` (possibly up to some floating point slop), this method returns an expanded interval around this value."
msgstr "Si ``v0 == v1`` (posiblemente hasta cierto desnivel de punto flotante), este método devuelve un intervalo expandido alrededor de este valor."

#: matplotlib.ticker.Locator.nonsingular:10
#: matplotlib.ticker.LogLocator.nonsingular:10
#: matplotlib.ticker.LogitLocator.nonsingular:10 of
msgid "If ``(v0, v1) == (-inf, +inf)``, this method returns appropriate default view limits."
msgstr "Si ``(v0, v1) == (-inf, +inf)``, este método devuelve los límites de vista por defecto adecuados."

#: matplotlib.ticker.Locator.nonsingular:12
#: matplotlib.ticker.LogLocator.nonsingular:12
#: matplotlib.ticker.LogitLocator.nonsingular:12 of
msgid "Otherwise, ``(v0, v1)`` is returned without modification."
msgstr "En caso contrario, se devuelve ``(v0, v1)`` sin modificar."

#: matplotlib.ticker.Locator.raise_if_exceeds:2 of
msgid "Log at WARNING level if *locs* is longer than `Locator.MAXTICKS`."
msgstr "Log en nivel WARNING si *locs* es más largo que `Locator.MAXTICKS`."

#: matplotlib.ticker.Locator.raise_if_exceeds:4 of
msgid "This is intended to be called immediately before returning *locs* from ``__call__`` to inform users in case their Locator returns a huge number of ticks, causing Matplotlib to run out of memory."
msgstr "Esto está pensado para ser llamado inmediatamente antes de devolver *locs* de ``call__`` para informar a los usuarios en caso de que su Locator devuelva un gran número de marcadores, haciendo que Matplotlib se quede sin memoria."

#: matplotlib.ticker.Locator.raise_if_exceeds:8 of
msgid "The \"strange\" name of this method dates back to when it would raise an exception instead of emitting a log."
msgstr "El \"extraño\" nombre de este método se remonta a cuando lanzaba una excepción en lugar de emitir un registro."

#: matplotlib.ticker.Locator.set_params:2 of
msgid "Do nothing, and raise a warning. Any locator class not supporting the set_params() function will call this."
msgstr "No hacer nada, y levantar una advertencia. Cualquier clase de localizador que no soporte la función set_params() llamará a esto."

#: matplotlib.ticker.Locator.view_limits:2
#: matplotlib.ticker.MaxNLocator.view_limits:2 of
msgid "Select a scale for the range from vmin to vmax."
msgstr "Selecciona una escala para el rango de vmin a vmax."

#: matplotlib.ticker.Locator.view_limits:4
#: matplotlib.ticker.MaxNLocator.view_limits:4 of
msgid "Subclasses should override this method to change locator behaviour."
msgstr "Las subclases deben anular este método para cambiar el comportamiento del localizador."

#: matplotlib.ticker.LogFormatter:2 of
msgid "Base class for formatting ticks on a log or symlog scale."
msgstr "Clase base para formatear los marcadores en una escala log o symlog."

#: matplotlib.ticker.LogFormatter:4 of
msgid "It may be instantiated directly, or subclassed."
msgstr "Puede ser instanciado directamente, o subclasificado."

#: matplotlib.ticker.LogFormatter:9 matplotlib.ticker.LogLocator:29 of
msgid "**base**"
msgstr "**base**"

#: of
msgid "float, default: 10."
msgstr "float, por defecto: 10."

#: matplotlib.ticker.LogFormatter:9 of
msgid "Base of the logarithm used in all calculations."
msgstr "Base del logaritmo utilizado en todos los cálculos."

#: matplotlib.ticker.LogFormatter:14
#: matplotlib.ticker.LogFormatter.label_minor:21 of
msgid "**labelOnlyBase**"
msgstr "**labelOnlyBase**"

#: of
msgid "bool, default: False"
msgstr "bool, por defecto: False"

#: matplotlib.ticker.LogFormatter:12 of
msgid "If True, label ticks only at integer powers of base. This is normally True for major ticks and False for minor ticks."
msgstr "Si es True, etiqueta los marcadores sólo en potencias enteras de la base. Normalmente es True para los marcadores mayores y False para los menores."

#: matplotlib.ticker.LogFormatter:26 of
msgid "**minor_thresholds**"
msgstr "**minor_thresholds**"

#: of
msgid "(subset, all), default: (1, 0.4)"
msgstr "(subset, all), por defecto: (1, 0.4)"

#: matplotlib.ticker.LogFormatter:17 of
msgid "If labelOnlyBase is False, these two numbers control the labeling of ticks that are not at integer powers of base; normally these are the minor ticks. The controlling parameter is the log of the axis data range.  In the typical case where base is 10 it is the number of decades spanned by the axis, so we can call it 'numdec'. If ``numdec <= all``, all minor ticks will be labeled.  If ``all < numdec <= subset``, then only a subset of minor ticks will be labeled, so as to avoid crowding. If ``numdec > subset`` then no minor ticks will be labeled."
msgstr "Si labelOnlyBase es False, estos dos números controlan el etiquetado de los marcadores que no están a potencias enteras de la base; normalmente son los marcadores menores. El parámetro de control es el logaritmo del rango de datos del eje.  En el caso típico en el que la base es 10, es el número de décadas que abarca el eje, por lo que podemos llamarlo ``numdec''. Si ``numdec <= all``, se etiquetarán todos los marcadores menores.  Si ``todos < numdec <= subconjunto``, sólo se etiquetará un subconjunto de los marcadores menores, para evitar la aglomeración. Si ``numdec > subset``, entonces no se etiquetará ningún marcador menor."

#: matplotlib.ticker.LogFormatter:38 of
msgid "**linthresh**"
msgstr "**linthresh**"

#: of
msgid "None or float, default: None"
msgstr "Ninguno o float, por defecto: None"

#: matplotlib.ticker.LogFormatter:29 of
msgid "If a symmetric log scale is in use, its ``linthresh`` parameter must be supplied here."
msgstr "Si se utiliza una escala logarítmica simétrica, su parámetro ``linthresh`` debe ser suministrado aquí."

#: matplotlib.ticker.LogFormatter:41 matplotlib.ticker.ScalarFormatter:26
#: matplotlib.ticker.SymmetricalLogLocator:50
#: matplotlib.ticker.TickHelper.set_bounds:15
#: matplotlib.ticker.TickHelper.set_data_interval:15
#: matplotlib.ticker.TickHelper.set_view_interval:15 of
msgid "Notes"
msgstr "Notas"

#: matplotlib.ticker.LogFormatter:42 of
msgid "The `set_locs` method must be called to enable the subsetting logic controlled by the ``minor_thresholds`` parameter."
msgstr "El método `set_locs` debe ser llamado para habilitar la lógica de subconjunto controlada por el parámetro ``minor_thresholds``."

#: matplotlib.ticker.LogFormatter:45 of
msgid "In some cases such as the colorbar, there is no distinction between major and minor ticks; the tick locations might be set manually, or by a locator that puts ticks at integer powers of base and at intermediate locations.  For this situation, disable the minor_thresholds logic by using ``minor_thresholds=(np.inf, np.inf)``, so that all ticks will be labeled."
msgstr "En algunos casos, como la barra de colores, no hay distinción entre los marcadores mayores y menores; las ubicaciones de los marcadores podrían establecerse manualmente, o mediante un localizador que pone los marcadores en potencias enteras de la base y en ubicaciones intermedias.  Para esta situación, desactive la lógica de minor_thresholds usando ``minor_thresholds=(np.inf, np.inf)``, para que todos los marcadores sean etiquetados."

#: matplotlib.ticker.LogFormatter:52 of
msgid "To disable labeling of minor ticks when 'labelOnlyBase' is False, use ``minor_thresholds=(0, 0)``.  This is the default for the \"classic\" style."
msgstr "Para desactivar el etiquetado de los marcadores menores cuando 'labelOnlyBase' es False, utilice ``minor_thresholds=(0, 0)``.  Este es el valor por defecto para el estilo \"clásico\"."

#: matplotlib.ticker.LogFormatter:58
#: matplotlib.ticker.ScalarFormatter.set_useOffset:29 of
msgid "Examples"
msgstr "Ejemplos"

#: matplotlib.ticker.LogFormatter:59 of
msgid "To label a subset of minor ticks when the view limits span up to 2 decades, and all of the ticks when zoomed in to 0.5 decades or less, use ``minor_thresholds=(2, 0.5)``."
msgstr "Para etiquetar un subconjunto de marcadores menores cuando los límites de la vista abarcan hasta 2 décadas, y todos los marcadores cuando se amplía a 0,5 décadas o menos, utilice ``minor_thresholds=(2, 0,5)``."

#: matplotlib.ticker.LogFormatter:63 of
msgid "To label all minor ticks when the view limits span up to 1.5 decades, use ``minor_thresholds=(1.5, 1.5)``."
msgstr "Para etiquetar todos los marcadores menores cuando los límites de la vista abarcan hasta 1,5 décadas, utilice ``minor_thresholds=(1,5, 1,5)``."

#: matplotlib.ticker.LogFormatter.base:2 of
msgid "Change the *base* for labeling."
msgstr "Cambiar la *base* para el etiquetado."

#: matplotlib.ticker.LogFormatter.base:5 of
msgid "Should always match the base used for :class:`LogLocator`"
msgstr "Debería coincidir siempre con la base utilizada para :class:`LogLocator`"

#: matplotlib.ticker.LogFormatter.label_minor:2 of
msgid "Switch minor tick labeling on or off."
msgstr "Activar o desactivar el etiquetado de los marcadores menores."

#: of
msgid "bool"
msgstr "bool"

#: matplotlib.ticker.LogFormatter.label_minor:8 of
msgid "If True, label ticks only at integer powers of base."
msgstr "Si es True, la etiqueta marca sólo en potencias enteras de la base."

#: matplotlib.ticker.LogFormatter.set_locs:2 of
msgid "Use axis view limits to control which ticks are labeled."
msgstr "Utilizar los límites de la vista del eje para controlar qué marcadores se etiquetan."

#: matplotlib.ticker.LogFormatter.set_locs:4 of
msgid "The *locs* parameter is ignored in the present algorithm."
msgstr "El parámetro *locs* se ignora en el presente algoritmo."

#: matplotlib.ticker.LogFormatterExponent:1
#: matplotlib.ticker.LogFormatterMathtext:1 of
msgid "Bases: :py:class:`matplotlib.ticker.LogFormatter`"
msgstr "Bases: :py:class:`matplotlib.ticker.LogFormatter`"

#: matplotlib.ticker.LogFormatterSciNotation:1 of
msgid "Bases: :py:class:`matplotlib.ticker.LogFormatterMathtext`"
msgstr "Bases: :py:class:`matplotlib.ticker.LogFormatterMathtext`"

#: matplotlib.ticker.LogFormatterSciNotation:2 of
msgid "Format values following scientific notation in a logarithmic axis."
msgstr "Formatea los valores siguiendo la notación científica en un eje logarítmico."

#: matplotlib.ticker.LogLocator:2 of
msgid "Determine the tick locations for log axes"
msgstr "Determinar las ubicaciones de los marcadores para los ejes de registro"

#: matplotlib.ticker.LogLocator:23 of
msgid "Place ticks on the locations : subs[j] * base**i"
msgstr "Colocar los marcadores en las ubicaciones : subs[j] * base**i"

#: of
msgid "float, default: 10.0"
msgstr "float, default: 10.0"

#: matplotlib.ticker.LogLocator:29 of
msgid "The base of the log used, so ticks are placed at ``base**n``."
msgstr "La base del registro utilizado, por lo que los marcadores se colocan en ``base**n``."

#: matplotlib.ticker.LogLocator:41 matplotlib.ticker.SymmetricalLogLocator:47
#: of
msgid "**subs**"
msgstr "**subs**"

#: of
msgid "None or str or sequence of float, default: (1.0,)"
msgstr "Ninguno o str o secuencia de float, por defecto: (1.0,)"

#: matplotlib.ticker.LogLocator:32 of
msgid "Gives the multiples of integer powers of the base at which to place ticks.  The default places ticks only at integer powers of the base. The permitted string values are ``'auto'`` and ``'all'``, both of which use an algorithm based on the axis view limits to determine whether and how to put ticks between integer powers of the base.  With ``'auto'``, ticks are placed only between integer powers; with ``'all'``, the integer powers are included.  A value of None is equivalent to ``'auto'``."
msgstr "Da los múltiplos de potencias enteras de la base en los que colocar los marcadores.  El valor por defecto coloca los marcadores sólo en potencias enteras de la base. Los valores de cadena permitidos son ``'auto'`` y ``'all'``, los cuales utilizan un algoritmo basado en los límites de la vista del eje para determinar si se colocan los marcadores entre potencias enteras de la base y cómo hacerlo.  Con ``'auto'``, los marcadores se colocan sólo entre potencias enteras; con ``'all'``, se incluyen las potencias enteras.  Un valor de None es equivalente a ``'auto'``."

#: matplotlib.ticker.LogLocator:60 of
msgid "**numticks**"
msgstr "**numticks**"

#: of
msgid "None or int, default: None"
msgstr "None o int, por defecto: None"

#: matplotlib.ticker.LogLocator:44 of
msgid "The maximum number of ticks to allow on a given axis. The default of ``None`` will try to choose intelligently as long as this Locator has already been assigned to an axis using `~.axis.Axis.get_tick_space`, but otherwise falls back to 9."
msgstr "El número máximo de marcadores a permitir en un eje dado. El valor por defecto de ``None`` intentará elegir de forma inteligente siempre y cuando este localizador ya haya sido asignado a un eje utilizando `~.axis.Axis.get_tick_space`, pero en caso contrario vuelve a 9."

#: matplotlib.ticker.LogLocator.base:2 of
msgid "Set the log base (major tick every ``base**i``, i integer)."
msgstr "Establecer la base del registro (mayor marcador cada ``base**i``, i entero)."

#: matplotlib.ticker.LogLocator.subs:2 of
msgid "Set the minor ticks for the log scaling every ``base**i*subs[j]``."
msgstr "Establecer los marcadores menores para el escalado del registro cada ``base**i*subs[j]``."

#: matplotlib.ticker.LogitFormatter:2 of
msgid "Probability formatter (using Math text)."
msgstr "Formateador de probabilidades (usando texto de Math)."

#: matplotlib.ticker.LogitFormatter:30
#: matplotlib.ticker.LogitFormatter.use_overline:22 of
msgid "**use_overline**"
msgstr "**use_overline**"

#: matplotlib.ticker.LogitFormatter:29
#: matplotlib.ticker.LogitFormatter.use_overline:8 of
msgid "If x > 1/2, with x = 1-v, indicate if x should be displayed as $\\overline{v}$. The default is to display $1-v$."
msgstr "Si x > 1/2, con x = 1-v, indica si x debe mostrarse como $\\overline{v}$. El valor por defecto es mostrar $1-v$."

#: matplotlib.ticker.LogitFormatter:33 of
msgid "**one_half** : str, default: r\"\\frac{1}{2}\""
msgstr "**one_half** : str, por defecto: r\"\\frac{1}{2}\""

#: of
msgid "str, default: r\"\\frac{1}{2}\""
msgstr "str, por defecto: r\"\\frac{1}{2}\""

#: matplotlib.ticker.LogitFormatter:33
#: matplotlib.ticker.LogitFormatter.set_one_half:5 of
msgid "The string used to represent 1/2."
msgstr "La cadena utilizada para representar 1/2."

#: matplotlib.ticker.LogitFormatter:39 matplotlib.ticker.LogitLocator:45 of
msgid "**minor**"
msgstr "**minor**"

#: matplotlib.ticker.LogitFormatter:36 of
msgid "Indicate if the formatter is formatting minor ticks or not. Basically minor ticks are not labelled, except when only few ticks are provided, ticks with most space with neighbor ticks are labelled. See other parameters to change the default behavior."
msgstr "Indica si el formateador está formateando los marcadores menores o no. Básicamente los marcadores menores no se etiquetan, excepto cuando se proporcionan pocos marcadores, se etiquetan los marcadores con más espacio con los marcadores vecinos. Vea otros parámetros para cambiar el comportamiento por defecto."

#: matplotlib.ticker.LogitFormatter:43
#: matplotlib.ticker.LogitFormatter.set_minor_threshold:22 of
msgid "**minor_threshold**"
msgstr "**minor_threshold**"

#: of
msgid "int, default: 25"
msgstr "int, default: 25"

#: matplotlib.ticker.LogitFormatter:42 of
msgid "Maximum number of locs for labelling some minor ticks. This parameter have no effect if minor is False."
msgstr "Número máximo de locs para etiquetar algunos marcadores menores. Este parámetro no tiene efecto si minor es False."

#: matplotlib.ticker.LogitFormatter:60
#: matplotlib.ticker.LogitFormatter.set_minor_number:23 of
msgid "**minor_number**"
msgstr "**minor_number**"

#: of
msgid "int, default: 6"
msgstr "int, por defecto: 6"

#: matplotlib.ticker.LogitFormatter:46
#: matplotlib.ticker.LogitFormatter.set_minor_number:9 of
msgid "Number of ticks which are labelled when the number of ticks is below the threshold."
msgstr "Número de marcadores que se etiquetan cuando el número de marcadores está por debajo del umbral."

#: matplotlib.ticker.LogitFormatter.set_minor_number:2 of
msgid "Set the number of minor ticks to label when some minor ticks are labelled."
msgstr "Establece el número de marcadores menores a etiquetar cuando se etiquetan algunos marcadores menores."

#: of
msgid "int"
msgstr "int"

#: matplotlib.ticker.LogitFormatter.set_minor_threshold:2 of
msgid "Set the threshold for labelling minors ticks."
msgstr "Establecer el umbral para etiquetar los marcadores menores."

#: matplotlib.ticker.LogitFormatter.set_minor_threshold:8 of
msgid "Maximum number of locations for labelling some minor ticks. This parameter have no effect if minor is False."
msgstr "Número máximo de ubicaciones para etiquetar algunos marcadores menores. Este parámetro no tiene efecto si minor es False."

#: matplotlib.ticker.LogitFormatter.set_one_half:2 of
msgid "Set the way one half is displayed."
msgstr "Establecer la forma en que se muestra una mitad."

#: matplotlib.ticker.LogitFormatter.set_one_half:19 of
msgid "one_half : str, default: r\"\\frac{1}{2}\""
msgstr "one_half : str, default: r\"\\frac{1}{2}\""

#: matplotlib.ticker.LogitFormatter.use_overline:2 of
msgid "Switch display mode with overline for labelling p>1/2."
msgstr "Cambiar el modo de visualización con sobrelínea para el etiquetado p>1/2."

#: matplotlib.ticker.LogitLocator:2 of
msgid "Determine the tick locations for logit axes"
msgstr "Determinar las ubicaciones de los marcadores para los ejes logit"

#: matplotlib.ticker.LogitLocator:23 of
msgid "Place ticks on the logit locations"
msgstr "Coloca los marcadores en las ubicaciones de logit"

#: matplotlib.ticker.LogitLocator:29 matplotlib.ticker.MaxNLocator:32
#: matplotlib.ticker.MaxNLocator.set_params:8 of
msgid "**nbins**"
msgstr "**nbins**"

#: of
msgid "int or 'auto', optional"
msgstr "int o 'auto', opcional"

#: matplotlib.ticker.LogitLocator:29 of
msgid "Number of ticks. Only used if minor is False."
msgstr "Número de marcadores. Sólo se utiliza si minor es False."

#: matplotlib.ticker.LogitLocator:32 of
msgid "Indicate if this locator is for minor ticks or not."
msgstr "Indicar si este localizador es para los marcadores menores o no."

#: matplotlib.ticker.MaxNLocator:2 of
msgid "Find nice tick locations with no more than N being within the view limits. Locations beyond the limits are added to support autoscaling."
msgstr "Encuentra buenas ubicaciones de los marcadores con no más de N estando dentro de los límites de la vista. Las ubicaciones más allá de los límites se añaden para soportar el autoescalado."

#: of
msgid "int or 'auto', default: 10"
msgstr "int o 'auto', por defecto: 10"

#: matplotlib.ticker.MaxNLocator:30 of
msgid "Maximum number of intervals; one less than max number of ticks.  If the string 'auto', the number of bins will be automatically determined based on the length of the axis."
msgstr "Número máximo de intervalos; uno menos que el número máximo de marcadores.  Si la cadena 'auto', el número de intervalos se determinará automáticamente en función de la longitud del eje."

#: matplotlib.ticker.MaxNLocator:40 matplotlib.ticker.MaxNLocator.set_params:11
#: of
msgid "**steps**"
msgstr "**Pasos**"

#: of
msgid "array-like, optional"
msgstr "tipo arreglo, opcional"

#: matplotlib.ticker.MaxNLocator:35 of
msgid "Sequence of nice numbers starting with 1 and ending with 10; e.g., [1, 2, 4, 5, 10], where the values are acceptable tick multiples.  i.e. for the example, 20, 40, 60 would be an acceptable set of ticks, as would 0.4, 0.6, 0.8, because they are multiples of 2.  However, 30, 60, 90 would not be allowed because 3 does not appear in the list of steps."
msgstr "Secuencia de números agradables que comienzan con 1 y terminan con 10; por ejemplo, [1, 2, 4, 5, 10], donde los valores son múltiplos aceptables de los marcadores. Es decir, para el ejemplo, 20, 40, 60 serían un conjunto aceptable de marcadores, al igual que 0,4, 0,6, 0,8, porque son múltiplos de 2. Sin embargo, 30, 60, 90 no estarían permitidos porque 3 no aparece en la lista de pasos."

#: matplotlib.ticker.MaxNLocator:44 matplotlib.ticker.MaxNLocator.set_params:14
#: of
msgid "**integer**"
msgstr "**integer**"

#: matplotlib.ticker.MaxNLocator:43 of
msgid "If True, ticks will take only integer values, provided at least *min_n_ticks* integers are found within the view limits."
msgstr "Si es True, los marcadores sólo tomarán valores enteros, siempre que se encuentren al menos *min_n_ticks* enteros dentro de los límites de la vista."

#: matplotlib.ticker.MaxNLocator:47 matplotlib.ticker.MaxNLocator.set_params:17
#: of
msgid "**symmetric**"
msgstr "**symmetric**"

#: matplotlib.ticker.MaxNLocator:47 of
msgid "If True, autoscaling will result in a range symmetric about zero."
msgstr "Si es True, el autoescalado dará como resultado un rango simétrico respecto a cero."

#: matplotlib.ticker.MaxNLocator:56 matplotlib.ticker.MaxNLocator.set_params:20
#: of
msgid "**prune**"
msgstr "**prune**"

#: of
msgid "{'lower', 'upper', 'both', None}, default: None"
msgstr "{'lower', 'upper', 'both', None}, por defecto: None"

#: matplotlib.ticker.MaxNLocator:50 of
msgid "Remove edge ticks -- useful for stacked or ganged plots where the upper tick of one axes overlaps with the lower tick of the axes above it, primarily when :rc:`axes.autolimit_mode` is ``'round_numbers'``.  If ``prune=='lower'``, the smallest tick will be removed.  If ``prune == 'upper'``, the largest tick will be removed.  If ``prune == 'both'``, the largest and smallest ticks will be removed.  If *prune* is *None*, no ticks will be removed."
msgstr "Elimina los marcadores de los bordes -- útil para los gráficos apilados o agrupados en los que el marcador superior de un eje se solapa con el marcador inferior de los ejes superiores, principalmente cuando :rc:`axes.autolimit_mode` es ``'round_numbers``.  Si ``prune=='lower'``, se eliminará el marcador más pequeño.  Si ``prune == 'upper'``, se eliminará el marcador más grande.  Si ``prune == 'both'``, se eliminarán los marcadores más grandes y más pequeños.  Si *prune* es *None*, no se eliminará ningún marcador."

#: matplotlib.ticker.MaxNLocator:73 matplotlib.ticker.MaxNLocator.set_params:36
#: of
msgid "**min_n_ticks**"
msgstr "**min_n_ticks**"

#: of
msgid "int, default: 2"
msgstr "int, default: 2"

#: matplotlib.ticker.MaxNLocator:59 of
msgid "Relax *nbins* and *integer* constraints if necessary to obtain this minimum number of ticks."
msgstr "Relajar las restricciones *nbins* y *integer* si es necesario para obtener este número mínimo de marcadores."

#: matplotlib.ticker.MaxNLocator.set_params:2 of
msgid "Set parameters for this locator."
msgstr "Establece los parámetros para este localizador."

#: matplotlib.ticker.MaxNLocator.set_params:8
#: matplotlib.ticker.MaxNLocator.set_params:11
#: matplotlib.ticker.MaxNLocator.set_params:14
#: matplotlib.ticker.MaxNLocator.set_params:17
#: matplotlib.ticker.MaxNLocator.set_params:20
#: matplotlib.ticker.MaxNLocator.set_params:23 of
msgid "see `.MaxNLocator`"
msgstr "ver `.MaxNLocator`"

#: of
msgid "bool, optional"
msgstr "bool, opcional"

#: of
msgid "{'lower', 'upper', 'both', None}, optional"
msgstr "{'lower', 'upper', 'both', None}, opcional"

#: of
msgid "int, optional"
msgstr "int, opcional"

#: matplotlib.ticker.MultipleLocator:2 of
msgid "Set a tick on each integer multiple of a base within the view interval."
msgstr "Establece un marcador en cada múltiplo entero de una base dentro del intervalo de la vista."

#: matplotlib.ticker.MultipleLocator.view_limits:2 of
msgid "Set the view limits to the nearest multiples of base that contain the data."
msgstr "Establecer los límites de la vista a los múltiplos de base más cercanos que contienen los datos."

#: matplotlib.ticker.NullFormatter:2 of
msgid "Always return the empty string."
msgstr "Devuelve siempre la cadena vacía."

#: matplotlib.ticker.NullLocator:2 of
msgid "No ticks"
msgstr "No hay marcadores"

#: matplotlib.ticker.NullLocator.tick_values:6 of
msgid "Because the values are Null, vmin and vmax are not used in this method."
msgstr "Como los valores son Nulos, vmin y vmax no se utilizan en este método."

#: matplotlib.ticker.PercentFormatter:2 of
msgid "Format numbers as a percentage."
msgstr "Formatear los números como un porcentaje."

#: matplotlib.ticker.PercentFormatter:12 of
msgid "**xmax**"
msgstr "**xmax**"

#: of
msgid "float"
msgstr "float"

#: matplotlib.ticker.PercentFormatter:8 of
msgid "Determines how the number is converted into a percentage. *xmax* is the data value that corresponds to 100%. Percentages are computed as ``x / xmax * 100``. So if the data is already scaled to be percentages, *xmax* will be 100. Another common situation is where *xmax* is 1.0."
msgstr "Determina cómo se convierte el número en un porcentaje. *xmax* es el valor de los datos que corresponde al 100%. Los porcentajes se calculan como ``x / xmax * 100``. Así que si los datos ya están escalados para ser porcentajes, *xmax* será 100. Otra situación común es cuando *xmax* es 1.0."

#: matplotlib.ticker.PercentFormatter:16 of
msgid "**decimals**"
msgstr "**decimals**"

#: of
msgid "None or int"
msgstr "Ninguno o int"

#: matplotlib.ticker.PercentFormatter:15 of
msgid "The number of decimal places to place after the point. If *None* (the default), the number will be computed automatically."
msgstr "El número de decimales a colocar después del punto. Si *None* (el valor por defecto), el número se calculará automáticamente."

#: matplotlib.ticker.PercentFormatter:22 of
msgid "**symbol**"
msgstr "**symbol**"

#: of
msgid "str or None"
msgstr "str o None"

#: matplotlib.ticker.PercentFormatter:19 of
msgid "A string that will be appended to the label. It may be *None* or empty to indicate that no symbol should be used. LaTeX special characters are escaped in *symbol* whenever latex mode is enabled, unless *is_latex* is *True*."
msgstr "Una cadena que se añadirá a la etiqueta. Puede ser *Ninguna* o estar vacía para indicar que no se debe utilizar ningún símbolo. Los caracteres especiales de LaTeX se escapan en *symbol* siempre que el modo látex esté activado, a menos que *is_latex* sea *True*."

#: matplotlib.ticker.PercentFormatter:38 of
msgid "**is_latex**"
msgstr "**is_latex**"

#: matplotlib.ticker.PercentFormatter:25 of
msgid "If *False*, reserved LaTeX characters in *symbol* will be escaped."
msgstr "Si *False*, los caracteres LaTeX reservados en *símbolo* serán escapados."

#: matplotlib.ticker.PercentFormatter.format_pct:2 of
msgid "Format the number as a percentage number with the correct number of decimals and adds the percent symbol, if any."
msgstr "Formatea el número como un número de porcentaje con el número correcto de decimales y añade el símbolo de porcentaje, si lo hay."

#: matplotlib.ticker.PercentFormatter.format_pct:5 of
msgid "If ``self.decimals`` is `None`, the number of digits after the decimal point is set based on the *display_range* of the axis as follows:"
msgstr "Si ``self.decimals`` es `None`, el número de dígitos después del punto decimal se establece en base al *display_range* del eje como sigue:"

#: matplotlib.ticker.PercentFormatter.format_pct:10 of
msgid "display_range"
msgstr "display_range"

#: matplotlib.ticker.PercentFormatter.format_pct:10 of
msgid "decimals"
msgstr "decimales"

#: matplotlib.ticker.PercentFormatter.format_pct:10 of
msgid "sample"
msgstr "muestra"

#: matplotlib.ticker.PercentFormatter.format_pct:12 of
msgid ">50"
msgstr ">50"

#: matplotlib.ticker.PercentFormatter.format_pct:12 of
msgid "0"
msgstr "0"

#: matplotlib.ticker.PercentFormatter.format_pct:12 of
msgid "``x = 34.5`` => 35%"
msgstr "``x = 34.5`` => 35%"

#: matplotlib.ticker.PercentFormatter.format_pct:14 of
msgid ">5"
msgstr ">5"

#: matplotlib.ticker.PercentFormatter.format_pct:14 of
msgid "1"
msgstr "1"

#: matplotlib.ticker.PercentFormatter.format_pct:14 of
msgid "``x = 34.5`` => 34.5%"
msgstr "``x = 34.5`` => 34.5%"

#: matplotlib.ticker.PercentFormatter.format_pct:16 of
msgid ">0.5"
msgstr ">0.5"

#: matplotlib.ticker.PercentFormatter.format_pct:16 of
msgid "2"
msgstr "2"

#: matplotlib.ticker.PercentFormatter.format_pct:16 of
msgid "``x = 34.5`` => 34.50%"
msgstr "``x = 34.5`` => 34.50%"

#: matplotlib.ticker.PercentFormatter.format_pct:18 of
msgid "..."
msgstr "..."

#: matplotlib.ticker.PercentFormatter.format_pct:21 of
msgid "This method will not be very good for tiny axis ranges or extremely large ones. It assumes that the values on the chart are percentages displayed on a reasonable scale."
msgstr "Este método no será muy bueno para rangos de ejes pequeños o extremadamente grandes. Asume que los valores del gráfico son porcentajes mostrados en una escala razonable."

#: matplotlib.ticker.PercentFormatter.symbol:2 of
msgid "The configured percent symbol as a string."
msgstr "El símbolo de porcentaje configurado como una cadena."

#: matplotlib.ticker.PercentFormatter.symbol:4 of
msgid "If LaTeX is enabled via :rc:`text.usetex`, the special characters ``{'#', '$', '%', '&', '~', '_', '^', '\\', '{', '}'}`` are automatically escaped in the string."
msgstr "Si LaTeX está habilitado mediante :rc:`text.usetex`, los caracteres especiales ``'#', '$', '%', '&', '~', '_', '^', '\\', '{', '}'}`` se escapan automáticamente en la cadena."

#: matplotlib.ticker.ScalarFormatter:2 of
msgid "Format tick values as a number."
msgstr "Formatear los valores de los marcadores como un número."

#: matplotlib.ticker.ScalarFormatter:8 of
msgid "**useOffset** : bool or float, default: :rc:`axes.formatter.useoffset`"
msgstr "**useOffset** : bool o float, por defecto: :rc:`axes.formatter.useoffset`"

#: of
msgid "bool or float, default:"
msgstr "bool o float, por defecto:"

#: matplotlib.ticker.ScalarFormatter:8 of
msgid "Whether to use offset notation. See `.set_useOffset`."
msgstr "Si se utiliza la notación de desplazamiento. Ver `.set_useOffset`."

#: matplotlib.ticker.ScalarFormatter:11 of
msgid "Whether to use fancy math formatting. See `.set_useMathText`."
msgstr "Si se utiliza el formato matemático de lujo. Ver `.set_useMathText`."

#: matplotlib.ticker.ScalarFormatter:23 of
msgid "**useLocale** : bool, default: :rc:`axes.formatter.use_locale`."
msgstr "**useLocale** : bool, por defecto: :rc:`axes.formatter.use_locale`."

#: matplotlib.ticker.ScalarFormatter:14 of
msgid "Whether to use locale settings for decimal sign and positive sign. See `.set_useLocale`."
msgstr "Si se utiliza la configuración regional para el signo decimal y el signo positivo. Ver `.set_useLocale`."

#: matplotlib.ticker.ScalarFormatter:27 of
msgid "In addition to the parameters above, the formatting of scientific vs. floating point representation can be configured via `.set_scientific` and `.set_powerlimits`)."
msgstr "Además de los parámetros anteriores, el formato de la representación científica frente a la de punto flotante puede configurarse mediante `.set_scientific` y `.set_powerlimits`)."

#: matplotlib.ticker.ScalarFormatter:31 of
msgid "**Offset notation and scientific notation**"
msgstr "**Notación de desplazamiento y notación científica**"

#: matplotlib.ticker.ScalarFormatter:33 of
msgid "Offset notation and scientific notation look quite similar at first sight. Both split some information from the formatted tick values and display it at the end of the axis."
msgstr "La notación de desplazamiento y la notación científica parecen bastante similares a primera vista. Ambas dividen cierta información de los valores de los marcadores formateados y la muestran al final del eje."

#: matplotlib.ticker.ScalarFormatter:37 of
msgid "The scientific notation splits up the order of magnitude, i.e. a multiplicative scaling factor, e.g. ``1e6``."
msgstr "La notación científica divide el orden de magnitud, es decir, un factor de escala multiplicativo, por ejemplo ``1e6``."

#: matplotlib.ticker.ScalarFormatter:40 of
msgid "The offset notation separates an additive constant, e.g. ``+1e6``. The offset notation label is always prefixed with a ``+`` or ``-`` sign and is thus distinguishable from the order of magnitude label."
msgstr "La notación offset separa una constante aditiva, por ejemplo ``+1e6``. La etiqueta de notación de desplazamiento siempre va precedida de un signo ``+`` o ``-`` y, por tanto, se distingue de la etiqueta de orden de magnitud."

#: matplotlib.ticker.ScalarFormatter:44 of
msgid "The following plot with x limits ``1_000_000`` to ``1_000_010`` illustrates the different formatting. Note the labels at the right edge of the x axis."
msgstr "El siguiente gráfico con los límites de x ``1_000_000`` a ``1_000_010`` ilustra los diferentes formatos. Observe las etiquetas en el borde derecho del eje x."

#: ../../api/ticker_api.rst:7
msgid "(`Source code <../api/ticker_api-1.py>`__, `png <../api/ticker_api-1.png>`__, `pdf <../api/ticker_api-1.pdf>`__)"
msgstr "(`Código fuente <../api/ticker_api-1.py>`__, `png <../api/ticker_api-1.png>`__, `pdf <../api/ticker_api-1.pdf>`__)"

#: matplotlib.ticker.ScalarFormatter.get_offset:2 of
msgid "Return scientific notation, plus offset."
msgstr "Devuelve la notación científica, más el desplazamiento."

#: matplotlib.ticker.ScalarFormatter.get_useLocale:2
#: matplotlib.ticker.ScalarFormatter.useLocale:2 of
msgid "Return whether locale settings are used for formatting."
msgstr "Devuelve si la configuración regional se utiliza para el formato."

#: matplotlib.ticker.ScalarFormatter.get_useLocale:16
#: matplotlib.ticker.ScalarFormatter.useLocale:16 of
msgid ":obj:`ScalarFormatter.set_useLocale`"
msgstr ":obj:`ScalarFormatter.set_useLocale`"

#: matplotlib.ticker.ScalarFormatter.get_useMathText:2
#: matplotlib.ticker.ScalarFormatter.useMathText:2 of
msgid "Return whether to use fancy math formatting."
msgstr "Devuelve si se utiliza el formato matemático de fantasía."

#: matplotlib.ticker.ScalarFormatter.get_useMathText:16
#: matplotlib.ticker.ScalarFormatter.useMathText:16 of
msgid ":obj:`ScalarFormatter.set_useMathText`"
msgstr ":obj:`ScalarFormatter.set_useMathText`"

#: matplotlib.ticker.ScalarFormatter.get_useOffset:2
#: matplotlib.ticker.ScalarFormatter.useOffset:2 of
msgid "Return whether automatic mode for offset notation is active."
msgstr "Devuelve si el modo automático para la notación de desplazamiento está activo."

#: matplotlib.ticker.ScalarFormatter.get_useOffset:4
#: matplotlib.ticker.ScalarFormatter.useOffset:4 of
msgid "This returns True if ``set_useOffset(True)``; it returns False if an explicit offset was set, e.g. ``set_useOffset(1000)``."
msgstr "Devuelve True si ``set_useOffset(True)``; devuelve False si se estableció un offset explícito, por ejemplo ``set_useOffset(1000)``."

#: matplotlib.ticker.ScalarFormatter.get_useOffset:18
#: matplotlib.ticker.ScalarFormatter.useOffset:18 of
msgid ":obj:`ScalarFormatter.set_useOffset`"
msgstr ":obj:`ScalarFormatter.set_useOffset`"

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:2 of
msgid "Set size thresholds for scientific notation."
msgstr "Establecer los umbrales de tamaño para la notación científica."

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:32 of
msgid "**lims**"
msgstr "**lims**"

#: of
msgid "(int, int)"
msgstr "(int, int)"

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:8 of
msgid "A tuple *(min_exp, max_exp)* containing the powers of 10 that determine the switchover threshold. For a number representable as :math:`a \\times 10^\\mathrm{exp}`` with :math:`1 <= |a| < 10`, scientific notation will be used if ``exp <= min_exp`` or ``exp >= max_exp``."
msgstr "Una tupla *(min_exp, max_exp)* que contiene las potencias de 10 que determinan el umbral de conmutación. Para un número representable como :math:`a \\times 10^\\mathrm{exp}`` con :math:`1 <= |a| < 10``, se utilizará la notación científica si ``exp <= min_exp`` o ``exp >= max_exp``."

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:14 of
msgid "The default limits are controlled by :rc:`axes.formatter.limits`."
msgstr "Los límites por defecto son controlados por :rc:`axes.formatter.limits`."

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:16 of
msgid "In particular numbers with *exp* equal to the thresholds are written in scientific notation."
msgstr "En particular los números con *exp* igual a los umbrales se escriben en notación científica."

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:19 of
msgid "Typically, *min_exp* will be negative and *max_exp* will be positive."
msgstr "Típicamente, *min_exp* será negativo y *max_exp* será positivo."

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:22 of
msgid "For example, ``formatter.set_powerlimits((-3, 4))`` will provide the following formatting: :math:`1 \\times 10^{-3}, 9.9 \\times 10^{-3}, 0.01,` :math:`9999, 1 \\times 10^4`."
msgstr "Por ejemplo, ``formatter.set_powerlimits((-3, 4))`` proporcionará el siguiente formato: :math:`1 \\times 10^{-3}, 9,9 \\times 10^{-3}, 0,01,` :math:`9999, 1 \\times 10^4`."

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:37 of
msgid ":obj:`ScalarFormatter.set_scientific`"
msgstr ":obj:`ScalarFormatter.set_scientific`"

#: matplotlib.ticker.ScalarFormatter.set_scientific:2 of
msgid "Turn scientific notation on or off."
msgstr "Activar o desactivar la notación científica."

#: matplotlib.ticker.ScalarFormatter.set_scientific:16 of
msgid ":obj:`ScalarFormatter.set_powerlimits`"
msgstr ":obj:`ScalarFormatter.set_powerlimits`"

#: matplotlib.ticker.ScalarFormatter.set_useLocale:2 of
msgid "Set whether to use locale settings for decimal sign and positive sign."
msgstr "Establecer si se utiliza la configuración regional para el signo decimal y el signo positivo."

#: matplotlib.ticker.ScalarFormatter.set_useLocale:21
#: matplotlib.ticker.ScalarFormatter.set_useMathText:22
#: matplotlib.ticker.ScalarFormatter.set_useOffset:26 of
msgid "**val**"
msgstr "**val**"

#: of
msgid "bool or None"
msgstr "bool o None"

#: matplotlib.ticker.ScalarFormatter.set_useLocale:8 of
msgid "*None* resets to :rc:`axes.formatter.use_locale`."
msgstr "*None* restablece a :rc:`axes.formatter.use_locale`."

#: matplotlib.ticker.ScalarFormatter.set_useMathText:2 of
msgid "Set whether to use fancy math formatting."
msgstr "Establecer si se utiliza el formato matemático de fantasía."

#: matplotlib.ticker.ScalarFormatter.set_useMathText:4 of
msgid "If active, scientific notation is formatted as :math:`1.2 \\times 10^3`."
msgstr "Si está activo, la notación científica se formatea como :math:`1.2 \\times 10^3`."

#: matplotlib.ticker.ScalarFormatter.set_useMathText:9 of
msgid "*None* resets to :rc:`axes.formatter.use_mathtext`."
msgstr "*None* restablece a :rc:`axes.formatter.use_mathtext`."

#: matplotlib.ticker.ScalarFormatter.set_useOffset:2 of
msgid "Set whether to use offset notation."
msgstr "Establecer si se utiliza la notación de desplazamiento."

#: matplotlib.ticker.ScalarFormatter.set_useOffset:4 of
msgid "When formatting a set numbers whose value is large compared to their range, the formatter can separate an additive constant. This can shorten the formatted numbers so that they are less likely to overlap when drawn on an axis."
msgstr "Al formatear un conjunto de números cuyo valor es grande en comparación con su rango, el formateador puede separar una constante aditiva. Esto puede acortar los números formateados para que sea menos probable que se superpongan cuando se dibujan en un eje."

#: of
msgid "bool or float"
msgstr "bool o float"

#: matplotlib.ticker.ScalarFormatter.set_useOffset:12 of
msgid "If False, do not use offset notation."
msgstr "Si es False, no utilizar la notación de desplazamiento."

#: matplotlib.ticker.ScalarFormatter.set_useOffset:13 of
msgid "If True (=automatic mode), use offset notation if it can make the residual numbers significantly shorter. The exact behavior is controlled by :rc:`axes.formatter.offset_threshold`."
msgstr "Si es True (=modo automático), utiliza la notación offset si puede hacer que los números residuales sean significativamente más cortos. El comportamiento exacto es controlado por :rc:`axes.formatter.offset_threshold`."

#: matplotlib.ticker.ScalarFormatter.set_useOffset:16 of
msgid "If a number, force an offset of the given value."
msgstr "Si es un número, forzar un desplazamiento del valor dado."

#: matplotlib.ticker.ScalarFormatter.set_useOffset:30 of
msgid "With active offset notation, the values"
msgstr "Con la notación de desplazamiento activo, los valores"

#: matplotlib.ticker.ScalarFormatter.set_useOffset:32 of
msgid "``100_000, 100_002, 100_004, 100_006, 100_008``"
msgstr "``100_000, 100_002, 100_004, 100_006, 100_008``"

#: matplotlib.ticker.ScalarFormatter.set_useOffset:34 of
msgid "will be formatted as ``0, 2, 4, 6, 8`` plus an offset ``+1e5``, which is written to the edge of the axis."
msgstr "se formateará como ``0, 2, 4, 6, 8`` más un offset ``+1e5``, que se escribe en el borde del eje."

#: matplotlib.ticker.StrMethodFormatter:2 of
msgid "Use a new-style format string (as used by `str.format`) to format the tick."
msgstr "Utilizar una cadena de formato de nuevo estilo (como la utilizada por `str.format`) para formatear el marcador."

#: matplotlib.ticker.StrMethodFormatter:4 of
msgid "The field used for the tick value must be labeled *x* and the field used for the tick position must be labeled *pos*."
msgstr "El campo utilizado para el valor del marcador debe ser etiquetado *x* y el campo utilizado para la posición del marcador debe ser etiquetado *pos*."

#: matplotlib.ticker.SymmetricalLogLocator:2 of
msgid "Determine the tick locations for symmetric log axes."
msgstr "Determinar las ubicaciones de los marcadores para los ejes logarítmicos simétricos."

#: matplotlib.ticker.SymmetricalLogLocator:29 of
msgid "**transform** : `~.scale.SymmetricalLogTransform`, optional"
msgstr "**transformación** : `~.scale.SymmetricalLogTransform`, opcional"

#: matplotlib.ticker.SymmetricalLogLocator:28 of
msgid "SymmetricalLogTransform, optional"
msgstr "SymmetricalLogTransform, opcional"

#: matplotlib.ticker.SymmetricalLogLocator:29 of
msgid "If set, defines the *base* and *linthresh* of the symlog transform."
msgstr "Si se establece, define la *base* y el *linthresh* de la transformación symlog."

#: matplotlib.ticker.SymmetricalLogLocator:34 of
msgid "**base, linthresh**"
msgstr "**base, linthresh**"

#: of
msgid "float, optional"
msgstr "float, opcional"

#: matplotlib.ticker.SymmetricalLogLocator:32 of
msgid "The *base* and *linthresh* of the symlog transform, as documented for `.SymmetricalLogScale`.  These parameters are only used if *transform* is not set."
msgstr "La *base* y el *linthresh* de la transformación symlog, como se documenta para `.SymmetricalLogScale`.  Estos parámetros sólo se utilizan si *transformación* no está establecida."

#: of
msgid "sequence of float, default: [1]"
msgstr "secuencia de float, por defecto: [1]"

#: matplotlib.ticker.SymmetricalLogLocator:37 of
msgid "The multiples of integer powers of the base where ticks are placed, i.e., ticks are placed at ``[sub * base**i for i in ... for sub in subs]``."
msgstr "Los múltiplos de potencias enteras de la base donde se colocan los marcadores, es decir, los marcadores se colocan en ``[sub * base**i for i in ... for sub in subs]``."

#: matplotlib.ticker.SymmetricalLogLocator:51 of
msgid "Either *transform*, or both *base* and *linthresh*, must be given."
msgstr "Se debe dar *transformación*, o ambos *base* y *linthresh*."

#: matplotlib.ticker.TickHelper:1 of
msgid "Bases: :py:class:`object`"
msgstr "Bases: :py:class:`object`"

#: matplotlib.ticker.TickHelper.set_bounds:2
#: matplotlib.ticker.TickHelper.set_data_interval:2
#: matplotlib.ticker.TickHelper.set_view_interval:2 of
msgid "[*Deprecated*]"
msgstr "[*Abandonado*]"

#: matplotlib.ticker.TickHelper.set_bounds:16
#: matplotlib.ticker.TickHelper.set_data_interval:16
#: matplotlib.ticker.TickHelper.set_view_interval:16 of
msgid "\\"
msgstr "\\"

