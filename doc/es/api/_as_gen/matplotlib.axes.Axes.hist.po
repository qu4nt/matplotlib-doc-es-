msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 13:50\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/_as_gen/matplotlib.axes.Axes.hist.po\n"
"X-Crowdin-File-ID: 548\n"
"Language: es_ES\n"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.rst:2
msgid "matplotlib.axes.Axes.hist"
msgstr "matplotlib.axes.Axes.hist"

#: matplotlib.axes._axes.Axes.hist:2 of
msgid "Plot a histogram."
msgstr "Trazar un histograma."

#: matplotlib.axes._axes.Axes.hist:4 of
msgid "Compute and draw the histogram of *x*.  The return value is a tuple (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*, *patches1*, ...]) if the input contains multiple data.  See the documentation of the *weights* parameter to draw a histogram of already-binned data."
msgstr "Calcula y dibuja el histograma de *x*, el valor de retorno es una tupla (*n*, *bins*, *patches*) o ([*n0*, *n1*, ...], *bins*, [*patches0*, *patches1*, . .]) si la entrada contiene varios datos. Consulte la documentación del parámetro *pesos* para dibujar un histograma de datos ya binnados."

#: matplotlib.axes._axes.Axes.hist:10 of
msgid "Multiple data can be provided via *x* as a list of datasets of potentially different length ([*x0*, *x1*, ...]), or as a 2D ndarray in which each column is a dataset.  Note that the ndarray form is transposed relative to the list form."
msgstr "Múltiples datos pueden proporcionarse a través de *x* como una lista de conjuntos de datos de longitud potencialmente diferente ([*x0*, *x1*, ... ), o como un ndarray 2D en el que cada columna es un conjunto de datos. Tenga en cuenta que el formulario ndarray se transpone en relación al formulario de lista."

#: matplotlib.axes._axes.Axes.hist:15 of
msgid "Masked arrays are not supported."
msgstr "Las matrices enmascaradas no están soportadas."

#: matplotlib.axes._axes.Axes.hist:17 of
msgid "The *bins*, *range*, *weights*, and *density* parameters behave as in `numpy.histogram`."
msgstr "Los parámetros *bins*, *range*, *pesos*, y *densidad* se comportan como en `numpy.histogram`."

#: matplotlib.axes._axes.Axes.hist of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.axes._axes.Axes.hist:24 of
msgid "**x**"
msgstr "**x**"

#: of
msgid "(n,) array or sequence of (n,) arrays"
msgstr "(n,) array o secuencia de (n,) arrays"

#: matplotlib.axes._axes.Axes.hist:23 of
msgid "Input values, this takes either a single array or a sequence of arrays which are not required to be of the same length."
msgstr "Los valores de entrada, esto toma una sola matriz o una secuencia de matrices que no son obligadas a tener la misma longitud."

#: matplotlib.axes._axes.Axes.hist:43 of
msgid "**bins** : int or sequence or str, default: :rc:`hist.bins`"
msgstr "**papeles** : int o secuencia o str, por defecto: :rc:`is.bins`"

#: of
msgid "int or sequence or str, default:"
msgstr "int o secuencia o str, por defecto:"

#: matplotlib.axes._axes.Axes.hist:27 of
msgid "If *bins* is an integer, it defines the number of equal-width bins in the range."
msgstr "Si *bins* es un entero, define el número de contenedores de ancho igual en el rango."

#: matplotlib.axes._axes.Axes.hist:30 of
msgid "If *bins* is a sequence, it defines the bin edges, including the left edge of the first bin and the right edge of the last bin; in this case, bins may be unequally spaced.  All but the last (righthand-most) bin is half-open.  In other words, if *bins* is::"
msgstr "Si *bins* es una secuencia, define los bordes de la papelera, incluyendo el borde izquierdo de la primera papelera y el borde derecho de la última papelera; en este caso, los contenedores pueden estar separados desigualmente. Todo menos la última (derecha-la mayoría) bin está medio abierta. En otras palabras, si *bins* es::"

#: matplotlib.axes._axes.Axes.hist:37 of
msgid "then the first bin is ``[1, 2)`` (including 1, but excluding 2) and the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which *includes* 4."
msgstr "entonces la primera papelera es ``[1, 2)`` (incluyendo 1, pero excluyendo 2) y la segunda ``[2, 3)``. La última papelera, sin embargo, es ``[3, 4]``, que *incluye* 4."

#: matplotlib.axes._axes.Axes.hist:41 of
msgid "If *bins* is a string, it is one of the binning strategies supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane', 'scott', 'stone', 'rice', 'sturges', or 'sqrt'."
msgstr "Si *bins* es una cadena, es una de las estrategias de binning apoyadas por `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane', 'scott', 'stone', 'rice', 'sturges', o 'sqrt'."

#: matplotlib.axes._axes.Axes.hist:52 of
msgid "**range**"
msgstr "**range**"

#: of
msgid "tuple or None, default: None"
msgstr "tuple o ninguno, por defecto: ninguno"

#: matplotlib.axes._axes.Axes.hist:46 of
msgid "The lower and upper range of the bins. Lower and upper outliers are ignored. If not provided, *range* is ``(x.min(), x.max())``. Range has no effect if *bins* is a sequence."
msgstr "El rango inferior y superior de los cubos se ignora. Si no se proporciona, *rango* es ``(x.min(), x.max())``. El rango no tiene efecto si *bins* es una secuencia."

#: matplotlib.axes._axes.Axes.hist:50 of
msgid "If *bins* is a sequence or *range* is specified, autoscaling is based on the specified bin range instead of the range of x."
msgstr "Si *bins* es una secuencia o *rango* es especificado, el autoescalado se basa en el rango de bin especificado en lugar del rango de x."

#: matplotlib.axes._axes.Axes.hist:63 of
msgid "**density**"
msgstr "**densidad**"

#: of
msgid "bool, default: False"
msgstr "bool, por defecto: False"

#: matplotlib.axes._axes.Axes.hist:55 of
msgid "If ``True``, draw and return a probability density: each bin will display the bin's raw count divided by the total number of counts *and the bin width* (``density = counts / (sum(counts) * np.diff(bins))``), so that the area under the histogram integrates to 1 (``np.sum(density * np.diff(bins)) == 1``)."
msgstr "Si es ``verdadero``, dibujar y devolver una densidad de probabilidad: cada papelera mostrará el recuento crudo de la papelera dividido por el número total de cuentas *y la anchura de la papelera* (``densidad = cuentas/ (cuentas) * np. iff(bins)``), para que el área debajo del histograma se integre a 1 (``np.sum(density * np.diff(bins)) == 1``)."

#: matplotlib.axes._axes.Axes.hist:62 of
msgid "If *stacked* is also ``True``, the sum of the histograms is normalized to 1."
msgstr "Si *apilado* es también ``True``, la suma de los histogramas se normaliza a 1."

#: matplotlib.axes._axes.Axes.hist:79 of
msgid "**weights**"
msgstr "**Pesos**"

#: of
msgid "(n,) array-like or None, default: None"
msgstr "(n,) array-like o ninguno, por defecto: Ninguno"

#: matplotlib.axes._axes.Axes.hist:66 of
msgid "An array of weights, of the same shape as *x*.  Each value in *x* only contributes its associated weight towards the bin count (instead of 1).  If *density* is ``True``, the weights are normalized, so that the integral of the density over the range remains 1."
msgstr "Una matriz de pesos, de la misma forma que *x*. Cada valor en *x* sólo contribuye su peso asociado al recuento de bin (en lugar de 1). Si la *densidad* es ``Verdada``, los pesos son normalizados, de modo que la parte integral de la densidad en el rango sigue siendo 1."

#: matplotlib.axes._axes.Axes.hist:72 of
msgid "This parameter can be used to draw a histogram of data that has already been binned, e.g. using `numpy.histogram` (by treating each bin as a single point with a weight equal to its count) ::"
msgstr "Este parámetro se puede utilizar para dibujar un histograma de datos que ya ha sido binned, p.ej. usando `numpy.histogram` (tratando cada papelera como un solo punto con un peso igual a su cuenta) ::"

#: matplotlib.axes._axes.Axes.hist:79 of
msgid "(or you may alternatively use `~.bar()`)."
msgstr "(o puedes usar alternativamente `~.bar()`)."

#: matplotlib.axes._axes.Axes.hist:92 of
msgid "**cumulative**"
msgstr "**cumulative**"

#: of
msgid "bool or -1, default: False"
msgstr "bool o -1, por defecto: False"

#: matplotlib.axes._axes.Axes.hist:82 of
msgid "If ``True``, then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values. The last bin gives the total number of datapoints."
msgstr "Si es ``True``, entonces un histograma es calculado donde cada papelera da los recuentos en esa papelera más todas las papeleras para valores más pequeños. La última papelera da el número total de datos indicados."

#: matplotlib.axes._axes.Axes.hist:86 of
msgid "If *density* is also ``True`` then the histogram is normalized such that the last bin equals 1."
msgstr "Si la *densidad* es también ``True`` entonces el histograma está normalizado de tal manera que la última papelera es igual a 1."

#: matplotlib.axes._axes.Axes.hist:89 of
msgid "If *cumulative* is a number less than 0 (e.g., -1), the direction of accumulation is reversed.  In this case, if *density* is also ``True``, then the histogram is normalized such that the first bin equals 1."
msgstr "Si *acumulativa* es un número menor que 0 (por ejemplo, -1), la dirección de la acumulación es invertida. En este caso, si la *densidad* es también ``True``, entonces el histograma está normalizado de tal manera que la primera papelera es igual a 1."

#: matplotlib.axes._axes.Axes.hist:99 of
msgid "**bottom**"
msgstr "**inferior**"

#: of
msgid "array-like, scalar, or None, default: None"
msgstr ", escalar o ninguno, por defecto: ninguno"

#: matplotlib.axes._axes.Axes.hist:95 of
msgid "Location of the bottom of each bin, ie. bins are drawn from ``bottom`` to ``bottom + hist(x, bins)`` If a scalar, the bottom of each bin is shifted by the same amount. If an array, each bin is shifted independently and the length of bottom must match the number of bins. If None, defaults to 0."
msgstr "Ubicación de la parte inferior de cada papelera, ej. Las papeleras se extraen de ``bottom`` a ``bottom + medium(x, bins)`` Si un escalar, la parte inferior de cada papelera se desplaza por la misma cantidad. Si una matriz, cada papelera se desplaza de forma independiente y la longitud de la parte inferior debe coincidir con el número de papeleras. Si Ninguna, el valor predeterminado es 0."

#: matplotlib.axes._axes.Axes.hist:109 of
msgid "**histtype**"
msgstr "**Tipo**"

#: of
msgid "{'bar', 'barstacked', 'step', 'stepfilled'}, default: 'bar'"
msgstr "{'bar', 'barstacked', 'step', 'stepfilled'}, por defecto: 'bar'"

#: matplotlib.axes._axes.Axes.hist:102 of
msgid "The type of histogram to draw."
msgstr "El tipo de histograma a dibujar."

#: matplotlib.axes._axes.Axes.hist:104 of
msgid "'bar' is a traditional bar-type histogram.  If multiple data are given the bars are arranged side by side."
msgstr "'bar' es un histograma tradicional del tipo de barra. Si se dan múltiples datos, las barras se organizan al lado del mismo."

#: matplotlib.axes._axes.Axes.hist:106 of
msgid "'barstacked' is a bar-type histogram where multiple data are stacked on top of each other."
msgstr "'barstacked' es un histograma de tipo barras en el que se acumulan múltiples datos."

#: matplotlib.axes._axes.Axes.hist:108 of
msgid "'step' generates a lineplot that is by default unfilled."
msgstr "'step' genera un diagrama de línea que por defecto está desllenado."

#: matplotlib.axes._axes.Axes.hist:109 of
msgid "'stepfilled' generates a lineplot that is by default filled."
msgstr "'stepfilled' genera un diagrama de línea que se llena por defecto."

#: matplotlib.axes._axes.Axes.hist:116 of
msgid "**align**"
msgstr "**align**"

#: of
msgid "{'left', 'mid', 'right'}, default: 'mid'"
msgstr "{'left', 'mid', 'right'}, default: 'mid'"

#: matplotlib.axes._axes.Axes.hist:112 of
msgid "The horizontal alignment of the histogram bars."
msgstr "La alineación horizontal de las barras del histograma."

#: matplotlib.axes._axes.Axes.hist:114 of
msgid "'left': bars are centered on the left bin edges."
msgstr "'izquierda': las barras se centran en los bordes de la papelera."

#: matplotlib.axes._axes.Axes.hist:115 of
msgid "'mid': bars are centered between the bin edges."
msgstr "'mid': las barras se centran entre los bordes de la basura."

#: matplotlib.axes._axes.Axes.hist:116 of
msgid "'right': bars are centered on the right bin edges."
msgstr "'derecha': las barras se centran en los bordes de la basura derecha."

#: matplotlib.axes._axes.Axes.hist:120 of
msgid "**orientation**"
msgstr "**orientación**"

#: of
msgid "{'vertical', 'horizontal'}, default: 'vertical'"
msgstr "{'vertical', 'horizontal'}, por defecto: 'vertical'"

#: matplotlib.axes._axes.Axes.hist:119 of
msgid "If 'horizontal', `~.Axes.barh` will be used for bar-type histograms and the *bottom* kwarg will be the left edges."
msgstr "Si es 'horizontal', `~.Axes.barh` será usado para histogramas tipo barra y el kwarg *abajo* será el borde izquierdo."

#: matplotlib.axes._axes.Axes.hist:126 of
msgid "**rwidth**"
msgstr "**rwidth**"

#: of
msgid "float or None, default: None"
msgstr "flotante o ninguno, por defecto: ninguno"

#: matplotlib.axes._axes.Axes.hist:123 of
msgid "The relative width of the bars as a fraction of the bin width.  If ``None``, automatically compute the width."
msgstr "El ancho relativo de las barras como una fracción del ancho de la papelera. Si ``Ninguno``, calcula automáticamente el ancho."

#: matplotlib.axes._axes.Axes.hist:126 of
msgid "Ignored if *histtype* is 'step' or 'stepfilled'."
msgstr "Ignorado si el *tipo* es 'paso' o 'escalonado'."

#: matplotlib.axes._axes.Axes.hist:129 of
msgid "**log**"
msgstr "**registro**"

#: matplotlib.axes._axes.Axes.hist:129 of
msgid "If ``True``, the histogram axis will be set to a log scale."
msgstr "Si es ``True``, el eje del histograma se establecerá a una escala del registro."

#: matplotlib.axes._axes.Axes.hist:133 of
msgid "**color**"
msgstr "**color**"

#: of
msgid "color or array-like of colors or None, default: None"
msgstr "color o estilo matriz de colores o ninguno, por defecto: ninguno"

#: matplotlib.axes._axes.Axes.hist:132 of
msgid "Color or sequence of colors, one per dataset.  Default (``None``) uses the standard line color sequence."
msgstr "Color o secuencia de colores, uno por conjunto de datos. Por defecto (``Ninguno``) utiliza la secuencia de color de línea estándar."

#: matplotlib.axes._axes.Axes.hist:138 of
msgid "**label**"
msgstr "**etiqueta**"

#: of
msgid "str or None, default: None"
msgstr "str o ninguno, por defecto: Ninguno"

#: matplotlib.axes._axes.Axes.hist:136 of
msgid "String, or sequence of strings to match multiple datasets.  Bar charts yield multiple patches per dataset, but only the first gets the label, so that `~.Axes.legend` will work as expected."
msgstr "Cadena, o secuencia de cadenas para que coincidan con varios conjuntos de datos. Los gráficos de barras producen múltiples parches por conjunto de datos, pero sólo el primero obtiene la etiqueta, de modo que `~.Axes.legend` funcionará como se esperaba."

#: matplotlib.axes._axes.Axes.hist:143 of
msgid "**stacked**"
msgstr "**apilado**"

#: matplotlib.axes._axes.Axes.hist:141 of
msgid "If ``True``, multiple data are stacked on top of each other If ``False`` multiple data are arranged side by side if histtype is 'bar' or on top of each other if histtype is 'step'"
msgstr "Si es ``verdadero``, múltiples datos se acumulan sobre el otro. Si ``False`` múltiples datos se organizan codo con codo si el tipo de persona es 'bar' o encima si el tipo de persona es 'paso'"

#: matplotlib.axes._axes.Axes.hist of
msgid "Returns"
msgstr "Devuelve"

#: matplotlib.axes._axes.Axes.hist:154 of
msgid "**n**"
msgstr "**n**"

#: of
msgid "array or list of arrays"
msgstr "array o lista de matrices"

#: matplotlib.axes._axes.Axes.hist:148 of
msgid "The values of the histogram bins. See *density* and *weights* for a description of the possible semantics.  If input *x* is an array, then this is an array of length *nbins*. If input is a sequence of arrays ``[data1, data2, ...]``, then this is a list of arrays with the values of the histograms for each of the arrays in the same order.  The dtype of the array *n* (or of its element arrays) will always be float even if no weighting or normalization is used."
msgstr "Los valores de las bolsas de histograma, vea *densidad* y *pesos* para una descripción de los semánticos posibles. Si la entrada *x* es una matriz, entonces esta es una matriz de longitud *Textins*. Si la entrada es una secuencia de arrays ``[data1, data2, ... ``, entonces esta es una lista de matrices con los valores de los histogramas para cada una de las matrices en el mismo orden. El tipo de dtype de la matriz *n* (o de sus matrices de elementos) siempre estará flotante incluso si no se utiliza ninguna ponderación o normalización."

#: matplotlib.axes._axes.Axes.hist:159 of
msgid "**bins**"
msgstr "**Papelas**"

#: of
msgid "array"
msgstr "array"

#: matplotlib.axes._axes.Axes.hist:157 of
msgid "The edges of the bins. Length nbins + 1 (nbins left edges and right edge of last bin).  Always a single array even when multiple data sets are passed in."
msgstr "Los bordes de los cubos de longitud. Siempre una sola matriz incluso cuando se pasan múltiples conjuntos de datos."

#: matplotlib.axes._axes.Axes.hist:165 of
msgid "**patches** : `.BarContainer` or list of a single `.Polygon` or list of such objects"
msgstr "**parches** : `.BarContainer` o lista de un solo `.Polygon` o lista de tales objetos"

#: matplotlib.axes._axes.Axes.hist:164 of
msgid "BarContainer or list of a single Polygon or list of such objects"
msgstr "Contenedor de barras o lista de un único polígono o lista de tales objetos"

#: matplotlib.axes._axes.Axes.hist:162 of
msgid "Container of individual artists used to create the histogram or list of such containers if there are multiple input datasets."
msgstr "Contenedor de artistas individuales utilizados para crear el histograma o lista de dichos contenedores si hay múltiples conjuntos de datos de entrada."

#: matplotlib.axes._axes.Axes.hist of
msgid "Other Parameters"
msgstr "Otros Parámetros"

#: matplotlib.axes._axes.Axes.hist:173 of
msgid "**data**"
msgstr "**data**"

#: of
msgid "indexable object, optional"
msgstr "indexable object, optional"

#: matplotlib.axes._axes.Axes.hist:170 of
msgid "If given, the following parameters also accept a string ``s``, which is interpreted as ``data[s]`` (unless this raises an exception):"
msgstr "Si se dan, los siguientes parámetros también aceptan una cadena ``s``, que se interpreta como ``data[s]`` (a menos que se produzca una excepción):"

#: matplotlib.axes._axes.Axes.hist:173 of
msgid "*x*, *weights*"
msgstr "*x*, *pesos*"

#: matplotlib.axes._axes.Axes.hist:179 of
msgid "**\\*\\*kwargs**"
msgstr "**\\*\\*kwargs**"

#: matplotlib.axes._axes.Axes.hist:176 of
msgid "`~matplotlib.patches.Patch` properties"
msgstr "Propiedades `~matplotlib.patches.Patch`"

#: matplotlib.axes._axes.Axes.hist:184 of
msgid ":obj:`hist2d`"
msgstr ":obj:`Cadena2d`"

#: matplotlib.axes._axes.Axes.hist:185 of
msgid "2D histogram with rectangular bins"
msgstr "Histograma 2D con contenedores rectangulares"

#: matplotlib.axes._axes.Axes.hist:186 of
msgid ":obj:`hexbin`"
msgstr ":obj:`hexbin`"

#: matplotlib.axes._axes.Axes.hist:187 of
msgid "2D histogram with hexagonal bins"
msgstr "Histograma 2D con contenedores hexagonales"

#: matplotlib.axes._axes.Axes.hist:191 of
msgid "Notes"
msgstr "Notes"

#: matplotlib.axes._axes.Axes.hist:192 of
msgid "For large numbers of bins (>1000), 'step' and 'stepfilled' can be significantly faster than 'bar' and 'barstacked'."
msgstr "Para grandes cantidades de contenedores (>1000), 'step' y 'stepfilled' puede ser significativamente más rápido que 'bar' y 'barra'."

#: ../../../../../../../../api/_as_gen/matplotlib.axes.Axes.hist.examples:2
msgid "Examples using ``matplotlib.axes.Axes.hist``"
msgstr "Ejemplos usando ``matplotlib.axes.Axes.nb``"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:10
msgid "Scatter plot with histograms"
msgstr "Gráfico de dispersión con histogramas"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:10
#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:18
msgid ":ref:`sphx_glr_gallery_lines_bars_and_markers_scatter_hist.py`"
msgstr ":ref:`sphx_glr_gallery_lines_bars_and_markers_scatter_hist.py`"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:29
msgid "Scatter Histogram (Locatable Axes)"
msgstr "Histograma de dispersión (ejes localizables)"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:29
#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:37
msgid ":ref:`sphx_glr_gallery_axes_grid1_scatter_hist_locatable_axes.py`"
msgstr ":ref:`sphx_glr_gallery_axes_grid1_scatter_hist_locatable_axes.py`"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:48
msgid "MRI With EEG"
msgstr "MRI con EEG"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:48
#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:56
msgid ":ref:`sphx_glr_gallery_specialty_plots_mri_with_eeg.py`"
msgstr ":ref:`sphx_glr_gallery_specialty_plots_mri_with_eeg.py`"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:67
msgid "Basic Usage"
msgstr "Uso básico"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:67
#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:75
msgid ":ref:`sphx_glr_tutorials_introductory_usage.py`"
msgstr ":ref:`sphx_glr_tutorials_introductory_usage.py`"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:86
msgid "Artist tutorial"
msgstr "Tutorial de artistas"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:86
#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:94
msgid ":ref:`sphx_glr_tutorials_intermediate_artists.py`"
msgstr ":ref:`sphx_glr_tutorials_intermediate_artists.py`"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:105
msgid "Transformations Tutorial"
msgstr "Tutorial de transformaciones"

#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:105
#: ../../api/_as_gen/matplotlib.axes.Axes.hist.examples:113
msgid ":ref:`sphx_glr_tutorials_advanced_transforms_tutorial.py`"
msgstr ":ref:`sphx_glr_tutorials_advanced_transforms_tutorial.py`"

