msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 14:09\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/backend_agg_api.po\n"
"X-Crowdin-File-ID: 1720\n"
"Language: es_ES\n"

#: ../../api/backend_agg_api.rst:2
msgid ":mod:`.backend_agg`"
msgstr ":mod:`.backend_agg`"

#: matplotlib.backends.backend_agg:1 of
msgid "An `Anti-Grain Geometry`_ (AGG) backend."
msgstr "Un `Anti-Grain Geometry`_ backend."

#: matplotlib.backends.backend_agg:3 of
msgid "Features that are implemented:"
msgstr "Características implementadas:"

#: matplotlib.backends.backend_agg:5 of
msgid "capstyles and join styles"
msgstr "capstyles y unirse a estilos"

#: matplotlib.backends.backend_agg:6 of
msgid "dashes"
msgstr "dashes"

#: matplotlib.backends.backend_agg:7 of
msgid "linewidth"
msgstr "linewidth"

#: matplotlib.backends.backend_agg:8 of
msgid "lines, rectangles, ellipses"
msgstr "líneas, rectángulos, elipses"

#: matplotlib.backends.backend_agg:9 of
msgid "clipping to a rectangle"
msgstr "recortando a un rectángulo"

#: matplotlib.backends.backend_agg:10 of
msgid "output to RGBA and Pillow-supported image formats"
msgstr "salida a formatos de imagen soportados por RGBA y Pillow"

#: matplotlib.backends.backend_agg:11 of
msgid "alpha blending"
msgstr "mezcla alfa"

#: matplotlib.backends.backend_agg:12 of
msgid "DPI scaling properly - everything scales properly (dashes, linewidths, etc)"
msgstr "Escala DPI correctamente - todo lo escalado correctamente (guiones, anchuras, etc)"

#: matplotlib.backends.backend_agg:13 of
msgid "draw polygon"
msgstr "dibujar polígono"

#: matplotlib.backends.backend_agg:14 of
msgid "freetype2 w/ ft2font"
msgstr "freetype2 con ft2font"

#: matplotlib.backends.backend_agg:16 of
msgid "Still TODO:"
msgstr "Aún así, es necesario:"

#: matplotlib.backends.backend_agg:18 of
msgid "integrate screen dpi w/ ppi and text"
msgstr "integrar dpi de pantalla con ppi y texto"

#: matplotlib.backends.backend_agg.FigureCanvasAgg:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"

#: matplotlib.backends.backend_agg.FigureCanvasAgg.buffer_rgba:2 of
msgid "Get the image as a `memoryview` to the renderer's buffer."
msgstr "Obtener la imagen como 'memoryview' al buffer del renderizador."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.buffer_rgba:4
#: matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_argb:4
#: matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb:4 of
msgid "`draw` must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure."
msgstr "`draw` debe ser llamado al menos una vez antes de que esta función funcione y para actualizar el renderizador para cualquier cambio posterior a la figura."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.draw:2 of
msgid "Render the `.Figure`."
msgstr "Renderiza la `.Figure`."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.draw:4 of
msgid "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk."
msgstr "Es importante que este método realmente recorra el árbol del artista incluso si no se produce la salida, ya que esto desencadenará trabajos diferidos (como la computación limita los límites automáticos y los valores de tick) a los que los usuarios pueden querer acceder antes de guardar en el disco."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:2 of
msgid "Write the figure to a JPEG file."
msgstr "Escriba la figura en un archivo JPEG."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg
#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png
#: matplotlib.backends.backend_agg.RendererAgg.draw_text
#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:11
#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:8 of
msgid "**filename_or_obj**"
msgstr "**Nombre de archivo_objeto**"

#: of
msgid "str or path-like or file-like"
msgstr "str o como ruta o archivo"

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:8
#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:8 of
msgid "The file to write to."
msgstr "El archivo al que escribir."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg of
msgid "Other Parameters"
msgstr "Otros Parámetros"

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:26
#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:58 of
msgid "**pil_kwargs**"
msgstr "**pil_kwargs**"

#: of
msgid "dict, optional"
msgstr "dict, optional"

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:16 of
msgid "Additional keyword arguments that are passed to `PIL.Image.Image.save` when saving the figure."
msgstr "Argumentos adicionales de palabras clave que se pasan a `PIL.Image.save` al guardar la figura."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:2 of
msgid "Write the figure to a PNG file."
msgstr "Escriba la figura en un archivo PNG."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:39 of
msgid "**metadata**"
msgstr "**metadatos**"

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:11 of
msgid "Metadata in the PNG file as key-value pairs of bytes or latin-1 encodable strings. According to the PNG specification, keys must be shorter than 79 chars."
msgstr "Metadatos en el archivo PNG como pares clave-valor de bytes o cadenas codificables latin-1. Según la especificación PNG, las claves deben ser menores de 79 caracteres."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:16 of
msgid "The `PNG specification`_ defines some common keywords that may be used as appropriate:"
msgstr "La `especificación PNG`_ define algunas palabras clave comunes que pueden utilizarse como apropiado:"

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:19 of
msgid "Title: Short (one line) title or caption for image."
msgstr "Título: Título corto (una línea) o título para la imagen."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:20 of
msgid "Author: Name of image's creator."
msgstr "Autor: Nombre del creador de la imagen."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:21 of
msgid "Description: Description of image (possibly long)."
msgstr "Descripción: Descripción de la imagen (posiblemente larga)."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:22 of
msgid "Copyright: Copyright notice."
msgstr "Copia: Aviso de copyright."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:23 of
msgid "Creation Time: Time of original image creation (usually RFC 1123 format)."
msgstr "Tiempo de creación: Tiempo de creación de imagen original (normalmente formato RFC 1123)."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:25 of
msgid "Software: Software used to create the image."
msgstr "Software: Software usado para crear la imagen."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:26 of
msgid "Disclaimer: Legal disclaimer."
msgstr "Aviso de responsabilidad: Aviso legal."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:27 of
msgid "Warning: Warning of nature of content."
msgstr "Advertencia: Advertencia de la naturaleza del contenido."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:28 of
msgid "Source: Device used to create the image."
msgstr "Fuente: Dispositivo usado para crear la imagen."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:29 of
msgid "Comment: Miscellaneous comment; conversion from other image format."
msgstr "Comentario: Miscellaneous comment; conversion from other image format."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:32 of
msgid "Other keywords may be invented for other purposes."
msgstr "Otras palabras clave pueden ser inventadas para otros propósitos."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:34 of
msgid "If 'Software' is not given, an autogenerated value for Matplotlib will be used.  This can be removed by setting it to *None*."
msgstr "Si no se da 'Software', se utilizará un valor generado automáticamente para Matplotlib. Esto puede eliminarse configurándolo a *Ninguno*."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:37 of
msgid "For more details see the `PNG specification`_."
msgstr "Para más detalles vea la `especificación PNG`_."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:42 of
msgid "Keyword arguments passed to `PIL.Image.Image.save`."
msgstr "Argumentos de palabra clave pasados a `PIL.Image.save`."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:44 of
msgid "If the 'pnginfo' key is present, it completely overrides *metadata*, including the default 'Software' key."
msgstr "Si la clave 'pnginfo' está presente, anulará completamente los *metadata*, incluyendo la clave 'Software' predeterminada."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_argb:2 of
msgid "Get the image as ARGB `bytes`."
msgstr "Obtener la imagen como ARGB `bytes`."

#: matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb:2 of
msgid "Get the image as RGB `bytes`."
msgstr "Obtener la imagen como RGB `bytes`."

#: matplotlib.backends.backend_agg.RendererAgg:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"
msgstr "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"

#: matplotlib.backends.backend_agg.RendererAgg:2 of
msgid "The renderer handles all the drawing primitives using a graphics context instance that controls the colors/styles"
msgstr "El renderizador maneja todos los primitivos de dibujo usando una instancia de contexto de gráficos que controla los colores/estilos"

#: matplotlib.backends.backend_agg.RendererAgg.draw_mathtext:2 of
msgid "Draw mathtext using :mod:`matplotlib.mathtext`."
msgstr "Dibuja matemático usando :mod:`matplotlib.mathtext`."

#: matplotlib.backends.backend_agg.RendererAgg.draw_path:2 of
msgid "Draw a `~.path.Path` instance using the given affine transform."
msgstr "Dibuja una instancia `~.path.Path` usando la transforma affine dada."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:2 of
msgid "Draw the text instance."
msgstr "Dibuja la instancia de texto."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:8 of
msgid "**gc** : `.GraphicsContextBase`"
msgstr "**gc** : `.GraphicsContextBase`"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:7 of
msgid "GraphicsContextBase"
msgstr "Contexto gráfico base"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:8 of
msgid "The graphics context."
msgstr "El contexto gráfico."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:11 of
msgid "**x**"
msgstr "**x**"

#: of
msgid "float"
msgstr "float"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:11 of
msgid "The x location of the text in display coords."
msgstr "La posición x del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:14 of
msgid "**y**"
msgstr "**y**"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:14 of
msgid "The y location of the text baseline in display coords."
msgstr "La ubicación y de la línea de referencia del texto en las coordenadas de la pantalla."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:17 of
msgid "**s**"
msgstr "**s**"

#: of
msgid "str"
msgstr "str"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:17 of
msgid "The text string."
msgstr "La cadena de texto."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:20 of
msgid "**prop** : `matplotlib.font_manager.FontProperties`"
msgstr "**prop** : `matplotlib.font_manager.FontProperties`"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:19 of
msgid "matplotlib.font_manager.FontProperties"
msgstr "matplotlib.font_manager.FontProperties"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:20 of
msgid "The font properties."
msgstr "Las propiedades de la fuente."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:23 of
msgid "**angle**"
msgstr "**angle**"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:23 of
msgid "The rotation angle in degrees anti-clockwise."
msgstr "El ángulo de rotación en grados en sentido anti-reloj."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:34 of
msgid "**mtext** : `matplotlib.text.Text`"
msgstr "**mtext** : `matplotlib.text.Text`"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:33 of
msgid "matplotlib.text.Text"
msgstr "matplotlib.text.Text"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:26 of
msgid "The original text object to be rendered."
msgstr "El objeto de texto original a ser renderizado."

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:37
#: matplotlib.backends.backend_agg.RendererAgg.get_content_extents:15
#: matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized:15 of
msgid "Notes"
msgstr "Notes"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:38 of
msgid "**Note for backend implementers:**"
msgstr "**Nota para implementadores de backend:**"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:40 of
msgid "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py::"
msgstr "Cuando está intentando determinar si tiene configurado su cuadro de límite correcto (que es lo que permite que el diseño de texto/alineación funcione correctamente), ayuda a cambiar la línea en el texto. y::"

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:46 of
msgid "to if 1, and then the actual bounding box will be plotted along with your text."
msgstr "a si 1, y luego el cuadro de límite actual será trazado junto con su texto."

#: matplotlib.backends.backend_agg.RendererAgg.get_canvas_width_height:2 of
msgid "Return the canvas width and height in display coords."
msgstr "Devuelve el ancho y la altura del lienzo en las coordenadas de la pantalla."

#: matplotlib.backends.backend_agg.RendererAgg.get_content_extents:2
#: matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized:2 of
msgid "[*Deprecated*]"
msgstr "[*Deprecated*]"

#: matplotlib.backends.backend_agg.RendererAgg.get_content_extents:16
#: matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized:16 of
msgid "\\"
msgstr "\\"

#: matplotlib.backends.backend_agg.RendererAgg.get_text_width_height_descent:2
#: of
msgid "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string *s* with `.FontProperties` *prop*."
msgstr "Obtener la anchura, la altura y el descenso (offset de la parte inferior a la línea de referencia), en las coordenadas de visualización, de la cadena *s* con `.FontProperties` *prop*."

#: matplotlib.backends.backend_agg.RendererAgg.option_image_nocomposite:2 of
msgid "Return whether image composition by Matplotlib should be skipped."
msgstr "Devuelve si la composición de la imagen por Matplotlib debe ser omitida."

#: matplotlib.backends.backend_agg.RendererAgg.option_image_nocomposite:4 of
msgid "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return ``not rcParams[\"image.composite_image\"]``."
msgstr "Los backends Raster generalmente deben devolver False (dejando que el rasterizador de nivel C se ocupe de la composición de la imagen); los backends de vector generalmente deben devolver ``not rcParams[\"image.composite_image\"]``."

#: matplotlib.backends.backend_agg.RendererAgg.option_scale_image:2 of
msgid "Return whether arbitrary affine transformations in :meth:`draw_image` are supported (True for most vector backends)."
msgstr "Devuelve si las transformaciones afectadas arbitrarias en :meth:`draw_image` son soportadas (Verdadero para la mayoría de los servidores vectoriales)."

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:2 of
msgid "Convert points to display units."
msgstr "Convierte puntos para mostrar unidades."

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:4 of
msgid "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg).  Some imaging systems assume some value for pixels per inch::"
msgstr "Necesitas sobreescribir esta función (a menos que tu backend no tenga un dpi, p.ej. postscript o svg). Algunos sistemas de imágenes asumen algún valor para píxeles por pulgada::"

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:13 of
msgid "**points**"
msgstr "**puntos**"

#: of
msgid "float or array-like"
msgstr "flotante o matriz"

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:13 of
msgid "a float or a numpy array of float"
msgstr "un float o un array numpy de float"

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels of
msgid "Returns"
msgstr "Devuelve"

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:30 of
msgid "Points converted to pixels"
msgstr "Puntos convertidos en píxeles"

#: matplotlib.backends.backend_agg.RendererAgg.restore_region:2 of
msgid "Restore the saved region. If bbox (instance of BboxBase, or its extents) is given, only the region specified by the bbox will be restored. *xy* (a pair of floats) optionally specifies the new position (the LLC of the original region, not the LLC of the bbox) where the region will be restored."
msgstr "Restaurar la región guardada. Si se da un bbox (instancia de BboxBase, o su tamaño) sólo se restaurará la región especificada por el bbox. *xy* (un par de flotantes opcionalmente especifica la nueva posición (la LLC de la región original, no la LLC del bbox) donde se restablecerá la región."

#: matplotlib.backends.backend_agg.RendererAgg.start_filter:2 of
msgid "Start filtering. It simply create a new canvas (the old one is saved)."
msgstr "Empieza a filtrar. Simplemente crea un lienzo nuevo (el antiguo se guarda)."

#: matplotlib.backends.backend_agg.RendererAgg.stop_filter:2 of
msgid "Save the plot in the current canvas as a image and apply the *post_processing* function."
msgstr "Guarda la gráfica en el lienzo actual como una imagen y aplica la función *post_processing*."

#: matplotlib.backends.backend_agg.RendererAgg.stop_filter:12 of
msgid "def post_processing(image, dpi):"
msgstr "def post_processing(imagen, dpi):"

#: matplotlib.backends.backend_agg.RendererAgg.stop_filter:6 of
msgid "# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and has a depth of 4. ... # create a new_image (numpy array of 4 channels, size can be # different). The resulting image may have offsets from # lower-left corner of the original image return new_image, offset_x, offset_y"
msgstr "# ny, nx, depth = image.shape # imagen (arreglo numpy) tiene canales RGBA y tiene una profundidad de 4. ... # crear una new_image (array numpy de 4 canales, el tamaño puede ser # diferente). La imagen resultante puede tener desplazamientos desde # esquina inferior izquierda de la imagen original devolver new_image, offset_x, offset_y"

#: matplotlib.backends.backend_agg.RendererAgg.stop_filter:14 of
msgid "The saved renderer is restored and the returned image from post_processing is plotted (using draw_image) on it."
msgstr "El renderizador guardado es restaurado y la imagen devuelta desde post_processing es trazada (usando draw_image) en él."

