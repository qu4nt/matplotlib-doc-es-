msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-07-15 03:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/animation_api.po\n"
"X-Crowdin-File-ID: 1712\n"
"Language: es_ES\n"

#: ../../api/animation_api.rst:3
msgid "``matplotlib.animation``"
msgstr "``matplotlib.animation``"

#: ../../api/animation_api.rst:13
msgid "Table of Contents"
msgstr "Tabla de contenidos"

#: ../../api/animation_api.rst:16
msgid "Inheritance Diagrams"
msgstr "Diagramas de herencia"

#: ../../api/animation_api.rst:27
msgid "Animation"
msgstr "Animación"

#: ../../api/animation_api.rst:29
msgid "The easiest way to make a live animation in Matplotlib is to use one of the `Animation` classes."
msgstr "La forma más fácil de hacer una animación en vivo en Matplotlib es utilizar una de las clases `Animation`."

#: ../../api/animation_api.rst:264:<autosummary>:1
#: ../../api/animation_api.rst:39:<autosummary>:1
msgid ":py:obj:`Animation <matplotlib.animation.Animation>`"
msgstr ":py:obj:`Animación <matplotlib.animation.Animation>`"

#: ../../api/animation_api.rst:264:<autosummary>:1
#: ../../api/animation_api.rst:39:<autosummary>:1
msgid "A base class for Animations."
msgstr "Una clase base para las animaciones."

#: ../../api/animation_api.rst:39:<autosummary>:1
msgid ":py:obj:`FuncAnimation <matplotlib.animation.FuncAnimation>`"
msgstr ":py:obj:`FuncAnimation <matplotlib.animation.FuncAnimation>`"

#: ../../api/animation_api.rst:39:<autosummary>:1
msgid "Makes an animation by repeatedly calling a function *func*."
msgstr "Hace una animación llamando repetidamente a una función *func*."

#: ../../api/animation_api.rst:39:<autosummary>:1
msgid ":py:obj:`ArtistAnimation <matplotlib.animation.ArtistAnimation>`"
msgstr ":py:obj:`ArtistAnimation <matplotlib.animation.ArtistAnimation>`"

#: ../../api/animation_api.rst:39:<autosummary>:1
msgid "Animation using a fixed set of `.Artist` objects."
msgstr "Animación que utiliza un conjunto fijo de objetos `.Artist`."

#: ../../api/animation_api.rst:40
msgid "In both cases it is critical to keep a reference to the instance object.  The animation is advanced by a timer (typically from the host GUI framework) which the `Animation` object holds the only reference to.  If you do not hold a reference to the `Animation` object, it (and hence the timers) will be garbage collected which will stop the animation."
msgstr "En ambos casos es crítico mantener una referencia al objeto instancia.  La animación es adelantada por un temporizador (típicamente del framework de la GUI anfitriona) del cual el objeto `Animation` mantiene la única referencia.  Si no mantienes una referencia al objeto `Animation`, éste (y por lo tanto los temporizadores) serán recolectados por la basura, lo que detendrá la animación."

#: ../../api/animation_api.rst:47
msgid "To save an animation use `Animation.save`, `Animation.to_html5_video`, or `Animation.to_jshtml`."
msgstr "Para guardar una animación utiliza `Animation.save`, `Animation.to_html5_video`, o `Animation.to_jshtml`."

#: ../../api/animation_api.rst:50
msgid "See :ref:`ani_writer_classes` below for details about what movie formats are supported."
msgstr "Ver :ref:`ani_writer_classes` más abajo para conocer los formatos de película soportados."

#: ../../api/animation_api.rst:57
msgid "``FuncAnimation``"
msgstr "``FuncAnimation``"

#: ../../api/animation_api.rst:59
msgid "The inner workings of `FuncAnimation` is more-or-less::"
msgstr "El funcionamiento interno de `FuncAnimation` es más o menos::"

#: ../../api/animation_api.rst:66
msgid "with details to handle 'blitting' (to dramatically improve the live performance), to be non-blocking, not repeatedly start/stop the GUI event loop, handle repeats, multiple animated axes, and easily save the animation to a movie file."
msgstr "con detalles para manejar el 'blitting' (para mejorar drásticamente el rendimiento en vivo), ser no bloqueante, no iniciar/detener repetidamente el bucle de eventos de la GUI, manejar repeticiones, múltiples ejes animados, y guardar fácilmente la animación en un archivo de película."

#: ../../api/animation_api.rst:71
msgid "'Blitting' is a `standard technique <https://en.wikipedia.org/wiki/Bit_blit>`__ in computer graphics.  The general gist is to take an existing bit map (in our case a mostly rasterized figure) and then 'blit' one more artist on top.  Thus, by managing a saved 'clean' bitmap, we can only re-draw the few artists that are changing at each frame and possibly save significant amounts of time.  When we use blitting (by passing ``blit=True``), the core loop of `FuncAnimation` gets a bit more complicated::"
msgstr "El 'Blitting' es una técnica estándar <https://en.wikipedia.org/wiki/Bit_blit>`__ en gráficos por ordenador. La esencia general es tomar un mapa de bits existente (en nuestro caso una figura mayormente rasterizada) y luego 'blit' un artista más en la parte superior.  Así, al manejar un mapa de bits 'limpio' guardado, sólo podemos volver a dibujar los pocos artistas que cambian en cada fotograma y, posiblemente, ahorrar cantidades significativas de tiempo.  Cuando usamos el blitting (pasando ``blit=True``), el bucle central de `FuncAnimation` se complica un poco::"

#: ../../api/animation_api.rst:102
msgid "This is of course leaving out many details (such as updating the background when the figure is resized or fully re-drawn).  However, this hopefully minimalist example gives a sense of how ``init_func`` and ``func`` are used inside of `FuncAnimation` and the theory of how 'blitting' works."
msgstr "Por supuesto, esto deja fuera muchos detalles (como la actualización del fondo cuando la figura se redimensiona o se redibuja completamente).  Sin embargo, este ejemplo, que espero sea minimalista, da una idea de cómo se usan ``init_func`` y ``func`` dentro de `FuncAnimation` y la teoría de cómo funciona el 'blitting'."

#: ../../api/animation_api.rst:108
msgid "The expected signature on ``func`` and ``init_func`` is very simple to keep `FuncAnimation` out of your book keeping and plotting logic, but this means that the callable objects you pass in must know what artists they should be working on.  There are several approaches to handling this, of varying complexity and encapsulation.  The simplest approach, which works quite well in the case of a script, is to define the artist at a global scope and let Python sort things out.  For example ::"
msgstr "La firma esperada en ``func`` y ``init_func`` es muy simple para mantener `FuncAnimation` fuera de su lógica de contabilidad y trazado, pero esto significa que los objetos llamables que se pasan deben saber en qué artistas deben trabajar. Hay varios enfoques para manejar esto, de diversa complejidad y encapsulación. El enfoque más simple, que funciona bastante bien en el caso de un script, es definir el artista en un ámbito global y dejar que Python lo resuelva. Por ejemplo ::"

#: ../../api/animation_api.rst:139
msgid "The second method is to use `functools.partial` to 'bind' artists to function.  A third method is to use closures to build up the required artists and functions.  A fourth method is to create a class."
msgstr "El segundo método consiste en utilizar `functools.partial` para \"enlazar\" artists a la función.  Un tercer método es utilizar cierres para construir los artistas y funciones necesarios.  Un cuarto método es crear una clase."

#: ../../api/animation_api.rst:144 ../../api/animation_api.rst:163
#: ../../api/animation_api.rst:243
msgid "Examples"
msgstr "Ejemplos"

#: ../../api/animation_api.rst:160
msgid "``ArtistAnimation``"
msgstr "``ArtistAnimation``"

#: ../../api/animation_api.rst:171
msgid "Writer Classes"
msgstr "Clases de escritores"

#: ../../api/animation_api.rst:173
msgid "The provided writers fall into a few broad categories."
msgstr "Los escritores proporcionados se dividen en algunas categorías generales."

#: ../../api/animation_api.rst:175
msgid "The Pillow writer relies on the Pillow library to write the animation, keeping all data in memory."
msgstr "El escritor Pillow depende de la biblioteca Pillow para escribir la animación, manteniendo todos los datos en memoria."

#: ../../api/animation_api.rst:183:<autosummary>:1
msgid ":py:obj:`PillowWriter <matplotlib.animation.PillowWriter>`"
msgstr ":py:obj:`PillowWriter <matplotlib.animation.PillowWriter>`"

#: ../../api/animation_api.rst:184
msgid "The HTML writer generates JavaScript-based animations."
msgstr "El escritor de HTML genera animaciones basadas en JavaScript."

#: ../../api/animation_api.rst:191:<autosummary>:1
msgid ":py:obj:`HTMLWriter <matplotlib.animation.HTMLWriter>`"
msgstr ":py:obj:`HTMLWriter <matplotlib.animation.HTMLWriter>`"

#: ../../api/animation_api.rst:191:<autosummary>:1
msgid "Writer for JavaScript-based HTML movies."
msgstr "Escritor para películas HTML basadas en JavaScript."

#: ../../api/animation_api.rst:192
msgid "The pipe-based writers stream the captured frames over a pipe to an external process.  The pipe-based variants tend to be more performant, but may not work on all systems."
msgstr "Los escritores basados en tuberías transmiten los fotogramas capturados a través de una tubería a un proceso externo.  Las variantes basadas en tuberías tienden a ser más performantes, pero pueden no funcionar en todos los sistemas."

#: ../../api/animation_api.rst:202:<autosummary>:1
msgid ":py:obj:`FFMpegWriter <matplotlib.animation.FFMpegWriter>`"
msgstr ":py:obj:`FFMpegWriter <matplotlib.animation.FFMpegWriter>`"

#: ../../api/animation_api.rst:202:<autosummary>:1
msgid "Pipe-based ffmpeg writer."
msgstr "Escritor ffmpeg basado en tuberías."

#: ../../api/animation_api.rst:202:<autosummary>:1
msgid ":py:obj:`ImageMagickWriter <matplotlib.animation.ImageMagickWriter>`"
msgstr ":py:obj:`ImageMagickWriter <matplotlib.animation.ImageMagickWriter>`"

#: ../../api/animation_api.rst:202:<autosummary>:1
msgid "Pipe-based animated gif."
msgstr "Gif animado basado en tuberías."

#: ../../api/animation_api.rst:203
msgid "The file-based writers save temporary files for each frame which are stitched into a single file at the end.  Although slower, these writers can be easier to debug."
msgstr "Los escritores basados en archivos guardan archivos temporales para cada fotograma que se cosen en un solo archivo al final.  Aunque son más lentos, estos escritores pueden ser más fáciles de depurar."

#: ../../api/animation_api.rst:213:<autosummary>:1
msgid ":py:obj:`FFMpegFileWriter <matplotlib.animation.FFMpegFileWriter>`"
msgstr ":py:obj:`FFMpegFileWriter <matplotlib.animation.FFMpegFileWriter>`"

#: ../../api/animation_api.rst:213:<autosummary>:1
msgid "File-based ffmpeg writer."
msgstr "Escritor de ffmpeg basado en archivos."

#: ../../api/animation_api.rst:213:<autosummary>:1
msgid ":py:obj:`ImageMagickFileWriter <matplotlib.animation.ImageMagickFileWriter>`"
msgstr ":py:obj:`ImageMagickFileWriter <matplotlib.animation.ImageMagickFileWriter>`"

#: ../../api/animation_api.rst:213:<autosummary>:1
msgid "File-based animated gif writer."
msgstr "Escritor de gifs animados basado en archivos."

#: ../../api/animation_api.rst:214
msgid "Fundamentally, a `MovieWriter` provides a way to grab sequential frames from the same underlying `~matplotlib.figure.Figure` object.  The base class `MovieWriter` implements 3 methods and a context manager.  The only difference between the pipe-based and file-based writers is in the arguments to their respective ``setup`` methods."
msgstr "Fundamentalmente, un `MovieWriter` proporciona una forma de coger fotogramas secuenciales del mismo objeto subyacente `~matplotlib.figure.Figure`.  La clase base `MovieWriter` implementa 3 métodos y un gestor de contexto.  La única diferencia entre los escritores basados en tuberías y los basados en archivos está en los argumentos de sus respectivos métodos de ``setup``."

#: ../../api/animation_api.rst:220
msgid "The ``setup()`` method is used to prepare the writer (possibly opening a pipe), successive calls to ``grab_frame()`` capture a single frame at a time and ``finish()`` finalizes the movie and writes the output file to disk.  For example ::"
msgstr "El método ``setup()`` se utiliza para preparar al escritor (posiblemente abriendo una tubería), las sucesivas llamadas a ``grab_frame()`` capturan solo un fotograma a la vez y ``finish()`` finaliza la película y escribe el archivo de salida en el disco.  Por ejemplo ::"

#: ../../api/animation_api.rst:232
msgid "If using the writer classes directly (not through `Animation.save`), it is strongly encouraged to use the `~MovieWriter.saving` context manager ::"
msgstr "Si se utilizan las clases de escritor directamente (no a través de `Animation.save`), se recomienda encarecidamente utilizar el gestor de contexto `~MovieWriter.saving` ::"

#: ../../api/animation_api.rst:240
msgid "to ensures that setup and cleanup are performed as necessary."
msgstr "para asegurar que la configuración y la limpieza se realicen según sea necesario."

#: ../../api/animation_api.rst:253
msgid "Helper Classes"
msgstr "Clases de ayuda"

#: ../../api/animation_api.rst:256
msgid "Animation Base Classes"
msgstr "Clases base de animación"

#: ../../api/animation_api.rst:264:<autosummary>:1
msgid ":py:obj:`TimedAnimation <matplotlib.animation.TimedAnimation>`"
msgstr ":py:obj:`TimedAnimation <matplotlib.animation.TimedAnimation>`"

#: ../../api/animation_api.rst:264:<autosummary>:1
msgid "`Animation` subclass for time-based animation."
msgstr "Subclase `Animation` para la animación basada en el tiempo."

#: ../../api/animation_api.rst:266
msgid "Writer Registry"
msgstr "Registro del escritor"

#: ../../api/animation_api.rst:268
msgid "A module-level registry is provided to map between the name of the writer and the class to allow a string to be passed to `Animation.save` instead of a writer instance."
msgstr "Se proporciona un registro a nivel de módulo para mapear entre el nombre del escritor y la clase para permitir que se pase una cadena a `Animation.save` en lugar de una instancia del escritor."

#: ../../api/animation_api.rst:277:<autosummary>:1
msgid ":py:obj:`MovieWriterRegistry <matplotlib.animation.MovieWriterRegistry>`"
msgstr ":py:obj:`MovieWriterRegistry <matplotlib.animation.MovieWriterRegistry>`"

#: ../../api/animation_api.rst:277:<autosummary>:1
msgid "Registry of available writer classes by human readable name."
msgstr "Registro de clases de escritores disponibles por nombre legible para humanos."

#: ../../api/animation_api.rst:279
msgid "Writer Base Classes"
msgstr "Clases base del escritor"

#: ../../api/animation_api.rst:281
msgid "To reduce code duplication base classes"
msgstr "Para reducir la duplicación de código las clases base"

#: ../../api/animation_api.rst:290:<autosummary>:1
msgid ":py:obj:`AbstractMovieWriter <matplotlib.animation.AbstractMovieWriter>`"
msgstr ":py:obj:`AbstractMovieWriter <matplotlib.animation.AbstractMovieWriter>`"

#: ../../api/animation_api.rst:290:<autosummary>:1
msgid "Abstract base class for writing movies."
msgstr "Clase base abstracta para escribir películas."

#: ../../api/animation_api.rst:290:<autosummary>:1
msgid ":py:obj:`MovieWriter <matplotlib.animation.MovieWriter>`"
msgstr ":py:obj:`MovieWriter <matplotlib.animation.MovieWriter>`"

#: ../../api/animation_api.rst:290:<autosummary>:1
msgid "Base class for writing movies."
msgstr "Clase base para escribir películas."

#: ../../api/animation_api.rst:290:<autosummary>:1
msgid ":py:obj:`FileMovieWriter <matplotlib.animation.FileMovieWriter>`"
msgstr ":py:obj:`FileMovieWriter <matplotlib.animation.FileMovieWriter>`"

#: ../../api/animation_api.rst:290:<autosummary>:1
msgid "`MovieWriter` for writing to individual files and stitching at the end."
msgstr "`MovieWriter` para escribir en archivos individuales y coser al final."

#: ../../api/animation_api.rst:291
msgid "and mixins"
msgstr "y los mixins"

#: ../../api/animation_api.rst:299:<autosummary>:1
msgid ":py:obj:`FFMpegBase <matplotlib.animation.FFMpegBase>`"
msgstr ":py:obj:`FFMpegBase <matplotlib.animation.FFMpegBase>`"

#: ../../api/animation_api.rst:299:<autosummary>:1
msgid "Mixin class for FFMpeg output."
msgstr "Clase mixin para la salida de FFMpeg."

#: ../../api/animation_api.rst:299:<autosummary>:1
msgid ":py:obj:`ImageMagickBase <matplotlib.animation.ImageMagickBase>`"
msgstr ":py:obj:`ImageMagickBase <matplotlib.animation.ImageMagickBase>`"

#: ../../api/animation_api.rst:299:<autosummary>:1
msgid "Mixin class for ImageMagick output."
msgstr "Clase mixin para la salida de ImageMagick."

#: ../../api/animation_api.rst:300
msgid "are provided."
msgstr "se proporcionan."

#: ../../api/animation_api.rst:302
msgid "See the source code for how to easily implement new `MovieWriter` classes."
msgstr "Vea el código fuente para saber cómo implementar fácilmente las nuevas clases `MovieWriter`."

