msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-11-02 14:10\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/collections_api.po\n"
"X-Crowdin-File-ID: 1766\n"
"Language: es_ES\n"

#: ../../api/collections_api.rst:3
msgid "``matplotlib.collections``"
msgstr "``matplotlib.collections``"

#: matplotlib.collections:1 of
msgid "Classes for the efficient drawing of large collections of objects that share most properties, e.g., a large number of line segments or polygons."
msgstr "Clases para el dibujo eficiente de grandes colecciones de objetos que comparten la mayoría de propiedades, por ejemplo, un gran número de segmentos de línea o polígonos."

#: matplotlib.collections:5 of
msgid "The classes are not meant to be as flexible as their single element counterparts (e.g., you may not be able to select all line styles) but they are meant to be fast for common use cases (e.g., a large set of solid line segments)."
msgstr "Las clases no están pensadas para ser tan flexibles como sus contrapartes de elementos individuales (p. ej. puede que no sea capaz de seleccionar todos los estilos de línea, pero están destinados a ser rápidos para casos de uso común (e. ., un gran conjunto de segmentos de línea sólida)."

#: matplotlib.collections.AsteriskPolygonCollection:1
#: matplotlib.collections.StarPolygonCollection:1 of
msgid "Bases: :py:class:`matplotlib.collections.RegularPolyCollection`"
msgstr "Bases: :py:class:`matplotlib.collections.RegularPolyCollection`"

#: matplotlib.collections.AsteriskPolygonCollection:2 of
msgid "Draw a collection of regular asterisks with *numsides* points."
msgstr "Dibuja una colección de asteriscos regulares con puntos *numéricas*."

#: matplotlib.artist.Artist.add_callback matplotlib.artist.Artist.findobj
#: matplotlib.artist.Artist.get_cursor_data
#: matplotlib.artist.Artist.get_tightbbox
#: matplotlib.artist.Artist.set_agg_filter
#: matplotlib.artist.Artist.set_animated matplotlib.artist.Artist.set_clip_box
#: matplotlib.artist.Artist.set_clip_on matplotlib.artist.Artist.set_clip_path
#: matplotlib.artist.Artist.set_figure matplotlib.artist.Artist.set_gid
#: matplotlib.artist.Artist.set_in_layout matplotlib.artist.Artist.set_label
#: matplotlib.artist.Artist.set_path_effects
#: matplotlib.artist.Artist.set_picker matplotlib.artist.Artist.set_rasterized
#: matplotlib.artist.Artist.set_sketch_params matplotlib.artist.Artist.set_snap
#: matplotlib.artist.Artist.set_transform matplotlib.artist.Artist.set_url
#: matplotlib.artist.Artist.set_visible matplotlib.artist.Artist.set_zorder
#: matplotlib.artist.Artist.update matplotlib.cm.ScalarMappable.set_array
#: matplotlib.cm.ScalarMappable.set_clim matplotlib.cm.ScalarMappable.set_cmap
#: matplotlib.cm.ScalarMappable.set_norm
#: matplotlib.collections.AsteriskPolygonCollection
#: matplotlib.collections.BrokenBarHCollection
#: matplotlib.collections.CircleCollection matplotlib.collections.Collection
#: matplotlib.collections.Collection.draw
#: matplotlib.collections.Collection.set_alpha
#: matplotlib.collections.Collection.set_antialiased
#: matplotlib.collections.Collection.set_capstyle
#: matplotlib.collections.Collection.set_color
#: matplotlib.collections.Collection.set_edgecolor
#: matplotlib.collections.Collection.set_facecolor
#: matplotlib.collections.Collection.set_hatch
#: matplotlib.collections.Collection.set_joinstyle
#: matplotlib.collections.Collection.set_linestyle
#: matplotlib.collections.Collection.set_linewidth
#: matplotlib.collections.Collection.set_offset_transform
#: matplotlib.collections.Collection.set_offsets
#: matplotlib.collections.Collection.set_pickradius
#: matplotlib.collections.Collection.set_urls
#: matplotlib.collections.EllipseCollection
#: matplotlib.collections.EllipseCollection.draw
#: matplotlib.collections.EventCollection
#: matplotlib.collections.EventCollection.set_orientation
#: matplotlib.collections.LineCollection
#: matplotlib.collections.LineCollection.set_color
#: matplotlib.collections.PathCollection
#: matplotlib.collections.PathCollection.legend_elements
#: matplotlib.collections.PolyCollection
#: matplotlib.collections.PolyCollection.set_verts
#: matplotlib.collections.QuadMesh matplotlib.collections.QuadMesh.draw
#: matplotlib.collections.QuadMesh.get_cursor_data
#: matplotlib.collections.QuadMesh.set_array
#: matplotlib.collections.RegularPolyCollection
#: matplotlib.collections.RegularPolyCollection.draw
#: matplotlib.collections.StarPolygonCollection matplotlib.collections.TriMesh
#: matplotlib.collections.TriMesh.draw
#: matplotlib.collections._CollectionWithSizes.draw
#: matplotlib.collections._CollectionWithSizes.set_sizes of
msgid "Parameters"
msgstr "Parámetros"

#: matplotlib.collections.AsteriskPolygonCollection:29
#: matplotlib.collections.RegularPolyCollection:29
#: matplotlib.collections.StarPolygonCollection:29 of
msgid "**numsides**"
msgstr "**numsides**"

#: matplotlib.artist.Artist.add_callback:26 of
msgid "int"
msgstr "int"

#: matplotlib.collections.AsteriskPolygonCollection:29
#: matplotlib.collections.RegularPolyCollection:29
#: matplotlib.collections.StarPolygonCollection:29 of
msgid "The number of sides of the polygon."
msgstr "El número de lados del polígono."

#: matplotlib.collections.AsteriskPolygonCollection:32
#: matplotlib.collections.RegularPolyCollection:32
#: matplotlib.collections.StarPolygonCollection:32 of
msgid "**rotation**"
msgstr "**rotation**"

#: matplotlib.artist.AsteriskPolygonCollection.set:39
#: matplotlib.artist.AsteriskPolygonCollection.set:48
#: matplotlib.artist.BrokenBarHCollection.set:40
#: matplotlib.artist.BrokenBarHCollection.set:51
#: matplotlib.artist.CircleCollection.set:39
#: matplotlib.artist.CircleCollection.set:48
#: matplotlib.artist.Collection.set:39 matplotlib.artist.Collection.set:47
#: matplotlib.artist.EllipseCollection.set:39
#: matplotlib.artist.EllipseCollection.set:47
#: matplotlib.artist.EventCollection.set:44
#: matplotlib.artist.EventCollection.set:55
#: matplotlib.artist.LineCollection.set:41
#: matplotlib.artist.LineCollection.set:51
#: matplotlib.artist.PatchCollection.set:40
#: matplotlib.artist.PatchCollection.set:48
#: matplotlib.artist.PathCollection.set:40
#: matplotlib.artist.PathCollection.set:49
#: matplotlib.artist.PolyCollection.set:40
#: matplotlib.artist.PolyCollection.set:51 matplotlib.artist.QuadMesh.set:39
#: matplotlib.artist.QuadMesh.set:47
#: matplotlib.artist.RegularPolyCollection.set:39
#: matplotlib.artist.RegularPolyCollection.set:48
#: matplotlib.artist.StarPolygonCollection.set:39
#: matplotlib.artist.StarPolygonCollection.set:48
#: matplotlib.artist.TriMesh.set:39 matplotlib.artist.TriMesh.set:47 of
msgid "float"
msgstr "de punto flotante (float)"

#: matplotlib.collections.AsteriskPolygonCollection:32
#: matplotlib.collections.RegularPolyCollection:32
#: matplotlib.collections.StarPolygonCollection:32 of
msgid "The rotation of the polygon in radians."
msgstr "La rotación del polígono en radianes."

#: matplotlib.collections.AsteriskPolygonCollection:35
#: matplotlib.collections.CircleCollection:29
#: matplotlib.collections.PathCollection:34
#: matplotlib.collections.PolyCollection:17
#: matplotlib.collections.RegularPolyCollection:35
#: matplotlib.collections.StarPolygonCollection:35
#: matplotlib.collections._CollectionWithSizes.set_sizes:9 of
msgid "**sizes**"
msgstr "**tamaños**"

#: of
msgid "tuple of float"
msgstr "tupla de flotante"

#: matplotlib.collections.AsteriskPolygonCollection:35
#: matplotlib.collections.RegularPolyCollection:35
#: matplotlib.collections.StarPolygonCollection:35 of
msgid "The area of the circle circumscribing the polygon in points^2."
msgstr "El área del círculo que rodea el polígono en puntos^2."

#: matplotlib.collections.AsteriskPolygonCollection:48
#: matplotlib.collections.BrokenBarHCollection:49
#: matplotlib.collections.CircleCollection:45
#: matplotlib.collections.EllipseCollection:60
#: matplotlib.collections.EventCollection:75
#: matplotlib.collections.LineCollection:84
#: matplotlib.collections.PathCollection:50
#: matplotlib.collections.PathCollection.legend_elements:57
#: matplotlib.collections.PolyCollection:37
#: matplotlib.collections.RegularPolyCollection:48
#: matplotlib.collections.StarPolygonCollection:48 of
msgid "**\\*\\*kwargs**"
msgstr "**\\*\\*kwargs**"

#: matplotlib.collections.AsteriskPolygonCollection:38
#: matplotlib.collections.BrokenBarHCollection:36
#: matplotlib.collections.CircleCollection:32
#: matplotlib.collections.LineCollection:71
#: matplotlib.collections.PathCollection:37
#: matplotlib.collections.PolyCollection:24
#: matplotlib.collections.RegularPolyCollection:38
#: matplotlib.collections.StarPolygonCollection:38 of
msgid "Forwarded to `.Collection`."
msgstr "Reenviado a `.Collection`."

#: matplotlib.collections.AsteriskPolygonCollection:51
#: matplotlib.collections.AsteriskPolygonCollection.sticky_edges:30
#: matplotlib.collections.BrokenBarHCollection.sticky_edges:30
#: matplotlib.collections.CircleCollection.sticky_edges:30
#: matplotlib.collections.Collection.sticky_edges:30
#: matplotlib.collections.EllipseCollection.sticky_edges:30
#: matplotlib.collections.EventCollection:78
#: matplotlib.collections.EventCollection.sticky_edges:30
#: matplotlib.collections.LineCollection.sticky_edges:30
#: matplotlib.collections.PatchCollection.sticky_edges:30
#: matplotlib.collections.PathCollection.sticky_edges:30
#: matplotlib.collections.PolyCollection.sticky_edges:30
#: matplotlib.collections.QuadMesh.sticky_edges:30
#: matplotlib.collections.RegularPolyCollection:51
#: matplotlib.collections.RegularPolyCollection.sticky_edges:30
#: matplotlib.collections.StarPolygonCollection:51
#: matplotlib.collections.StarPolygonCollection.sticky_edges:30
#: matplotlib.collections.TriMesh.sticky_edges:30 of
msgid "Examples"
msgstr "Ejemplos"

#: matplotlib.collections.AsteriskPolygonCollection:52
#: matplotlib.collections.RegularPolyCollection:52
#: matplotlib.collections.StarPolygonCollection:52 of
msgid "See :doc:`/gallery/event_handling/lasso_demo` for a complete example::"
msgstr "Vea :doc:`/gallery/event_handling/lasso_demo` para un ejemplo completo::"

#: matplotlib.artist.Artist.add_callback:2 of
msgid "Add a callback function that will be called whenever one of the `.Artist`'s properties changes."
msgstr "Añade una función callback que será llamada cada vez que cambie una de las propiedades de `.Artist`."

#: matplotlib.artist.Artist.add_callback:14 of
msgid "**func**"
msgstr "**func**"

#: of
msgid "callable"
msgstr "llamable"

#: matplotlib.artist.Artist.add_callback:9 of
msgid "The callback function. It must have the signature::"
msgstr "La función callback. Debe tener la firma::"

#: matplotlib.artist.Artist.add_callback:13 of
msgid "where *artist* is the calling `.Artist`. Return values may exist but are ignored."
msgstr "donde *artist* es la llamada `.Artist`. Los valores de retorno pueden existir pero son ignorados."

#: matplotlib.artist.Artist.add_callback matplotlib.artist.Artist.findobj
#: matplotlib.artist.Artist.get_sketch_params
#: matplotlib.artist.Artist.get_tightbbox
#: matplotlib.collections.LineCollection.get_segments
#: matplotlib.collections.PathCollection.legend_elements
#: matplotlib.collections._CollectionWithSizes.get_sizes of
msgid "Returns"
msgstr "Devuelve"

#: matplotlib.artist.Artist.add_callback:19 of
msgid "The observer id associated with the callback. This id can be used for removing the callback with `.remove_callback` later."
msgstr "El id del observador asociado con el callback. Este id puede utilizarse para eliminar el callback con `.remove_callback` más adelante."

#: matplotlib.artist.Artist.add_callback:31
#: matplotlib.artist.Artist.pchanged:19 of
msgid ":obj:`remove_callback`"
msgstr ":obj:`remove_callback`"

#: matplotlib.cm.ScalarMappable.autoscale:2 of
msgid "Autoscale the scalar limits on the norm instance using the current array"
msgstr "Autoescalar los límites escalares en la instancia de la norma usando la matriz actual"

#: matplotlib.cm.ScalarMappable.autoscale_None:2 of
msgid "Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None"
msgstr "Autoescalar los límites escalares en la instancia de la norma usando la matriz actual, cambiando sólo los límites que no son ninguno"

#: matplotlib.collections.AsteriskPolygonCollection.axes:2
#: matplotlib.collections.BrokenBarHCollection.axes:2
#: matplotlib.collections.CircleCollection.axes:2
#: matplotlib.collections.Collection.axes:2
#: matplotlib.collections.EllipseCollection.axes:2
#: matplotlib.collections.EventCollection.axes:2
#: matplotlib.collections.LineCollection.axes:2
#: matplotlib.collections.PatchCollection.axes:2
#: matplotlib.collections.PathCollection.axes:2
#: matplotlib.collections.PolyCollection.axes:2
#: matplotlib.collections.QuadMesh.axes:2
#: matplotlib.collections.RegularPolyCollection.axes:2
#: matplotlib.collections.StarPolygonCollection.axes:2
#: matplotlib.collections.TriMesh.axes:2 of
msgid "The `~.axes.Axes` instance the artist resides in, or *None*."
msgstr "La instancia `~.axes.Axes` en la que reside el artist, o *Ninguno*."

#: matplotlib.cm.ScalarMappable.changed:2 of
msgid "Call this whenever the mappable is changed to notify all the callbackSM listeners to the 'changed' signal."
msgstr "Llame esto cada vez que se cambie el mapeo para notificar a todos los oyentes de callbackSM a la señal 'cambiado'."

#: ../../docstring matplotlib.collections.AsteriskPolygonCollection.colorbar:2
#: matplotlib.collections.BrokenBarHCollection.colorbar:2
#: matplotlib.collections.CircleCollection.colorbar:2
#: matplotlib.collections.Collection.colorbar:2
#: matplotlib.collections.EllipseCollection.colorbar:2
#: matplotlib.collections.EventCollection.colorbar:2
#: matplotlib.collections.LineCollection.colorbar:2
#: matplotlib.collections.PatchCollection.colorbar:2
#: matplotlib.collections.PathCollection.colorbar:2
#: matplotlib.collections.PolyCollection.colorbar:2
#: matplotlib.collections.QuadMesh.colorbar:2
#: matplotlib.collections.RegularPolyCollection.colorbar:2
#: matplotlib.collections.StarPolygonCollection.colorbar:2
#: matplotlib.collections.TriMesh.colorbar:2 of
msgid "The last colorbar associated with this ScalarMappable. May be None."
msgstr "La última barra de colores asociada con este ScalarMappable. Puede no ser ninguna."

#: matplotlib.collections.Collection.contains:2 of
msgid "Test whether the mouse event occurred in the collection."
msgstr "Evalúa si el evento del ratón ocurrió en la colección."

#: matplotlib.collections.Collection.contains:4 of
msgid "Returns ``bool, dict(ind=itemlist)``, where every item in itemlist contains the event."
msgstr "Devuelve ``bool, dict(ind=itemlist)``, donde cada elemento en la lista de elementos contiene el evento."

#: matplotlib.artist.Artist.convert_xunits:2 of
msgid "Convert *x* using the unit type of the xaxis."
msgstr "Convierte *x* usando el tipo de unidad del xaxis."

#: matplotlib.artist.Artist.convert_xunits:4 of
msgid "If the artist is not in contained in an Axes or if the xaxis does not have units, *x* itself is returned."
msgstr "Si el artista no está contenido en un hacha o si el xaxis no tiene unidades, *x* es devuelto."

#: matplotlib.artist.Artist.convert_yunits:2 of
msgid "Convert *y* using the unit type of the yaxis."
msgstr "Convierte *y* usando el tipo de unidad del yaxis."

#: matplotlib.artist.Artist.convert_yunits:4 of
msgid "If the artist is not in contained in an Axes or if the yaxis does not have units, *y* itself is returned."
msgstr "Si el artista no está contenido en un hacha o si el eje no tiene unidades, *y* en sí mismo es devuelto."

#: matplotlib.collections.Collection.draw:2
#: matplotlib.collections.EllipseCollection.draw:2
#: matplotlib.collections.QuadMesh.draw:2
#: matplotlib.collections.RegularPolyCollection.draw:2
#: matplotlib.collections.TriMesh.draw:2
#: matplotlib.collections._CollectionWithSizes.draw:2 of
msgid "Draw the Artist (and its children) using the given renderer."
msgstr "Dibuja el Artist (y sus hijos) usando el renderizador dado."

#: matplotlib.collections.Collection.draw:4
#: matplotlib.collections.EllipseCollection.draw:4
#: matplotlib.collections.QuadMesh.draw:4
#: matplotlib.collections.RegularPolyCollection.draw:4
#: matplotlib.collections.TriMesh.draw:4
#: matplotlib.collections._CollectionWithSizes.draw:4 of
msgid "This has no effect if the artist is not visible (`.Artist.get_visible` returns False)."
msgstr "Esto no tiene efecto si el artist no es visible (`.Artist.get_visible` devuelve False)."

#: matplotlib.collections.Collection.draw:18
#: matplotlib.collections.EllipseCollection.draw:18
#: matplotlib.collections.QuadMesh.draw:18
#: matplotlib.collections.RegularPolyCollection.draw:18
#: matplotlib.collections.TriMesh.draw:18
#: matplotlib.collections._CollectionWithSizes.draw:18 of
msgid "**renderer** : `.RendererBase` subclass."
msgstr "**renderer** : `.RendererBase` subclase."

#: matplotlib.collections.Collection.draw:17
#: matplotlib.collections.EllipseCollection.draw:17
#: matplotlib.collections.QuadMesh.draw:17
#: matplotlib.collections.RegularPolyCollection.draw:17
#: matplotlib.collections.TriMesh.draw:17
#: matplotlib.collections._CollectionWithSizes.draw:17 of
msgid "RendererBase subclass."
msgstr "Subclase RendererBase."

#: matplotlib.artist.Artist.set_clip_path:24
#: matplotlib.cm.ScalarMappable.set_norm:19
#: matplotlib.collections.Collection.draw:21
#: matplotlib.collections.Collection.set_urls:19
#: matplotlib.collections.EllipseCollection.draw:21
#: matplotlib.collections.QuadMesh:37
#: matplotlib.collections.QuadMesh.convert_mesh_to_paths:15
#: matplotlib.collections.QuadMesh.convert_mesh_to_triangles:15
#: matplotlib.collections.QuadMesh.draw:21
#: matplotlib.collections.RegularPolyCollection.draw:21
#: matplotlib.collections.TriMesh.draw:21
#: matplotlib.collections._CollectionWithSizes.draw:21 of
msgid "Notes"
msgstr "Notes"

#: matplotlib.collections.Collection.draw:22
#: matplotlib.collections.EllipseCollection.draw:22
#: matplotlib.collections.QuadMesh.draw:22
#: matplotlib.collections.RegularPolyCollection.draw:22
#: matplotlib.collections.TriMesh.draw:22
#: matplotlib.collections._CollectionWithSizes.draw:22 of
msgid "This method is overridden in the Artist subclasses."
msgstr "Este método se sobrescribe en las subclases de Artist."

#: matplotlib.artist.Artist.findobj:2 of
msgid "Find artist objects."
msgstr "Buscar objetos de artista."

#: matplotlib.artist.Artist.findobj:4 of
msgid "Recursively find all `.Artist` instances contained in the artist."
msgstr "Encontrar recursivamente todas las instancias `.Artist` contenidas en el artista."

#: matplotlib.artist.Artist.findobj:16 of
msgid "**match**"
msgstr "**coincidencia**"

#: matplotlib.artist.Artist.findobj:9 of
msgid "A filter criterion for the matches. This can be"
msgstr "Un criterio de filtro para las partidas. Esto puede ser"

#: matplotlib.artist.Artist.findobj:11 of
msgid "*None*: Return all objects contained in artist."
msgstr "*Ninguno*: Devuelve todos los objetos contenidos en el artista."

#: matplotlib.artist.Artist.findobj:12 of
msgid "A function with signature ``def match(artist: Artist) -> bool``. The result will only contain artists for which the function returns *True*."
msgstr "Una función con la firma ``def match(artista: Artist) -> bool``. El resultado sólo contendrá artistas para los cuales la función devuelva *True*."

#: matplotlib.artist.Artist.findobj:15 of
msgid "A class instance: e.g., `.Line2D`. The result will only contain artists of this class or its subclasses (``isinstance`` check)."
msgstr "Una instancia de clase: p. ej., `.Line2D`. El resultado sólo contendrá artistas de esta clase o sus subclases (comprobación ``isinstance``)."

#: matplotlib.artist.Artist.findobj:19 of
msgid "**include_self**"
msgstr "**incluye_a sí mismo**"

#: matplotlib.artist.AsteriskPolygonCollection.set:14
#: matplotlib.artist.AsteriskPolygonCollection.set:20
#: matplotlib.artist.AsteriskPolygonCollection.set:29
#: matplotlib.artist.AsteriskPolygonCollection.set:40
#: matplotlib.artist.AsteriskPolygonCollection.set:47
#: matplotlib.artist.BrokenBarHCollection.set:14
#: matplotlib.artist.BrokenBarHCollection.set:20
#: matplotlib.artist.BrokenBarHCollection.set:29
#: matplotlib.artist.BrokenBarHCollection.set:41
#: matplotlib.artist.BrokenBarHCollection.set:50
#: matplotlib.artist.CircleCollection.set:14
#: matplotlib.artist.CircleCollection.set:20
#: matplotlib.artist.CircleCollection.set:29
#: matplotlib.artist.CircleCollection.set:40
#: matplotlib.artist.CircleCollection.set:47
#: matplotlib.artist.Collection.set:14 matplotlib.artist.Collection.set:20
#: matplotlib.artist.Collection.set:29 matplotlib.artist.Collection.set:40
#: matplotlib.artist.Collection.set:46
#: matplotlib.artist.EllipseCollection.set:14
#: matplotlib.artist.EllipseCollection.set:20
#: matplotlib.artist.EllipseCollection.set:29
#: matplotlib.artist.EllipseCollection.set:40
#: matplotlib.artist.EllipseCollection.set:46
#: matplotlib.artist.EventCollection.set:14
#: matplotlib.artist.EventCollection.set:20
#: matplotlib.artist.EventCollection.set:30
#: matplotlib.artist.EventCollection.set:46
#: matplotlib.artist.EventCollection.set:54
#: matplotlib.artist.LineCollection.set:14
#: matplotlib.artist.LineCollection.set:20
#: matplotlib.artist.LineCollection.set:30
#: matplotlib.artist.LineCollection.set:42
#: matplotlib.artist.LineCollection.set:50
#: matplotlib.artist.PatchCollection.set:14
#: matplotlib.artist.PatchCollection.set:20
#: matplotlib.artist.PatchCollection.set:29
#: matplotlib.artist.PatchCollection.set:41
#: matplotlib.artist.PatchCollection.set:47
#: matplotlib.artist.PathCollection.set:14
#: matplotlib.artist.PathCollection.set:20
#: matplotlib.artist.PathCollection.set:29
#: matplotlib.artist.PathCollection.set:41
#: matplotlib.artist.PathCollection.set:48
#: matplotlib.artist.PolyCollection.set:14
#: matplotlib.artist.PolyCollection.set:20
#: matplotlib.artist.PolyCollection.set:29
#: matplotlib.artist.PolyCollection.set:41
#: matplotlib.artist.PolyCollection.set:50 matplotlib.artist.QuadMesh.set:14
#: matplotlib.artist.QuadMesh.set:20 matplotlib.artist.QuadMesh.set:29
#: matplotlib.artist.QuadMesh.set:40 matplotlib.artist.QuadMesh.set:46
#: matplotlib.artist.RegularPolyCollection.set:14
#: matplotlib.artist.RegularPolyCollection.set:20
#: matplotlib.artist.RegularPolyCollection.set:29
#: matplotlib.artist.RegularPolyCollection.set:40
#: matplotlib.artist.RegularPolyCollection.set:47
#: matplotlib.artist.StarPolygonCollection.set:14
#: matplotlib.artist.StarPolygonCollection.set:20
#: matplotlib.artist.StarPolygonCollection.set:29
#: matplotlib.artist.StarPolygonCollection.set:40
#: matplotlib.artist.StarPolygonCollection.set:47
#: matplotlib.artist.TriMesh.set:14 matplotlib.artist.TriMesh.set:20
#: matplotlib.artist.TriMesh.set:29 matplotlib.artist.TriMesh.set:40
#: matplotlib.artist.TriMesh.set:46 of
msgid "bool"
msgstr "bool"

#: matplotlib.artist.Artist.findobj:19 of
msgid "Include *self* in the list to be checked for a match."
msgstr "Incluye *self* en la lista para ser revisado por una partida."

#: matplotlib.artist.Artist.findobj:36 of
msgid "list of `.Artist`"
msgstr "lista de `.Artist`"

#: matplotlib.artist.Artist.format_cursor_data:2 of
msgid "Return a string representation of *data*."
msgstr "Devuelve una representación de cadena de *datos*."

#: matplotlib.artist.Artist.format_cursor_data:5
#: matplotlib.artist.Artist.get_cursor_data:5
#: matplotlib.collections.QuadMesh.get_cursor_data:5 of
msgid "This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself."
msgstr "Este método está pensado para ser sobreescrito por subclases de artista. Como usuario final de Matplotlib probablemente no llamará a este método usted mismo."

#: matplotlib.artist.Artist.format_cursor_data:9 of
msgid "The default implementation converts ints and floats and arrays of ints and floats into a comma-separated string enclosed in square brackets, unless the artist has an associated colorbar, in which case scalar values are formatted using the colorbar's formatter."
msgstr "La implementación por defecto convierte intes y flotantes y arrays de ints y floats en una cadena separada por comas entre corchetes, a menos que el artista tenga una barra de colores asociada, en cuyo caso los valores escalares se formatean usando el formateador de la barra de colores."

#: matplotlib.artist.Artist.format_cursor_data:25 of
msgid ":obj:`get_cursor_data`"
msgstr ":obj:`obtener_datos_cursor`"

#: matplotlib.artist.Artist.get_agg_filter:2 of
msgid "Return filter function to be used for agg filter."
msgstr "Devuelve la función de filtro que se utilizará para el filtro agg."

#: matplotlib.artist.Artist.get_alpha:2 of
msgid "Return the alpha value used for blending - not supported on all backends."
msgstr "Devuelve el valor alfa usado para mezclar - no soportado en todos los backends."

#: matplotlib.artist.Artist.get_animated:2 of
msgid "Return whether the artist is animated."
msgstr "Devuelve si el artista está animado."

#: matplotlib.cm.ScalarMappable.get_array:2 of
msgid "Return the array of values, that are mapped to colors."
msgstr "Devuelve la matriz de valores que se asignan a los colores."

#: matplotlib.cm.ScalarMappable.get_array:4 of
msgid "The base class `.ScalarMappable` does not make any assumptions on the dimensionality and shape of the array."
msgstr "La clase base `.ScalarMappable` no hace ninguna suposición sobre la dimensión y la forma de la matriz."

#: matplotlib.artist.Artist.get_children:2 of
msgid "Return a list of the child `.Artist`\\s of this `.Artist`."
msgstr "Devuelve una lista del hijo `.Artist`\\s de este `.Artist`."

#: matplotlib.cm.ScalarMappable.get_clim:2 of
msgid "Return the values (min, max) that are mapped to the colormap limits."
msgstr "Devuelve los valores (min, max) que se asignan a los límites del mapa de color."

#: matplotlib.artist.Artist.get_clip_box:2 of
msgid "Return the clipbox."
msgstr "Devuelve el clipbox."

#: matplotlib.artist.Artist.get_clip_on:2 of
msgid "Return whether the artist uses clipping."
msgstr "Devuelve si el artist utiliza el recorte."

#: matplotlib.artist.Artist.get_clip_path:2 of
msgid "Return the clip path."
msgstr "Devuelve la ruta del clip."

#: matplotlib.cm.ScalarMappable.get_cmap:2 of
msgid "Return the `.Colormap` instance."
msgstr "Devuelve la instancia `.Colormap`."

#: matplotlib.artist.Artist.get_cursor_data:2
#: matplotlib.collections.QuadMesh.get_cursor_data:2 of
msgid "Return the cursor data for a given event."
msgstr "Devuelve los datos del cursor para un evento dado."

#: matplotlib.artist.Artist.get_cursor_data:9
#: matplotlib.collections.QuadMesh.get_cursor_data:9 of
msgid "Cursor data can be used by Artists to provide additional context information for a given event. The default implementation just returns *None*."
msgstr "Los datos del cursor pueden ser usados por Artistas para proporcionar información adicional de contexto para un evento determinado. La implementación por defecto sólo devuelve *Ninguno*."

#: matplotlib.artist.Artist.get_cursor_data:13
#: matplotlib.collections.QuadMesh.get_cursor_data:13 of
msgid "Subclasses can override the method and return arbitrary data. However, when doing so, they must ensure that `.format_cursor_data` can convert the data to a string representation."
msgstr "Las subclases pueden sobreescribir el método y devolver datos arbitrarios. Sin embargo, al hacerlo, deben asegurarse de que `. ormat_cursor_data` puede convertir los datos en una representación de cadena."

#: matplotlib.artist.Artist.get_cursor_data:17
#: matplotlib.collections.QuadMesh.get_cursor_data:17 of
msgid "The only current use case is displaying the z-value of an `.AxesImage` in the status bar of a plot window, while moving the mouse."
msgstr "El único caso de uso actual es mostrar el valor z-de un `.AxesImage` en la barra de estado de una ventana de parcela, mientras se mueve el ratón."

#: matplotlib.artist.Artist.get_cursor_data:30
#: matplotlib.collections.QuadMesh.get_cursor_data:30 of
msgid "**event** : `matplotlib.backend_bases.MouseEvent`"
msgstr "**event** : `matplotlib.backend_bases.MouseEvent`"

#: matplotlib.artist.Artist.get_cursor_data:29
#: matplotlib.collections.QuadMesh.get_cursor_data:29 of
msgid "matplotlib.backend_bases.MouseEvent"
msgstr "matplotlib.backend_bases.MouseEvent"

#: matplotlib.artist.Artist.get_cursor_data:35
#: matplotlib.collections.QuadMesh.get_cursor_data:35 of
msgid ":obj:`format_cursor_data`"
msgstr ":obj:`formato_cursor_datos`"

#: matplotlib.collections.Collection.get_linestyle:2 of
msgid "Alias for `get_linestyle`."
msgstr "Alias para `get_linestyle`."

#: matplotlib.collections.Collection.get_edgecolor:2 of
msgid "Alias for `get_edgecolor`."
msgstr "Alias para `get_edgecolor`."

#: matplotlib.collections.Collection.get_facecolor:2 of
msgid "Alias for `get_facecolor`."
msgstr "Alias para `get_facecolor`."

#: matplotlib.artist.Artist.get_figure:2 of
msgid "Return the `.Figure` instance the artist belongs to."
msgstr "Devuelve la instancia `.Figure` a la que pertenece el artista."

#: matplotlib.collections.Collection.get_fill:2 of
msgid "Return whether face is colored."
msgstr "Devuelve si la cara está colorada."

#: matplotlib.artist.Artist.get_gid:2 of
msgid "Return the group id."
msgstr "Devuelve el id del grupo."

#: matplotlib.collections.Collection.get_hatch:2 of
msgid "Return the current hatching pattern."
msgstr "Devuelve el patrón de eclosión actual."

#: matplotlib.artist.Artist.get_in_layout:2 of
msgid "Return boolean flag, ``True`` if artist is included in layout calculations."
msgstr "Devuelve la bandera booleana, ``Verdadero`` si el artista está incluido en los cálculos del diseño."

#: matplotlib.artist.Artist.get_in_layout:5 of
msgid "E.g. :doc:`/tutorials/intermediate/constrainedlayout_guide`, `.Figure.tight_layout()`, and ``fig.savefig(fname, bbox_inches='tight')``."
msgstr "Por ejemplo, :doc:`/tutorials/intermediate/constrainedlayout_guide`, `.Figure.tight_layout()`, y ``fig.savefig(fname, bbox_inches='tight')``."

#: matplotlib.artist.Artist.get_label:2 of
msgid "Return the label used for this artist in the legend."
msgstr "Devuelve la etiqueta usada para este artista en la leyenda."

#: matplotlib.collections.Collection.get_linewidth:2
#: matplotlib.collections.EventCollection.get_linewidths:2 of
msgid "Alias for `get_linewidth`."
msgstr "Alias para `get_linewidth`."

#: matplotlib.collections.Collection.get_offset_transform:2 of
msgid "Return the `.Transform` instance used by this artist offset."
msgstr "Devuelve la instancia `.Transform` usada por este desplazamiento de artista."

#: matplotlib.collections.Collection.get_offsets:2 of
msgid "Return the offsets for the collection."
msgstr "Devuelve los desplazamientos para la colección."

#: matplotlib.artist.Artist.get_picker:2 of
msgid "Return the picking behavior of the artist."
msgstr "Devuelve el comportamiento de selección del artista."

#: matplotlib.artist.Artist.get_picker:4 of
msgid "The possible values are described in `.set_picker`."
msgstr "Los valores posibles se describen en `.set_picker`."

#: matplotlib.artist.Artist.get_picker:17 of
msgid ":obj:`set_picker`, :obj:`pickable`, :obj:`pick`"
msgstr ":obj:`set_picker`, :obj:`pickable`, :obj:`pick`"

#: matplotlib.artist.Artist.get_rasterized:2 of
msgid "Return whether the artist is to be rasterized."
msgstr "Devuelve si el artista debe ser rasterizado."

#: matplotlib.collections._CollectionWithSizes.get_sizes:2 of
msgid "Return the sizes ('areas') of the elements in the collection."
msgstr "Devuelve los tamaños ('áreas') de los elementos de la colección."

#: matplotlib.collections._CollectionWithSizes.get_sizes:21 of
msgid "array"
msgstr "array"

#: matplotlib.collections._CollectionWithSizes.get_sizes:9 of
msgid "The 'area' of each element."
msgstr "La \"zona\" de cada elemento."

#: matplotlib.artist.Artist.get_sketch_params:2 of
msgid "Return the sketch parameters for the artist."
msgstr "Devuelve los parámetros del croquis para el artista."

#: matplotlib.artist.Artist.get_sketch_params:29 of
msgid "tuple or None"
msgstr "tupla o ninguno"

#: matplotlib.artist.Artist.get_sketch_params:9 of
msgid "A 3-tuple with the following elements:"
msgstr "Una 3 tupla con los siguientes elementos:"

#: matplotlib.artist.Artist.get_sketch_params:11 of
msgid "*scale*: The amplitude of the wiggle perpendicular to the source line."
msgstr "*escala*: La amplitud de la peluca perpendicular a la línea de origen."

#: matplotlib.artist.Artist.get_sketch_params:13 of
msgid "*length*: The length of the wiggle along the line."
msgstr "*longitud*: La longitud de la peluca a lo largo de la línea."

#: matplotlib.artist.Artist.get_sketch_params:14 of
msgid "*randomness*: The scale factor by which the length is shrunken or expanded."
msgstr "*aleatoria*: El factor de escala por el cual la longitud es reducida o ampliada."

#: matplotlib.artist.Artist.get_sketch_params:17 of
msgid "Returns *None* if no sketch parameters were set."
msgstr "Devuelve *nunca* si no se han establecido parámetros de croquis."

#: matplotlib.artist.Artist.get_snap:2 of
msgid "Return the snap setting."
msgstr "Devuelve la configuración del snap."

#: matplotlib.artist.Artist.get_snap:4 of
msgid "See `.set_snap` for details."
msgstr "Vea `.set_snap` para más detalles."

#: matplotlib.artist.Artist.get_tightbbox:2 of
msgid "Like `.Artist.get_window_extent`, but includes any clipping."
msgstr "Como `.Artist.get_window_extent`, pero incluye cualquier recorte."

#: matplotlib.artist.Artist.get_tightbbox:9 of
msgid "**renderer** : `.RendererBase` subclass"
msgstr "**renderer** : subclase `.RendererBase`"

#: matplotlib.artist.Artist.get_tightbbox:8 of
msgid "RendererBase subclass"
msgstr "Subclase RendererBase"

#: matplotlib.artist.Artist.get_tightbbox:8 of
msgid "renderer that will be used to draw the figures (i.e. ``fig.canvas.get_renderer()``)"
msgstr "renderizador que se utilizará para dibujar las figuras (es decir, ``fig.canvas.get_renderer()``)"

#: matplotlib.artist.Artist.get_tightbbox:26
#: matplotlib.artist.AsteriskPolygonCollection.set:19
#: matplotlib.artist.BrokenBarHCollection.set:19
#: matplotlib.artist.CircleCollection.set:19
#: matplotlib.artist.Collection.set:19
#: matplotlib.artist.EllipseCollection.set:19
#: matplotlib.artist.EventCollection.set:19
#: matplotlib.artist.LineCollection.set:19
#: matplotlib.artist.PatchCollection.set:19
#: matplotlib.artist.PathCollection.set:19
#: matplotlib.artist.PolyCollection.set:19 matplotlib.artist.QuadMesh.set:19
#: matplotlib.artist.RegularPolyCollection.set:19
#: matplotlib.artist.StarPolygonCollection.set:19
#: matplotlib.artist.TriMesh.set:19 of
msgid "`.Bbox`"
msgstr "`.Bbox`"

#: matplotlib.artist.Artist.get_tightbbox:14 of
msgid "The enclosing bounding box (in figure pixel coordinates)."
msgstr "La caja delimitadora (en coordenadas de píxeles de la figura)."

#: matplotlib.artist.Artist.get_transform:2 of
msgid "Return the `.Transform` instance used by this artist."
msgstr "Devuelve la instancia `.Transform` usada por este artista."

#: matplotlib.artist.Artist.get_transformed_clip_path_and_affine:2 of
msgid "Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation."
msgstr "Devuelve la ruta del clip con la parte no afectada de su transformación aplicada, y la parte afectada restante de su transformación."

#: matplotlib.artist.Artist.get_url:2 of
msgid "Return the url."
msgstr "Devuelve la url."

#: matplotlib.collections.Collection.get_urls:2 of
msgid "Return a list of URLs, one for each element of the collection."
msgstr "Devuelve una lista de URLs, una para cada elemento de la colección."

#: matplotlib.collections.Collection.get_urls:4 of
msgid "The list contains *None* for elements without a URL. See :doc:`/gallery/misc/hyperlinks_sgskip` for an example."
msgstr "La lista contiene *nunca* para elementos sin una URL. Vea :doc:`/gallery/misc/hyperlinks_sgskip` para un ejemplo."

#: matplotlib.artist.Artist.get_visible:2 of
msgid "Return the visibility."
msgstr "Devuelve la visibilidad."

#: matplotlib.collections.Collection.get_window_extent:2 of
msgid "Get the artist's bounding box in display space."
msgstr "Obtenga la caja delimitadora del artist en el espacio de visualización."

#: matplotlib.collections.Collection.get_window_extent:4 of
msgid "The bounding box' width and height are nonnegative."
msgstr "La anchura y la altura de la caja delimitadora son no negativas."

#: matplotlib.collections.Collection.get_window_extent:6 of
msgid "Subclasses should override for inclusion in the bounding box \"tight\" calculation. Default is to return an empty bounding box at 0, 0."
msgstr "Las subclases deben anularlo para incluirlo en el cálculo de la caja delimitadora \"ajustada\". Por defecto devuelve una caja delimitadora vacía en 0, 0."

#: matplotlib.collections.Collection.get_window_extent:10 of
msgid "Be careful when using this function, the results will not update if the artist window extent of the artist changes.  The extent can change due to any changes in the transform stack, such as changing the axes limits, the figure size, or the canvas used (as is done when saving a figure).  This can lead to unexpected behavior where interactive figures will look fine on the screen, but will save incorrectly."
msgstr "Ten cuidado cuando uses esta función, los resultados no se actualizarán si la extensión de la ventana del artist cambia.  La extensión puede cambiar debido a cualquier cambio en la pila de transformaciones, como cambiar los límites de los ejes, el tamaño de la figura o el lienzo utilizado (como se hace al guardar una figura).  Esto puede llevar a un comportamiento inesperado donde las figuras interactivas se verán bien en la pantalla, pero se guardarán incorrectamente."

#: matplotlib.artist.Artist.get_zorder:2 of
msgid "Return the artist's zorder."
msgstr "Devuelve el zorder del artista."

#: matplotlib.artist.Artist.have_units:2 of
msgid "Return whether units are set on any axis."
msgstr "Devuelve si las unidades están definidas en cualquier eje."

#: matplotlib.artist.Artist.is_transform_set:2 of
msgid "Return whether the Artist has an explicitly set transform."
msgstr "Devuelve si el Artista tiene una transforma definida explícitamente."

#: matplotlib.artist.Artist.is_transform_set:4 of
msgid "This is *True* after `.set_transform` has been called."
msgstr "Esto es *True* después de que `.set_transform` haya sido llamado."

#: matplotlib.collections.AsteriskPolygonCollection.mouseover:2
#: matplotlib.collections.BrokenBarHCollection.mouseover:2
#: matplotlib.collections.CircleCollection.mouseover:2
#: matplotlib.collections.Collection.mouseover:2
#: matplotlib.collections.EllipseCollection.mouseover:2
#: matplotlib.collections.EventCollection.mouseover:2
#: matplotlib.collections.LineCollection.mouseover:2
#: matplotlib.collections.PatchCollection.mouseover:2
#: matplotlib.collections.PathCollection.mouseover:2
#: matplotlib.collections.PolyCollection.mouseover:2
#: matplotlib.collections.QuadMesh.mouseover:2
#: matplotlib.collections.RegularPolyCollection.mouseover:2
#: matplotlib.collections.StarPolygonCollection.mouseover:2
#: matplotlib.collections.TriMesh.mouseover:2 of
msgid "If this property is set to *True*, the artist will be queried for custom context information when the mouse cursor moves over it."
msgstr "Si esta propiedad está establecida a *True*, el artist será consultado para obtener información de contexto personalizada cuando el cursor del ratón se mueva sobre él."

#: matplotlib.collections.AsteriskPolygonCollection.mouseover:5
#: matplotlib.collections.BrokenBarHCollection.mouseover:5
#: matplotlib.collections.CircleCollection.mouseover:5
#: matplotlib.collections.Collection.mouseover:5
#: matplotlib.collections.EllipseCollection.mouseover:5
#: matplotlib.collections.EventCollection.mouseover:5
#: matplotlib.collections.LineCollection.mouseover:5
#: matplotlib.collections.PatchCollection.mouseover:5
#: matplotlib.collections.PathCollection.mouseover:5
#: matplotlib.collections.PolyCollection.mouseover:5
#: matplotlib.collections.QuadMesh.mouseover:5
#: matplotlib.collections.RegularPolyCollection.mouseover:5
#: matplotlib.collections.StarPolygonCollection.mouseover:5
#: matplotlib.collections.TriMesh.mouseover:5 of
msgid "See also :meth:`get_cursor_data`, :class:`.ToolCursorPosition` and :class:`.NavigationToolbar2`."
msgstr "Vea también :meth:`get_cursor_data`, :class:`.ToolCursorPosition` y :class:`.NavigationToolbar2`."

#: matplotlib.artist.Artist.pchanged:2 of
msgid "Call all of the registered callbacks."
msgstr "Llama a todos los callbacks registrados."

#: matplotlib.artist.Artist.pchanged:4 of
msgid "This function is triggered internally when a property is changed."
msgstr "Esta función se activa internamente cuando se cambia una propiedad."

#: matplotlib.artist.Artist.pchanged:17
#: matplotlib.artist.Artist.remove_callback:16 of
msgid ":obj:`add_callback`"
msgstr ":obj:`add_callback`"

#: matplotlib.artist.Artist.pick:2 of
msgid "Process a pick event."
msgstr "Procesar un evento de selección."

#: matplotlib.artist.Artist.pick:4 of
msgid "Each child artist will fire a pick event if *mouseevent* is over the artist and the artist has picker set."
msgstr "Cada artista infantil lanzará un evento de elegir si *mouseevent* ha terminado el artista y el artista ha seleccionado el selector de objetos."

#: matplotlib.artist.Artist.pick:18 of
msgid ":obj:`set_picker`, :obj:`get_picker`, :obj:`pickable`"
msgstr ":obj:`set_picker`, :obj:`get_picker`, :obj:`pickable`"

#: matplotlib.artist.Artist.pickable:2 of
msgid "Return whether the artist is pickable."
msgstr "Devuelve si el artist es seleccionable."

#: matplotlib.artist.Artist.pickable:16 of
msgid ":obj:`set_picker`, :obj:`get_picker`, :obj:`pick`"
msgstr ":obj:`set_picker`, :obj:`get_picker`, :obj:`pick`"

#: matplotlib.artist.Artist.properties:2 of
msgid "Return a dictionary of all the properties of the artist."
msgstr "Devuelve un diccionario con todas las propiedades del artist."

#: matplotlib.artist.Artist.remove:2 of
msgid "Remove the artist from the figure if possible."
msgstr "Quite al artista de la figura si es posible."

#: matplotlib.artist.Artist.remove:4 of
msgid "The effect will not be visible until the figure is redrawn, e.g., with `.FigureCanvasBase.draw_idle`.  Call `~.axes.Axes.relim` to update the axes limits if desired."
msgstr "El efecto no será visible hasta que la figura sea redibujada, por ejemplo, con `.FigureCanvasBase.draw_idle`. Llame `~.axes.Axes.relim` para actualizar los límites de ejes si lo desea."

#: matplotlib.artist.Artist.remove:8 of
msgid "Note: `~.axes.Axes.relim` will not see collections even if the collection was added to the axes with *autolim* = True."
msgstr "Nota: `~.axes.Axes.relim` no verá colecciones incluso si la colección fue añadida a los ejes con *autolim* = True."

#: matplotlib.artist.Artist.remove:11 of
msgid "Note: there is no support for removing the artist's legend entry."
msgstr "Nota: no hay soporte para eliminar la entrada de la leyenda del artista."

#: matplotlib.artist.Artist.remove_callback:2 of
msgid "Remove a callback based on its observer id."
msgstr "Eliminar una devolución de llamada basada en su id de observador."

#: matplotlib.artist.AsteriskPolygonCollection.set:2
#: matplotlib.artist.BrokenBarHCollection.set:2
#: matplotlib.artist.CircleCollection.set:2 matplotlib.artist.Collection.set:2
#: matplotlib.artist.EllipseCollection.set:2
#: matplotlib.artist.EventCollection.set:2
#: matplotlib.artist.LineCollection.set:2
#: matplotlib.artist.PatchCollection.set:2
#: matplotlib.artist.PathCollection.set:2
#: matplotlib.artist.PolyCollection.set:2 matplotlib.artist.QuadMesh.set:2
#: matplotlib.artist.RegularPolyCollection.set:2
#: matplotlib.artist.StarPolygonCollection.set:2
#: matplotlib.artist.TriMesh.set:2 of
msgid "Set multiple properties at once."
msgstr "Establece varias propiedades a la vez."

#: matplotlib.artist.AsteriskPolygonCollection.set:4
#: matplotlib.artist.BrokenBarHCollection.set:4
#: matplotlib.artist.CircleCollection.set:4 matplotlib.artist.Collection.set:4
#: matplotlib.artist.EllipseCollection.set:4
#: matplotlib.artist.EventCollection.set:4
#: matplotlib.artist.LineCollection.set:4
#: matplotlib.artist.PatchCollection.set:4
#: matplotlib.artist.PathCollection.set:4
#: matplotlib.artist.PolyCollection.set:4 matplotlib.artist.QuadMesh.set:4
#: matplotlib.artist.RegularPolyCollection.set:4
#: matplotlib.artist.StarPolygonCollection.set:4
#: matplotlib.artist.TriMesh.set:4 of
msgid "Supported properties are"
msgstr "Las propiedades admitidas son"

#: matplotlib.artist.AsteriskPolygonCollection.set:10
#: matplotlib.artist.BrokenBarHCollection.set:10
#: matplotlib.artist.CircleCollection.set:10
#: matplotlib.artist.Collection.set:10
#: matplotlib.artist.EllipseCollection.set:10
#: matplotlib.artist.EventCollection.set:10
#: matplotlib.artist.LineCollection.set:10
#: matplotlib.artist.PatchCollection.set:10
#: matplotlib.artist.PathCollection.set:10
#: matplotlib.artist.PolyCollection.set:10 matplotlib.artist.QuadMesh.set:10
#: matplotlib.artist.RegularPolyCollection.set:10
#: matplotlib.artist.StarPolygonCollection.set:10
#: matplotlib.artist.TriMesh.set:10 of
msgid "Property"
msgstr "Propiedad"

#: matplotlib.artist.AsteriskPolygonCollection.set:10
#: matplotlib.artist.BrokenBarHCollection.set:10
#: matplotlib.artist.CircleCollection.set:10
#: matplotlib.artist.Collection.set:10
#: matplotlib.artist.EllipseCollection.set:10
#: matplotlib.artist.EventCollection.set:10
#: matplotlib.artist.LineCollection.set:10
#: matplotlib.artist.PatchCollection.set:10
#: matplotlib.artist.PathCollection.set:10
#: matplotlib.artist.PolyCollection.set:10 matplotlib.artist.QuadMesh.set:10
#: matplotlib.artist.RegularPolyCollection.set:10
#: matplotlib.artist.StarPolygonCollection.set:10
#: matplotlib.artist.TriMesh.set:10 of
msgid "Description"
msgstr "Descripción"

#: matplotlib.artist.AsteriskPolygonCollection.set:12
#: matplotlib.artist.BrokenBarHCollection.set:12
#: matplotlib.artist.CircleCollection.set:12
#: matplotlib.artist.Collection.set:12
#: matplotlib.artist.EllipseCollection.set:12
#: matplotlib.artist.EventCollection.set:12
#: matplotlib.artist.LineCollection.set:12
#: matplotlib.artist.PatchCollection.set:12
#: matplotlib.artist.PathCollection.set:12
#: matplotlib.artist.PolyCollection.set:12 matplotlib.artist.QuadMesh.set:12
#: matplotlib.artist.RegularPolyCollection.set:12
#: matplotlib.artist.StarPolygonCollection.set:12
#: matplotlib.artist.TriMesh.set:12 of
msgid ":meth:`agg_filter <matplotlib.artist.Artist.set_agg_filter>`"
msgstr ":meth:`agg_filter <matplotlib.artist.Artist.set_agg_filter>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:12
#: matplotlib.artist.BrokenBarHCollection.set:12
#: matplotlib.artist.CircleCollection.set:12
#: matplotlib.artist.Collection.set:12
#: matplotlib.artist.EllipseCollection.set:12
#: matplotlib.artist.EventCollection.set:12
#: matplotlib.artist.LineCollection.set:12
#: matplotlib.artist.PatchCollection.set:12
#: matplotlib.artist.PathCollection.set:12
#: matplotlib.artist.PolyCollection.set:12 matplotlib.artist.QuadMesh.set:12
#: matplotlib.artist.RegularPolyCollection.set:12
#: matplotlib.artist.StarPolygonCollection.set:12
#: matplotlib.artist.TriMesh.set:12 of
msgid "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array"
msgstr "una función de filtro, que toma un arreglo de puntos flotantes (m, n, 3) y un valor de dpi, y devuelve un arreglo (m, n, 3)"

#: matplotlib.artist.AsteriskPolygonCollection.set:13
#: matplotlib.artist.BrokenBarHCollection.set:13
#: matplotlib.artist.CircleCollection.set:13
#: matplotlib.artist.Collection.set:13
#: matplotlib.artist.EllipseCollection.set:13
#: matplotlib.artist.EventCollection.set:13
#: matplotlib.artist.LineCollection.set:13
#: matplotlib.artist.PatchCollection.set:13
#: matplotlib.artist.PathCollection.set:13
#: matplotlib.artist.PolyCollection.set:13 matplotlib.artist.QuadMesh.set:13
#: matplotlib.artist.RegularPolyCollection.set:13
#: matplotlib.artist.StarPolygonCollection.set:13
#: matplotlib.artist.TriMesh.set:13 of
msgid ":meth:`alpha <matplotlib.collections.Collection.set_alpha>`"
msgstr ":meth:`alpha <matplotlib.collections.Collection.set_alpha>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:13
#: matplotlib.artist.BrokenBarHCollection.set:13
#: matplotlib.artist.CircleCollection.set:13
#: matplotlib.artist.Collection.set:13
#: matplotlib.artist.EllipseCollection.set:13
#: matplotlib.artist.EventCollection.set:13
#: matplotlib.artist.LineCollection.set:13
#: matplotlib.artist.PatchCollection.set:13
#: matplotlib.artist.PathCollection.set:13
#: matplotlib.artist.PolyCollection.set:13 matplotlib.artist.QuadMesh.set:13
#: matplotlib.artist.RegularPolyCollection.set:13
#: matplotlib.artist.StarPolygonCollection.set:13
#: matplotlib.artist.TriMesh.set:13 of
msgid "array-like or scalar or None"
msgstr "como matriz o escalar o ninguno"

#: matplotlib.artist.AsteriskPolygonCollection.set:14
#: matplotlib.artist.BrokenBarHCollection.set:14
#: matplotlib.artist.CircleCollection.set:14
#: matplotlib.artist.Collection.set:14
#: matplotlib.artist.EllipseCollection.set:14
#: matplotlib.artist.EventCollection.set:14
#: matplotlib.artist.LineCollection.set:14
#: matplotlib.artist.PatchCollection.set:14
#: matplotlib.artist.PathCollection.set:14
#: matplotlib.artist.PolyCollection.set:14 matplotlib.artist.QuadMesh.set:14
#: matplotlib.artist.RegularPolyCollection.set:14
#: matplotlib.artist.StarPolygonCollection.set:14
#: matplotlib.artist.TriMesh.set:14 of
msgid ":meth:`animated <matplotlib.artist.Artist.set_animated>`"
msgstr ":meth:`animated <matplotlib.artist.Artist.set_animated>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:15
#: matplotlib.artist.BrokenBarHCollection.set:15
#: matplotlib.artist.CircleCollection.set:15
#: matplotlib.artist.EllipseCollection.set:15
#: matplotlib.artist.EventCollection.set:15
#: matplotlib.artist.LineCollection.set:15
#: matplotlib.artist.PatchCollection.set:15
#: matplotlib.artist.PathCollection.set:15
#: matplotlib.artist.PolyCollection.set:15 matplotlib.artist.QuadMesh.set:15
#: matplotlib.artist.RegularPolyCollection.set:15
#: matplotlib.artist.StarPolygonCollection.set:15
#: matplotlib.artist.TriMesh.set:15 of
msgid ":meth:`antialiased <matplotlib.collections.Collection.set_antialiased>` or aa or antialiaseds"
msgstr ":meth:`antialias <matplotlib.collections.Collection.set_antialiased>` o aa o antialiaseds"

#: matplotlib.artist.AsteriskPolygonCollection.set:15
#: matplotlib.artist.BrokenBarHCollection.set:15
#: matplotlib.artist.CircleCollection.set:15
#: matplotlib.artist.Collection.set:15
#: matplotlib.artist.EllipseCollection.set:15
#: matplotlib.artist.EventCollection.set:15
#: matplotlib.artist.LineCollection.set:15
#: matplotlib.artist.PatchCollection.set:15
#: matplotlib.artist.PathCollection.set:15
#: matplotlib.artist.PolyCollection.set:15 matplotlib.artist.QuadMesh.set:15
#: matplotlib.artist.RegularPolyCollection.set:15
#: matplotlib.artist.StarPolygonCollection.set:15
#: matplotlib.artist.TriMesh.set:15 of
msgid "bool or list of bools"
msgstr "libro o lista de bools"

#: matplotlib.artist.AsteriskPolygonCollection.set:16
#: matplotlib.artist.BrokenBarHCollection.set:16
#: matplotlib.artist.CircleCollection.set:16
#: matplotlib.artist.Collection.set:16
#: matplotlib.artist.EllipseCollection.set:16
#: matplotlib.artist.EventCollection.set:16
#: matplotlib.artist.LineCollection.set:16
#: matplotlib.artist.PatchCollection.set:16
#: matplotlib.artist.PathCollection.set:16
#: matplotlib.artist.PolyCollection.set:16
#: matplotlib.artist.RegularPolyCollection.set:16
#: matplotlib.artist.StarPolygonCollection.set:16
#: matplotlib.artist.TriMesh.set:16 of
msgid ":meth:`array <matplotlib.cm.ScalarMappable.set_array>`"
msgstr ":meth:`array <matplotlib.cm.ScalarMappable.set_array>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:16
#: matplotlib.artist.BrokenBarHCollection.set:16
#: matplotlib.artist.CircleCollection.set:16
#: matplotlib.artist.Collection.set:16
#: matplotlib.artist.EllipseCollection.set:16
#: matplotlib.artist.EventCollection.set:16
#: matplotlib.artist.LineCollection.set:16
#: matplotlib.artist.PatchCollection.set:16
#: matplotlib.artist.PathCollection.set:16
#: matplotlib.artist.PolyCollection.set:16
#: matplotlib.artist.RegularPolyCollection.set:16
#: matplotlib.artist.StarPolygonCollection.set:16
#: matplotlib.artist.TriMesh.set:16 of
msgid "array-like or None"
msgstr "tipo array o ninguno"

#: matplotlib.artist.AsteriskPolygonCollection.set:17
#: matplotlib.artist.BrokenBarHCollection.set:17
#: matplotlib.artist.CircleCollection.set:17
#: matplotlib.artist.Collection.set:17
#: matplotlib.artist.EllipseCollection.set:17
#: matplotlib.artist.EventCollection.set:17
#: matplotlib.artist.LineCollection.set:17
#: matplotlib.artist.PatchCollection.set:17
#: matplotlib.artist.PathCollection.set:17
#: matplotlib.artist.PolyCollection.set:17 matplotlib.artist.QuadMesh.set:17
#: matplotlib.artist.RegularPolyCollection.set:17
#: matplotlib.artist.StarPolygonCollection.set:17
#: matplotlib.artist.TriMesh.set:17 of
msgid ":meth:`capstyle <matplotlib.collections.Collection.set_capstyle>`"
msgstr ":meth:`capstyle <matplotlib.collections.Collection.set_capstyle>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:17
#: matplotlib.artist.BrokenBarHCollection.set:17
#: matplotlib.artist.CircleCollection.set:17
#: matplotlib.artist.Collection.set:17
#: matplotlib.artist.EllipseCollection.set:17
#: matplotlib.artist.EventCollection.set:17
#: matplotlib.artist.LineCollection.set:17
#: matplotlib.artist.PatchCollection.set:17
#: matplotlib.artist.PathCollection.set:17
#: matplotlib.artist.PolyCollection.set:17 matplotlib.artist.QuadMesh.set:17
#: matplotlib.artist.RegularPolyCollection.set:17
#: matplotlib.artist.StarPolygonCollection.set:17
#: matplotlib.artist.TriMesh.set:17 of
msgid "`.CapStyle` or {'butt', 'projecting', 'round'}"
msgstr "`.CapStyle` o {'butt', 'projecting', 'round'}"

#: matplotlib.artist.AsteriskPolygonCollection.set:18
#: matplotlib.artist.BrokenBarHCollection.set:18
#: matplotlib.artist.CircleCollection.set:18
#: matplotlib.artist.Collection.set:18
#: matplotlib.artist.EllipseCollection.set:18
#: matplotlib.artist.EventCollection.set:18
#: matplotlib.artist.LineCollection.set:18
#: matplotlib.artist.PatchCollection.set:18
#: matplotlib.artist.PathCollection.set:18
#: matplotlib.artist.PolyCollection.set:18 matplotlib.artist.QuadMesh.set:18
#: matplotlib.artist.RegularPolyCollection.set:18
#: matplotlib.artist.StarPolygonCollection.set:18
#: matplotlib.artist.TriMesh.set:18 of
msgid ":meth:`clim <matplotlib.cm.ScalarMappable.set_clim>`"
msgstr ":meth:`clim <matplotlib.cm.ScalarMappable.set_clim>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:18
#: matplotlib.artist.BrokenBarHCollection.set:18
#: matplotlib.artist.CircleCollection.set:18
#: matplotlib.artist.Collection.set:18
#: matplotlib.artist.EllipseCollection.set:18
#: matplotlib.artist.EventCollection.set:18
#: matplotlib.artist.LineCollection.set:18
#: matplotlib.artist.PatchCollection.set:18
#: matplotlib.artist.PathCollection.set:18
#: matplotlib.artist.PolyCollection.set:18 matplotlib.artist.QuadMesh.set:18
#: matplotlib.artist.RegularPolyCollection.set:18
#: matplotlib.artist.StarPolygonCollection.set:18
#: matplotlib.artist.TriMesh.set:18 of
msgid "(vmin: float, vmax: float)"
msgstr "(vmin: flotante, vmax: flotante)"

#: matplotlib.artist.AsteriskPolygonCollection.set:19
#: matplotlib.artist.BrokenBarHCollection.set:19
#: matplotlib.artist.CircleCollection.set:19
#: matplotlib.artist.Collection.set:19
#: matplotlib.artist.EllipseCollection.set:19
#: matplotlib.artist.EventCollection.set:19
#: matplotlib.artist.LineCollection.set:19
#: matplotlib.artist.PatchCollection.set:19
#: matplotlib.artist.PathCollection.set:19
#: matplotlib.artist.PolyCollection.set:19 matplotlib.artist.QuadMesh.set:19
#: matplotlib.artist.RegularPolyCollection.set:19
#: matplotlib.artist.StarPolygonCollection.set:19
#: matplotlib.artist.TriMesh.set:19 of
msgid ":meth:`clip_box <matplotlib.artist.Artist.set_clip_box>`"
msgstr ":meth:`clip_box <matplotlib.artist.Artist.set_clip_box>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:20
#: matplotlib.artist.BrokenBarHCollection.set:20
#: matplotlib.artist.CircleCollection.set:20
#: matplotlib.artist.Collection.set:20
#: matplotlib.artist.EllipseCollection.set:20
#: matplotlib.artist.EventCollection.set:20
#: matplotlib.artist.LineCollection.set:20
#: matplotlib.artist.PatchCollection.set:20
#: matplotlib.artist.PathCollection.set:20
#: matplotlib.artist.PolyCollection.set:20 matplotlib.artist.QuadMesh.set:20
#: matplotlib.artist.RegularPolyCollection.set:20
#: matplotlib.artist.StarPolygonCollection.set:20
#: matplotlib.artist.TriMesh.set:20 of
msgid ":meth:`clip_on <matplotlib.artist.Artist.set_clip_on>`"
msgstr ":meth:`clip_on <matplotlib.artist.Artist.set_clip_on>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:21
#: matplotlib.artist.BrokenBarHCollection.set:21
#: matplotlib.artist.CircleCollection.set:21
#: matplotlib.artist.Collection.set:21
#: matplotlib.artist.EllipseCollection.set:21
#: matplotlib.artist.EventCollection.set:21
#: matplotlib.artist.LineCollection.set:21
#: matplotlib.artist.PatchCollection.set:21
#: matplotlib.artist.PathCollection.set:21
#: matplotlib.artist.PolyCollection.set:21 matplotlib.artist.QuadMesh.set:21
#: matplotlib.artist.RegularPolyCollection.set:21
#: matplotlib.artist.StarPolygonCollection.set:21
#: matplotlib.artist.TriMesh.set:21 of
msgid ":meth:`clip_path <matplotlib.artist.Artist.set_clip_path>`"
msgstr ":meth:`clip_path <matplotlib.artist.Artist.set_clip_path>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:21
#: matplotlib.artist.BrokenBarHCollection.set:21
#: matplotlib.artist.CircleCollection.set:21
#: matplotlib.artist.Collection.set:21
#: matplotlib.artist.EllipseCollection.set:21
#: matplotlib.artist.EventCollection.set:21
#: matplotlib.artist.LineCollection.set:21
#: matplotlib.artist.PatchCollection.set:21
#: matplotlib.artist.PathCollection.set:21
#: matplotlib.artist.PolyCollection.set:21 matplotlib.artist.QuadMesh.set:21
#: matplotlib.artist.RegularPolyCollection.set:21
#: matplotlib.artist.StarPolygonCollection.set:21
#: matplotlib.artist.TriMesh.set:21 of
msgid "Patch or (Path, Transform) or None"
msgstr "Patch o (Path, Transform) o None"

#: matplotlib.artist.AsteriskPolygonCollection.set:22
#: matplotlib.artist.BrokenBarHCollection.set:22
#: matplotlib.artist.CircleCollection.set:22
#: matplotlib.artist.Collection.set:22
#: matplotlib.artist.EllipseCollection.set:22
#: matplotlib.artist.EventCollection.set:22
#: matplotlib.artist.LineCollection.set:22
#: matplotlib.artist.PatchCollection.set:22
#: matplotlib.artist.PathCollection.set:22
#: matplotlib.artist.PolyCollection.set:22 matplotlib.artist.QuadMesh.set:22
#: matplotlib.artist.RegularPolyCollection.set:22
#: matplotlib.artist.StarPolygonCollection.set:22
#: matplotlib.artist.TriMesh.set:22 of
msgid ":meth:`cmap <matplotlib.cm.ScalarMappable.set_cmap>`"
msgstr ":meth:`cmap <matplotlib.cm.ScalarMappable.set_cmap>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:22
#: matplotlib.artist.BrokenBarHCollection.set:22
#: matplotlib.artist.CircleCollection.set:22
#: matplotlib.artist.Collection.set:22
#: matplotlib.artist.EllipseCollection.set:22
#: matplotlib.artist.EventCollection.set:22
#: matplotlib.artist.LineCollection.set:22
#: matplotlib.artist.PatchCollection.set:22
#: matplotlib.artist.PathCollection.set:22
#: matplotlib.artist.PolyCollection.set:22 matplotlib.artist.QuadMesh.set:22
#: matplotlib.artist.RegularPolyCollection.set:22
#: matplotlib.artist.StarPolygonCollection.set:22
#: matplotlib.artist.TriMesh.set:22 of
msgid "`.Colormap` or str or None"
msgstr "`.Colormap` o str o ninguno"

#: matplotlib.artist.AsteriskPolygonCollection.set:23
#: matplotlib.artist.BrokenBarHCollection.set:23
#: matplotlib.artist.CircleCollection.set:23
#: matplotlib.artist.Collection.set:23
#: matplotlib.artist.EllipseCollection.set:23
#: matplotlib.artist.PatchCollection.set:23
#: matplotlib.artist.PathCollection.set:23
#: matplotlib.artist.PolyCollection.set:23 matplotlib.artist.QuadMesh.set:23
#: matplotlib.artist.RegularPolyCollection.set:23
#: matplotlib.artist.StarPolygonCollection.set:23
#: matplotlib.artist.TriMesh.set:23 of
msgid ":meth:`color <matplotlib.collections.Collection.set_color>`"
msgstr ":meth:`color <matplotlib.collections.Collection.set_color>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:23
#: matplotlib.artist.BrokenBarHCollection.set:23
#: matplotlib.artist.CircleCollection.set:23
#: matplotlib.artist.Collection.set:23
#: matplotlib.artist.EllipseCollection.set:23
#: matplotlib.artist.PatchCollection.set:23
#: matplotlib.artist.PathCollection.set:23
#: matplotlib.artist.PolyCollection.set:23 matplotlib.artist.QuadMesh.set:23
#: matplotlib.artist.RegularPolyCollection.set:23
#: matplotlib.artist.StarPolygonCollection.set:23
#: matplotlib.artist.TriMesh.set:23 of
msgid "color or list of rgba tuples"
msgstr "color o lista de tubos rgba"

#: matplotlib.artist.AsteriskPolygonCollection.set:24
#: matplotlib.artist.BrokenBarHCollection.set:24
#: matplotlib.artist.CircleCollection.set:24
#: matplotlib.artist.EllipseCollection.set:24
#: matplotlib.artist.EventCollection.set:25
#: matplotlib.artist.LineCollection.set:25
#: matplotlib.artist.PatchCollection.set:24
#: matplotlib.artist.PathCollection.set:24
#: matplotlib.artist.PolyCollection.set:24 matplotlib.artist.QuadMesh.set:24
#: matplotlib.artist.RegularPolyCollection.set:24
#: matplotlib.artist.StarPolygonCollection.set:24
#: matplotlib.artist.TriMesh.set:24 of
msgid ":meth:`edgecolor <matplotlib.collections.Collection.set_edgecolor>` or ec or edgecolors"
msgstr ":meth:`edgecolor <matplotlib.collections.Collection.set_edgecolor>` o ec o aristas colores"

#: matplotlib.artist.AsteriskPolygonCollection.set:24
#: matplotlib.artist.BrokenBarHCollection.set:24
#: matplotlib.artist.CircleCollection.set:24
#: matplotlib.artist.Collection.set:24
#: matplotlib.artist.EllipseCollection.set:24
#: matplotlib.artist.EventCollection.set:25
#: matplotlib.artist.LineCollection.set:25
#: matplotlib.artist.PatchCollection.set:24
#: matplotlib.artist.PathCollection.set:24
#: matplotlib.artist.PolyCollection.set:24 matplotlib.artist.QuadMesh.set:24
#: matplotlib.artist.RegularPolyCollection.set:24
#: matplotlib.artist.StarPolygonCollection.set:24
#: matplotlib.artist.TriMesh.set:24 of
msgid "color or list of colors or 'face'"
msgstr "color o lista de colores o 'cara'"

#: matplotlib.artist.AsteriskPolygonCollection.set:25
#: matplotlib.artist.BrokenBarHCollection.set:25
#: matplotlib.artist.CircleCollection.set:25
#: matplotlib.artist.EllipseCollection.set:25
#: matplotlib.artist.EventCollection.set:26
#: matplotlib.artist.LineCollection.set:26
#: matplotlib.artist.PatchCollection.set:25
#: matplotlib.artist.PathCollection.set:25
#: matplotlib.artist.PolyCollection.set:25 matplotlib.artist.QuadMesh.set:25
#: matplotlib.artist.RegularPolyCollection.set:25
#: matplotlib.artist.StarPolygonCollection.set:25
#: matplotlib.artist.TriMesh.set:25 of
msgid ":meth:`facecolor <matplotlib.collections.Collection.set_facecolor>` or facecolors or fc"
msgstr ":meth:`carecolor <matplotlib.collections.Collection.set_facecolor>` o colores de caras o fc"

#: matplotlib.artist.AsteriskPolygonCollection.set:25
#: matplotlib.artist.BrokenBarHCollection.set:25
#: matplotlib.artist.CircleCollection.set:25
#: matplotlib.artist.Collection.set:25
#: matplotlib.artist.EllipseCollection.set:25
#: matplotlib.artist.EventCollection.set:23
#: matplotlib.artist.EventCollection.set:24
#: matplotlib.artist.EventCollection.set:26
#: matplotlib.artist.LineCollection.set:23
#: matplotlib.artist.LineCollection.set:24
#: matplotlib.artist.LineCollection.set:26
#: matplotlib.artist.PatchCollection.set:25
#: matplotlib.artist.PathCollection.set:25
#: matplotlib.artist.PolyCollection.set:25 matplotlib.artist.QuadMesh.set:25
#: matplotlib.artist.RegularPolyCollection.set:25
#: matplotlib.artist.StarPolygonCollection.set:25
#: matplotlib.artist.TriMesh.set:25 of
msgid "color or list of colors"
msgstr "color o lista de colores"

#: matplotlib.artist.AsteriskPolygonCollection.set:26
#: matplotlib.artist.BrokenBarHCollection.set:26
#: matplotlib.artist.CircleCollection.set:26
#: matplotlib.artist.Collection.set:26
#: matplotlib.artist.EllipseCollection.set:26
#: matplotlib.artist.EventCollection.set:27
#: matplotlib.artist.LineCollection.set:27
#: matplotlib.artist.PatchCollection.set:26
#: matplotlib.artist.PathCollection.set:26
#: matplotlib.artist.PolyCollection.set:26 matplotlib.artist.QuadMesh.set:26
#: matplotlib.artist.RegularPolyCollection.set:26
#: matplotlib.artist.StarPolygonCollection.set:26
#: matplotlib.artist.TriMesh.set:26 of
msgid ":meth:`figure <matplotlib.artist.Artist.set_figure>`"
msgstr ":meth:`figure <matplotlib.artist.Artist.set_figure>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:26
#: matplotlib.artist.BrokenBarHCollection.set:26
#: matplotlib.artist.CircleCollection.set:26
#: matplotlib.artist.Collection.set:26
#: matplotlib.artist.EllipseCollection.set:26
#: matplotlib.artist.EventCollection.set:27
#: matplotlib.artist.LineCollection.set:27
#: matplotlib.artist.PatchCollection.set:26
#: matplotlib.artist.PathCollection.set:26
#: matplotlib.artist.PolyCollection.set:26 matplotlib.artist.QuadMesh.set:26
#: matplotlib.artist.RegularPolyCollection.set:26
#: matplotlib.artist.StarPolygonCollection.set:26
#: matplotlib.artist.TriMesh.set:26 of
msgid "`.Figure`"
msgstr "`.Figure`"

#: matplotlib.artist.AsteriskPolygonCollection.set:27
#: matplotlib.artist.BrokenBarHCollection.set:27
#: matplotlib.artist.CircleCollection.set:27
#: matplotlib.artist.Collection.set:27
#: matplotlib.artist.EllipseCollection.set:27
#: matplotlib.artist.EventCollection.set:28
#: matplotlib.artist.LineCollection.set:28
#: matplotlib.artist.PatchCollection.set:27
#: matplotlib.artist.PathCollection.set:27
#: matplotlib.artist.PolyCollection.set:27 matplotlib.artist.QuadMesh.set:27
#: matplotlib.artist.RegularPolyCollection.set:27
#: matplotlib.artist.StarPolygonCollection.set:27
#: matplotlib.artist.TriMesh.set:27 of
msgid ":meth:`gid <matplotlib.artist.Artist.set_gid>`"
msgstr ":meth:`gid <matplotlib.artist.Artist.set_gid>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:27
#: matplotlib.artist.AsteriskPolygonCollection.set:45
#: matplotlib.artist.BrokenBarHCollection.set:27
#: matplotlib.artist.BrokenBarHCollection.set:46
#: matplotlib.artist.CircleCollection.set:27
#: matplotlib.artist.CircleCollection.set:45
#: matplotlib.artist.Collection.set:27 matplotlib.artist.Collection.set:44
#: matplotlib.artist.EllipseCollection.set:27
#: matplotlib.artist.EllipseCollection.set:44
#: matplotlib.artist.EventCollection.set:28
#: matplotlib.artist.EventCollection.set:51
#: matplotlib.artist.LineCollection.set:28
#: matplotlib.artist.LineCollection.set:47
#: matplotlib.artist.PatchCollection.set:27
#: matplotlib.artist.PatchCollection.set:45
#: matplotlib.artist.PathCollection.set:27
#: matplotlib.artist.PathCollection.set:46
#: matplotlib.artist.PolyCollection.set:27
#: matplotlib.artist.PolyCollection.set:46 matplotlib.artist.QuadMesh.set:27
#: matplotlib.artist.QuadMesh.set:44
#: matplotlib.artist.RegularPolyCollection.set:27
#: matplotlib.artist.RegularPolyCollection.set:45
#: matplotlib.artist.StarPolygonCollection.set:27
#: matplotlib.artist.StarPolygonCollection.set:45
#: matplotlib.artist.TriMesh.set:27 matplotlib.artist.TriMesh.set:44 of
msgid "str"
msgstr "str"

#: matplotlib.artist.AsteriskPolygonCollection.set:28
#: matplotlib.artist.BrokenBarHCollection.set:28
#: matplotlib.artist.CircleCollection.set:28
#: matplotlib.artist.Collection.set:28
#: matplotlib.artist.EllipseCollection.set:28
#: matplotlib.artist.EventCollection.set:29
#: matplotlib.artist.LineCollection.set:29
#: matplotlib.artist.PatchCollection.set:28
#: matplotlib.artist.PathCollection.set:28
#: matplotlib.artist.PolyCollection.set:28 matplotlib.artist.QuadMesh.set:28
#: matplotlib.artist.RegularPolyCollection.set:28
#: matplotlib.artist.StarPolygonCollection.set:28
#: matplotlib.artist.TriMesh.set:28 of
msgid ":meth:`hatch <matplotlib.collections.Collection.set_hatch>`"
msgstr ":meth:`colgante <matplotlib.collections.Collection.set_hatch>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:28
#: matplotlib.artist.BrokenBarHCollection.set:28
#: matplotlib.artist.CircleCollection.set:28
#: matplotlib.artist.Collection.set:28
#: matplotlib.artist.EllipseCollection.set:28
#: matplotlib.artist.EventCollection.set:29
#: matplotlib.artist.LineCollection.set:29
#: matplotlib.artist.PatchCollection.set:28
#: matplotlib.artist.PathCollection.set:28
#: matplotlib.artist.PolyCollection.set:28 matplotlib.artist.QuadMesh.set:28
#: matplotlib.artist.RegularPolyCollection.set:28
#: matplotlib.artist.StarPolygonCollection.set:28
#: matplotlib.artist.TriMesh.set:28 of
msgid "{'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}"
msgstr "{'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}"

#: matplotlib.artist.AsteriskPolygonCollection.set:29
#: matplotlib.artist.BrokenBarHCollection.set:29
#: matplotlib.artist.CircleCollection.set:29
#: matplotlib.artist.Collection.set:29
#: matplotlib.artist.EllipseCollection.set:29
#: matplotlib.artist.EventCollection.set:30
#: matplotlib.artist.LineCollection.set:30
#: matplotlib.artist.PatchCollection.set:29
#: matplotlib.artist.PathCollection.set:29
#: matplotlib.artist.PolyCollection.set:29 matplotlib.artist.QuadMesh.set:29
#: matplotlib.artist.RegularPolyCollection.set:29
#: matplotlib.artist.StarPolygonCollection.set:29
#: matplotlib.artist.TriMesh.set:29 of
msgid ":meth:`in_layout <matplotlib.artist.Artist.set_in_layout>`"
msgstr ":meth:`in_layout <matplotlib.artist.Artist.set_in_layout>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:30
#: matplotlib.artist.BrokenBarHCollection.set:30
#: matplotlib.artist.CircleCollection.set:30
#: matplotlib.artist.Collection.set:30
#: matplotlib.artist.EllipseCollection.set:30
#: matplotlib.artist.EventCollection.set:31
#: matplotlib.artist.LineCollection.set:31
#: matplotlib.artist.PatchCollection.set:30
#: matplotlib.artist.PathCollection.set:30
#: matplotlib.artist.PolyCollection.set:30 matplotlib.artist.QuadMesh.set:30
#: matplotlib.artist.RegularPolyCollection.set:30
#: matplotlib.artist.StarPolygonCollection.set:30
#: matplotlib.artist.TriMesh.set:30 of
msgid ":meth:`joinstyle <matplotlib.collections.Collection.set_joinstyle>`"
msgstr ":meth:`joinstyle <matplotlib.collections.Collection.set_joinstyle>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:30
#: matplotlib.artist.BrokenBarHCollection.set:30
#: matplotlib.artist.CircleCollection.set:30
#: matplotlib.artist.Collection.set:30
#: matplotlib.artist.EllipseCollection.set:30
#: matplotlib.artist.EventCollection.set:31
#: matplotlib.artist.LineCollection.set:31
#: matplotlib.artist.PatchCollection.set:30
#: matplotlib.artist.PathCollection.set:30
#: matplotlib.artist.PolyCollection.set:30 matplotlib.artist.QuadMesh.set:30
#: matplotlib.artist.RegularPolyCollection.set:30
#: matplotlib.artist.StarPolygonCollection.set:30
#: matplotlib.artist.TriMesh.set:30 of
msgid "`.JoinStyle` or {'miter', 'round', 'bevel'}"
msgstr "`.JoinStyle` o {'miter', 'round', 'bevel'}"

#: matplotlib.artist.AsteriskPolygonCollection.set:31
#: matplotlib.artist.BrokenBarHCollection.set:31
#: matplotlib.artist.CircleCollection.set:31
#: matplotlib.artist.Collection.set:31
#: matplotlib.artist.EllipseCollection.set:31
#: matplotlib.artist.EventCollection.set:32
#: matplotlib.artist.LineCollection.set:32
#: matplotlib.artist.PatchCollection.set:31
#: matplotlib.artist.PathCollection.set:31
#: matplotlib.artist.PolyCollection.set:31 matplotlib.artist.QuadMesh.set:31
#: matplotlib.artist.RegularPolyCollection.set:31
#: matplotlib.artist.StarPolygonCollection.set:31
#: matplotlib.artist.TriMesh.set:31 of
msgid ":meth:`label <matplotlib.artist.Artist.set_label>`"
msgstr ":meth:`label <matplotlib.artist.Artist.set_label>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:31
#: matplotlib.artist.BrokenBarHCollection.set:31
#: matplotlib.artist.CircleCollection.set:31
#: matplotlib.artist.Collection.set:31
#: matplotlib.artist.EllipseCollection.set:31
#: matplotlib.artist.EventCollection.set:32
#: matplotlib.artist.LineCollection.set:32
#: matplotlib.artist.PatchCollection.set:31
#: matplotlib.artist.PathCollection.set:31
#: matplotlib.artist.PolyCollection.set:31 matplotlib.artist.QuadMesh.set:31
#: matplotlib.artist.RegularPolyCollection.set:31
#: matplotlib.artist.StarPolygonCollection.set:31
#: matplotlib.artist.TriMesh.set:31 of
msgid "object"
msgstr "object"

#: matplotlib.artist.AsteriskPolygonCollection.set:32
#: matplotlib.artist.BrokenBarHCollection.set:32
#: matplotlib.artist.CircleCollection.set:32
#: matplotlib.artist.EllipseCollection.set:32
#: matplotlib.artist.EventCollection.set:35
#: matplotlib.artist.LineCollection.set:33
#: matplotlib.artist.PatchCollection.set:32
#: matplotlib.artist.PathCollection.set:32
#: matplotlib.artist.PolyCollection.set:32 matplotlib.artist.QuadMesh.set:32
#: matplotlib.artist.RegularPolyCollection.set:32
#: matplotlib.artist.StarPolygonCollection.set:32
#: matplotlib.artist.TriMesh.set:32 of
msgid ":meth:`linestyle <matplotlib.collections.Collection.set_linestyle>` or dashes or linestyles or ls"
msgstr ":meth:`linestyle <matplotlib.collections.Collection.set_linestyle>` o guiones o estilos de línea o ls"

#: matplotlib.artist.AsteriskPolygonCollection.set:32
#: matplotlib.artist.BrokenBarHCollection.set:32
#: matplotlib.artist.CircleCollection.set:32
#: matplotlib.artist.Collection.set:32
#: matplotlib.artist.EllipseCollection.set:32
#: matplotlib.artist.EventCollection.set:35
#: matplotlib.artist.LineCollection.set:33
#: matplotlib.artist.PatchCollection.set:32
#: matplotlib.artist.PathCollection.set:32
#: matplotlib.artist.PolyCollection.set:32 matplotlib.artist.QuadMesh.set:32
#: matplotlib.artist.RegularPolyCollection.set:32
#: matplotlib.artist.StarPolygonCollection.set:32
#: matplotlib.artist.TriMesh.set:32 of
msgid "str or tuple or list thereof"
msgstr "str o tuple o lista de ellos"

#: matplotlib.artist.AsteriskPolygonCollection.set:33
#: matplotlib.artist.BrokenBarHCollection.set:33
#: matplotlib.artist.CircleCollection.set:33
#: matplotlib.artist.EllipseCollection.set:33
#: matplotlib.artist.EventCollection.set:36
#: matplotlib.artist.LineCollection.set:34
#: matplotlib.artist.PatchCollection.set:33
#: matplotlib.artist.PathCollection.set:33
#: matplotlib.artist.PolyCollection.set:33 matplotlib.artist.QuadMesh.set:33
#: matplotlib.artist.RegularPolyCollection.set:33
#: matplotlib.artist.StarPolygonCollection.set:33
#: matplotlib.artist.TriMesh.set:33 of
msgid ":meth:`linewidth <matplotlib.collections.Collection.set_linewidth>` or linewidths or lw"
msgstr ":meth:`ancho de línea <matplotlib.collections.Collection.set_linewidth>o ancho de línea o lw"

#: matplotlib.artist.AsteriskPolygonCollection.set:33
#: matplotlib.artist.BrokenBarHCollection.set:33
#: matplotlib.artist.CircleCollection.set:33
#: matplotlib.artist.Collection.set:33
#: matplotlib.artist.EllipseCollection.set:33
#: matplotlib.artist.EventCollection.set:36
#: matplotlib.artist.LineCollection.set:34
#: matplotlib.artist.PatchCollection.set:33
#: matplotlib.artist.PathCollection.set:33
#: matplotlib.artist.PolyCollection.set:33 matplotlib.artist.QuadMesh.set:33
#: matplotlib.artist.RegularPolyCollection.set:33
#: matplotlib.artist.StarPolygonCollection.set:33
#: matplotlib.artist.TriMesh.set:33 of
msgid "float or list of floats"
msgstr "flotante o lista de flotantes"

#: matplotlib.artist.AsteriskPolygonCollection.set:34
#: matplotlib.artist.BrokenBarHCollection.set:34
#: matplotlib.artist.CircleCollection.set:34
#: matplotlib.artist.Collection.set:34
#: matplotlib.artist.EllipseCollection.set:34
#: matplotlib.artist.EventCollection.set:37
#: matplotlib.artist.LineCollection.set:35
#: matplotlib.artist.PatchCollection.set:34
#: matplotlib.artist.PathCollection.set:34
#: matplotlib.artist.PolyCollection.set:34 matplotlib.artist.QuadMesh.set:34
#: matplotlib.artist.RegularPolyCollection.set:34
#: matplotlib.artist.StarPolygonCollection.set:34
#: matplotlib.artist.TriMesh.set:34 of
msgid ":meth:`norm <matplotlib.cm.ScalarMappable.set_norm>`"
msgstr ":meth:`norm <matplotlib.cm.ScalarMappable.set_norm>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:34
#: matplotlib.artist.BrokenBarHCollection.set:34
#: matplotlib.artist.CircleCollection.set:34
#: matplotlib.artist.Collection.set:34
#: matplotlib.artist.EllipseCollection.set:34
#: matplotlib.artist.EventCollection.set:37
#: matplotlib.artist.LineCollection.set:35
#: matplotlib.artist.PatchCollection.set:34
#: matplotlib.artist.PathCollection.set:34
#: matplotlib.artist.PolyCollection.set:34 matplotlib.artist.QuadMesh.set:34
#: matplotlib.artist.RegularPolyCollection.set:34
#: matplotlib.artist.StarPolygonCollection.set:34
#: matplotlib.artist.TriMesh.set:34 of
msgid "`.Normalize` or None"
msgstr "`.normalize` o Ninguno"

#: matplotlib.artist.AsteriskPolygonCollection.set:35
#: matplotlib.artist.BrokenBarHCollection.set:35
#: matplotlib.artist.CircleCollection.set:35
#: matplotlib.artist.Collection.set:35
#: matplotlib.artist.EllipseCollection.set:35
#: matplotlib.artist.EventCollection.set:38
#: matplotlib.artist.LineCollection.set:36
#: matplotlib.artist.PatchCollection.set:35
#: matplotlib.artist.PathCollection.set:35
#: matplotlib.artist.PolyCollection.set:35 matplotlib.artist.QuadMesh.set:35
#: matplotlib.artist.RegularPolyCollection.set:35
#: matplotlib.artist.StarPolygonCollection.set:35
#: matplotlib.artist.TriMesh.set:35 of
msgid ":meth:`offset_transform <matplotlib.collections.Collection.set_offset_transform>`"
msgstr ":meth:`offset_transform <matplotlib.collections.Collection.set_offset_transform>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:35
#: matplotlib.artist.AsteriskPolygonCollection.set:44
#: matplotlib.artist.BrokenBarHCollection.set:35
#: matplotlib.artist.BrokenBarHCollection.set:45
#: matplotlib.artist.CircleCollection.set:35
#: matplotlib.artist.CircleCollection.set:44
#: matplotlib.artist.Collection.set:35 matplotlib.artist.Collection.set:43
#: matplotlib.artist.EllipseCollection.set:35
#: matplotlib.artist.EllipseCollection.set:43
#: matplotlib.artist.EventCollection.set:38
#: matplotlib.artist.EventCollection.set:50
#: matplotlib.artist.LineCollection.set:36
#: matplotlib.artist.LineCollection.set:46
#: matplotlib.artist.PatchCollection.set:35
#: matplotlib.artist.PatchCollection.set:44
#: matplotlib.artist.PathCollection.set:35
#: matplotlib.artist.PathCollection.set:45
#: matplotlib.artist.PolyCollection.set:35
#: matplotlib.artist.PolyCollection.set:45 matplotlib.artist.QuadMesh.set:35
#: matplotlib.artist.QuadMesh.set:43
#: matplotlib.artist.RegularPolyCollection.set:35
#: matplotlib.artist.RegularPolyCollection.set:44
#: matplotlib.artist.StarPolygonCollection.set:35
#: matplotlib.artist.StarPolygonCollection.set:44
#: matplotlib.artist.TriMesh.set:35 matplotlib.artist.TriMesh.set:43 of
msgid "`.Transform`"
msgstr "`.Transform`"

#: matplotlib.artist.AsteriskPolygonCollection.set:36
#: matplotlib.artist.BrokenBarHCollection.set:36
#: matplotlib.artist.CircleCollection.set:36
#: matplotlib.artist.Collection.set:36
#: matplotlib.artist.EllipseCollection.set:36
#: matplotlib.artist.EventCollection.set:39
#: matplotlib.artist.LineCollection.set:37
#: matplotlib.artist.PatchCollection.set:36
#: matplotlib.artist.PathCollection.set:36
#: matplotlib.artist.PolyCollection.set:36 matplotlib.artist.QuadMesh.set:36
#: matplotlib.artist.RegularPolyCollection.set:36
#: matplotlib.artist.StarPolygonCollection.set:36
#: matplotlib.artist.TriMesh.set:36 of
msgid ":meth:`offsets <matplotlib.collections.Collection.set_offsets>`"
msgstr ":meth:`offsets <matplotlib.collections.Collection.set_offsets>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:36
#: matplotlib.artist.BrokenBarHCollection.set:36
#: matplotlib.artist.CircleCollection.set:36
#: matplotlib.artist.Collection.set:36
#: matplotlib.artist.EllipseCollection.set:36
#: matplotlib.artist.EventCollection.set:39
#: matplotlib.artist.LineCollection.set:37
#: matplotlib.artist.PatchCollection.set:36
#: matplotlib.artist.PathCollection.set:36
#: matplotlib.artist.PolyCollection.set:36 matplotlib.artist.QuadMesh.set:36
#: matplotlib.artist.RegularPolyCollection.set:36
#: matplotlib.artist.StarPolygonCollection.set:36
#: matplotlib.artist.TriMesh.set:36 of
msgid "(N, 2) or (2,) array-like"
msgstr "((N, 2) o (2,) array-like"

#: matplotlib.artist.AsteriskPolygonCollection.set:37
#: matplotlib.artist.BrokenBarHCollection.set:37
#: matplotlib.artist.CircleCollection.set:37
#: matplotlib.artist.Collection.set:37
#: matplotlib.artist.EllipseCollection.set:37
#: matplotlib.artist.EventCollection.set:41
#: matplotlib.artist.LineCollection.set:38
#: matplotlib.artist.PatchCollection.set:37
#: matplotlib.artist.PathCollection.set:37
#: matplotlib.artist.PolyCollection.set:37 matplotlib.artist.QuadMesh.set:37
#: matplotlib.artist.RegularPolyCollection.set:37
#: matplotlib.artist.StarPolygonCollection.set:37
#: matplotlib.artist.TriMesh.set:37 of
msgid ":meth:`path_effects <matplotlib.artist.Artist.set_path_effects>`"
msgstr ":meth:`path_effects <matplotlib.artist.Artist.set_path_effects>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:37
#: matplotlib.artist.BrokenBarHCollection.set:37
#: matplotlib.artist.CircleCollection.set:37
#: matplotlib.artist.Collection.set:37
#: matplotlib.artist.EllipseCollection.set:37
#: matplotlib.artist.EventCollection.set:41
#: matplotlib.artist.LineCollection.set:38
#: matplotlib.artist.PatchCollection.set:37
#: matplotlib.artist.PathCollection.set:37
#: matplotlib.artist.PolyCollection.set:37 matplotlib.artist.QuadMesh.set:37
#: matplotlib.artist.RegularPolyCollection.set:37
#: matplotlib.artist.StarPolygonCollection.set:37
#: matplotlib.artist.TriMesh.set:37 of
msgid "`.AbstractPathEffect`"
msgstr "`.AbstractPathEffect`"

#: matplotlib.artist.AsteriskPolygonCollection.set:38
#: matplotlib.artist.BrokenBarHCollection.set:39
#: matplotlib.artist.CircleCollection.set:38
#: matplotlib.artist.Collection.set:38
#: matplotlib.artist.EllipseCollection.set:38
#: matplotlib.artist.EventCollection.set:43
#: matplotlib.artist.LineCollection.set:40
#: matplotlib.artist.PatchCollection.set:39
#: matplotlib.artist.PathCollection.set:39
#: matplotlib.artist.PolyCollection.set:39 matplotlib.artist.QuadMesh.set:38
#: matplotlib.artist.RegularPolyCollection.set:38
#: matplotlib.artist.StarPolygonCollection.set:38
#: matplotlib.artist.TriMesh.set:38 of
msgid ":meth:`picker <matplotlib.artist.Artist.set_picker>`"
msgstr ":meth:`picker <matplotlib.artist.Artist.set_picker>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:38
#: matplotlib.artist.BrokenBarHCollection.set:39
#: matplotlib.artist.CircleCollection.set:38
#: matplotlib.artist.Collection.set:38
#: matplotlib.artist.EllipseCollection.set:38
#: matplotlib.artist.EventCollection.set:43
#: matplotlib.artist.LineCollection.set:40
#: matplotlib.artist.PatchCollection.set:39
#: matplotlib.artist.PathCollection.set:39
#: matplotlib.artist.PolyCollection.set:39 matplotlib.artist.QuadMesh.set:38
#: matplotlib.artist.RegularPolyCollection.set:38
#: matplotlib.artist.StarPolygonCollection.set:38
#: matplotlib.artist.TriMesh.set:38 of
msgid "None or bool or float or callable"
msgstr "None o bool o float o callable"

#: matplotlib.artist.AsteriskPolygonCollection.set:39
#: matplotlib.artist.BrokenBarHCollection.set:40
#: matplotlib.artist.CircleCollection.set:39
#: matplotlib.artist.Collection.set:39
#: matplotlib.artist.EllipseCollection.set:39
#: matplotlib.artist.EventCollection.set:44
#: matplotlib.artist.LineCollection.set:41
#: matplotlib.artist.PatchCollection.set:40
#: matplotlib.artist.PathCollection.set:40
#: matplotlib.artist.PolyCollection.set:40 matplotlib.artist.QuadMesh.set:39
#: matplotlib.artist.RegularPolyCollection.set:39
#: matplotlib.artist.StarPolygonCollection.set:39
#: matplotlib.artist.TriMesh.set:39 of
msgid ":meth:`pickradius <matplotlib.collections.Collection.set_pickradius>`"
msgstr ":meth:`pickradius <matplotlib.collections.Collection.set_pickradius>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:40
#: matplotlib.artist.BrokenBarHCollection.set:41
#: matplotlib.artist.CircleCollection.set:40
#: matplotlib.artist.Collection.set:40
#: matplotlib.artist.EllipseCollection.set:40
#: matplotlib.artist.EventCollection.set:46
#: matplotlib.artist.LineCollection.set:42
#: matplotlib.artist.PatchCollection.set:41
#: matplotlib.artist.PathCollection.set:41
#: matplotlib.artist.PolyCollection.set:41 matplotlib.artist.QuadMesh.set:40
#: matplotlib.artist.RegularPolyCollection.set:40
#: matplotlib.artist.StarPolygonCollection.set:40
#: matplotlib.artist.TriMesh.set:40 of
msgid ":meth:`rasterized <matplotlib.artist.Artist.set_rasterized>`"
msgstr ":meth:`rasterized <matplotlib.artist.Artist.set_rasterized>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:41
#: matplotlib.artist.BrokenBarHCollection.set:42
#: matplotlib.artist.CircleCollection.set:41
#: matplotlib.artist.PathCollection.set:42
#: matplotlib.artist.PolyCollection.set:42
#: matplotlib.artist.RegularPolyCollection.set:41
#: matplotlib.artist.StarPolygonCollection.set:41 of
msgid ":meth:`sizes <matplotlib.collections._CollectionWithSizes.set_sizes>`"
msgstr ":meth:`tamaños <matplotlib.collections._CollectionWithSizes.set_sizes>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:41
#: matplotlib.artist.BrokenBarHCollection.set:42
#: matplotlib.artist.CircleCollection.set:41
#: matplotlib.artist.PathCollection.set:42
#: matplotlib.artist.PolyCollection.set:42
#: matplotlib.artist.RegularPolyCollection.set:41
#: matplotlib.artist.StarPolygonCollection.set:41 of
msgid "ndarray or None"
msgstr "ndarray o ninguno"

#: matplotlib.artist.AsteriskPolygonCollection.set:42
#: matplotlib.artist.BrokenBarHCollection.set:43
#: matplotlib.artist.CircleCollection.set:42
#: matplotlib.artist.Collection.set:41
#: matplotlib.artist.EllipseCollection.set:41
#: matplotlib.artist.EventCollection.set:48
#: matplotlib.artist.LineCollection.set:44
#: matplotlib.artist.PatchCollection.set:42
#: matplotlib.artist.PathCollection.set:43
#: matplotlib.artist.PolyCollection.set:43 matplotlib.artist.QuadMesh.set:41
#: matplotlib.artist.RegularPolyCollection.set:42
#: matplotlib.artist.StarPolygonCollection.set:42
#: matplotlib.artist.TriMesh.set:41 of
msgid ":meth:`sketch_params <matplotlib.artist.Artist.set_sketch_params>`"
msgstr ":meth:`sketch_params <matplotlib.artist.Artist.set_sketch_params>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:42
#: matplotlib.artist.BrokenBarHCollection.set:43
#: matplotlib.artist.CircleCollection.set:42
#: matplotlib.artist.Collection.set:41
#: matplotlib.artist.EllipseCollection.set:41
#: matplotlib.artist.EventCollection.set:48
#: matplotlib.artist.LineCollection.set:44
#: matplotlib.artist.PatchCollection.set:42
#: matplotlib.artist.PathCollection.set:43
#: matplotlib.artist.PolyCollection.set:43 matplotlib.artist.QuadMesh.set:41
#: matplotlib.artist.RegularPolyCollection.set:42
#: matplotlib.artist.StarPolygonCollection.set:42
#: matplotlib.artist.TriMesh.set:41 of
msgid "(scale: float, length: float, randomness: float)"
msgstr "(scale: float, length: float, randomness: float)"

#: matplotlib.artist.AsteriskPolygonCollection.set:43
#: matplotlib.artist.BrokenBarHCollection.set:44
#: matplotlib.artist.CircleCollection.set:43
#: matplotlib.artist.Collection.set:42
#: matplotlib.artist.EllipseCollection.set:42
#: matplotlib.artist.EventCollection.set:49
#: matplotlib.artist.LineCollection.set:45
#: matplotlib.artist.PatchCollection.set:43
#: matplotlib.artist.PathCollection.set:44
#: matplotlib.artist.PolyCollection.set:44 matplotlib.artist.QuadMesh.set:42
#: matplotlib.artist.RegularPolyCollection.set:43
#: matplotlib.artist.StarPolygonCollection.set:43
#: matplotlib.artist.TriMesh.set:42 of
msgid ":meth:`snap <matplotlib.artist.Artist.set_snap>`"
msgstr ":meth:`snap <matplotlib.artist.Artist.set_snap>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:43
#: matplotlib.artist.BrokenBarHCollection.set:44
#: matplotlib.artist.CircleCollection.set:43
#: matplotlib.artist.Collection.set:42
#: matplotlib.artist.EllipseCollection.set:42
#: matplotlib.artist.EventCollection.set:49
#: matplotlib.artist.LineCollection.set:45
#: matplotlib.artist.PatchCollection.set:43
#: matplotlib.artist.PathCollection.set:44
#: matplotlib.artist.PolyCollection.set:44 matplotlib.artist.QuadMesh.set:42
#: matplotlib.artist.RegularPolyCollection.set:43
#: matplotlib.artist.StarPolygonCollection.set:43
#: matplotlib.artist.TriMesh.set:42 of
msgid "bool or None"
msgstr "bool or None"

#: matplotlib.artist.AsteriskPolygonCollection.set:44
#: matplotlib.artist.BrokenBarHCollection.set:45
#: matplotlib.artist.CircleCollection.set:44
#: matplotlib.artist.Collection.set:43
#: matplotlib.artist.EllipseCollection.set:43
#: matplotlib.artist.EventCollection.set:50
#: matplotlib.artist.LineCollection.set:46
#: matplotlib.artist.PatchCollection.set:44
#: matplotlib.artist.PathCollection.set:45
#: matplotlib.artist.PolyCollection.set:45 matplotlib.artist.QuadMesh.set:43
#: matplotlib.artist.RegularPolyCollection.set:44
#: matplotlib.artist.StarPolygonCollection.set:44
#: matplotlib.artist.TriMesh.set:43 of
msgid ":meth:`transform <matplotlib.artist.Artist.set_transform>`"
msgstr ":meth:`transform <matplotlib.artist.Artist.set_transform>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:45
#: matplotlib.artist.BrokenBarHCollection.set:46
#: matplotlib.artist.CircleCollection.set:45
#: matplotlib.artist.Collection.set:44
#: matplotlib.artist.EllipseCollection.set:44
#: matplotlib.artist.EventCollection.set:51
#: matplotlib.artist.LineCollection.set:47
#: matplotlib.artist.PatchCollection.set:45
#: matplotlib.artist.PathCollection.set:46
#: matplotlib.artist.PolyCollection.set:46 matplotlib.artist.QuadMesh.set:44
#: matplotlib.artist.RegularPolyCollection.set:45
#: matplotlib.artist.StarPolygonCollection.set:45
#: matplotlib.artist.TriMesh.set:44 of
msgid ":meth:`url <matplotlib.artist.Artist.set_url>`"
msgstr ":meth:`url <matplotlib.artist.Artist.set_url>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:46
#: matplotlib.artist.BrokenBarHCollection.set:47
#: matplotlib.artist.CircleCollection.set:46
#: matplotlib.artist.Collection.set:45
#: matplotlib.artist.EllipseCollection.set:45
#: matplotlib.artist.EventCollection.set:52
#: matplotlib.artist.LineCollection.set:48
#: matplotlib.artist.PatchCollection.set:46
#: matplotlib.artist.PathCollection.set:47
#: matplotlib.artist.PolyCollection.set:47 matplotlib.artist.QuadMesh.set:45
#: matplotlib.artist.RegularPolyCollection.set:46
#: matplotlib.artist.StarPolygonCollection.set:46
#: matplotlib.artist.TriMesh.set:45 of
msgid ":meth:`urls <matplotlib.collections.Collection.set_urls>`"
msgstr ":meth:`urls <matplotlib.collections.Collection.set_urls>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:46
#: matplotlib.artist.BrokenBarHCollection.set:47
#: matplotlib.artist.CircleCollection.set:46
#: matplotlib.artist.Collection.set:45
#: matplotlib.artist.EllipseCollection.set:45
#: matplotlib.artist.EventCollection.set:52
#: matplotlib.artist.LineCollection.set:48
#: matplotlib.artist.PatchCollection.set:46
#: matplotlib.artist.PathCollection.set:47
#: matplotlib.artist.PolyCollection.set:47 matplotlib.artist.QuadMesh.set:45
#: matplotlib.artist.RegularPolyCollection.set:46
#: matplotlib.artist.StarPolygonCollection.set:46
#: matplotlib.artist.TriMesh.set:45 of
msgid "list of str or None"
msgstr "lista de str o ninguno"

#: matplotlib.artist.AsteriskPolygonCollection.set:47
#: matplotlib.artist.BrokenBarHCollection.set:50
#: matplotlib.artist.CircleCollection.set:47
#: matplotlib.artist.Collection.set:46
#: matplotlib.artist.EllipseCollection.set:46
#: matplotlib.artist.EventCollection.set:54
#: matplotlib.artist.LineCollection.set:50
#: matplotlib.artist.PatchCollection.set:47
#: matplotlib.artist.PathCollection.set:48
#: matplotlib.artist.PolyCollection.set:50 matplotlib.artist.QuadMesh.set:46
#: matplotlib.artist.RegularPolyCollection.set:47
#: matplotlib.artist.StarPolygonCollection.set:47
#: matplotlib.artist.TriMesh.set:46 of
msgid ":meth:`visible <matplotlib.artist.Artist.set_visible>`"
msgstr ":meth:`visible <matplotlib.artist.Artist.set_visible>`"

#: matplotlib.artist.AsteriskPolygonCollection.set:48
#: matplotlib.artist.BrokenBarHCollection.set:51
#: matplotlib.artist.CircleCollection.set:48
#: matplotlib.artist.Collection.set:47
#: matplotlib.artist.EllipseCollection.set:47
#: matplotlib.artist.EventCollection.set:55
#: matplotlib.artist.LineCollection.set:51
#: matplotlib.artist.PatchCollection.set:48
#: matplotlib.artist.PathCollection.set:49
#: matplotlib.artist.PolyCollection.set:51 matplotlib.artist.QuadMesh.set:47
#: matplotlib.artist.RegularPolyCollection.set:48
#: matplotlib.artist.StarPolygonCollection.set:48
#: matplotlib.artist.TriMesh.set:47 of
msgid ":meth:`zorder <matplotlib.artist.Artist.set_zorder>`"
msgstr ":meth:`zorder <matplotlib.artist.Artist.set_zorder>`"

#: matplotlib.collections.Collection.set_antialiased:2 of
msgid "Alias for `set_antialiased`."
msgstr "Alias para `set_antialiased`."

#: matplotlib.artist.Artist.set_agg_filter:2 of
msgid "Set the agg filter."
msgstr "Establece el filtro de agg."

#: matplotlib.artist.Artist.set_agg_filter:25 of
msgid "**filter_func**"
msgstr "**filtro_función**"

#: matplotlib.artist.Artist.set_agg_filter:8 of
msgid "A filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array."
msgstr "Una función de filtro, que toma un array (m, n, 3) flotante y un valor dpi, y devuelve un array (m, n, 3)."

#: matplotlib.collections.Collection.set_alpha:2 of
msgid "Set the alpha value used for blending - not supported on all backends."
msgstr "Establece el valor alfa usado para mezclar - no soportado en todos los backends."

#: matplotlib.collections.Collection.set_alpha:22 of
msgid "**alpha**"
msgstr "**alfa**"

#: matplotlib.collections.Collection.set_alpha:8 of
msgid "All values must be within the 0-1 range, inclusive. Masked values and nans are not supported."
msgstr "Todos los valores deben estar dentro del rango 0-1, inclusive. Los valores enmascarados y nans no son compatibles."

#: matplotlib.artist.Artist.set_animated:2 of
msgid "Set whether the artist is intended to be used in an animation."
msgstr "Establecer si el artista está destinado a ser utilizado en una animación."

#: matplotlib.artist.Artist.set_animated:4 of
msgid "If True, the artist is excluded from regular drawing of the figure. You have to call `.Figure.draw_artist` / `.Axes.draw_artist` explicitly on the artist. This appoach is used to speed up animations using blitting."
msgstr "Si es verdadero, el artista está excluido del dibujo normal de la figura. Tienes que llamar a `.Figure.draw_artist` / `. xes.draw_artist` explícitamente sobre el artista. Este appoach se utiliza para acelerar las animaciones usando chupando."

#: matplotlib.artist.Artist.set_animated:9 of
msgid "See also `matplotlib.animation` and :doc:`/tutorials/advanced/blitting`."
msgstr "Vea también `matplotlib.animation` y :doc:`/tutorials/advanced/blitting`."

#: matplotlib.artist.Artist.set_animated:28
#: matplotlib.artist.Artist.set_clip_on:23
#: matplotlib.artist.Artist.set_visible:21 of
msgid "**b**"
msgstr "**b**"

#: matplotlib.collections.Collection.set_antialiased:2 of
msgid "Set the antialiasing state for rendering."
msgstr "Establece el estado de antialiasing para renderizar."

#: matplotlib.collections.Collection.set_antialiased:21 of
msgid "**aa**"
msgstr "**aa**"

#: matplotlib.cm.ScalarMappable.set_array:2 of
msgid "Set the value array from array-like *A*."
msgstr "Establece la matriz de valor de la matriz *A*."

#: matplotlib.cm.ScalarMappable.set_array:24
#: matplotlib.collections.QuadMesh.set_array:25 of
msgid "**A**"
msgstr "**A**"

#: matplotlib.cm.ScalarMappable.set_array:8 of
msgid "The values that are mapped to colors."
msgstr "Los valores que se asignan a los colores."

#: matplotlib.cm.ScalarMappable.set_array:10 of
msgid "The base class `.ScalarMappable` does not make any assumptions on the dimensionality and shape of the value array *A*."
msgstr "La clase base `.ScalarMappable` no hace ninguna suposición sobre la dimensión y forma del array de valores *A*."

#: matplotlib.collections.Collection.set_capstyle:2 of
msgid "Set the `.CapStyle` for the collection (for all its elements)."
msgstr "Establece el `.CapStyle` para la colección (para todos sus elementos)."

#: matplotlib.collections.Collection.set_capstyle:21 of
msgid "**cs** : `.CapStyle` or {'butt', 'projecting', 'round'}"
msgstr "**cs** : `.CapStyle` o {'butt', 'projecting', 'round'}"

#: matplotlib.collections.Collection.set_capstyle:20 of
msgid "CapStyle or {'butt', 'projecting', 'round'}"
msgstr "CapEstilo o {'butt', 'projecting', 'round'}"

#: matplotlib.cm.ScalarMappable.set_clim:2 of
msgid "Set the norm limits for image scaling."
msgstr "Establece los límites de la norma para el escalado de la imagen."

#: matplotlib.cm.ScalarMappable.set_clim:26 of
msgid "**vmin, vmax**"
msgstr "**vmin, vmax**"

#: matplotlib.cm.ScalarMappable.set_clim:8 of
msgid "The limits."
msgstr "Los límites."

#: matplotlib.cm.ScalarMappable.set_clim:10 of
msgid "The limits may also be passed as a tuple (*vmin*, *vmax*) as a single positional argument."
msgstr "Los límites también se pueden pasar como una tupla (*vmin*, *vmax*) como un único argumento posicional."

#: matplotlib.artist.Artist.set_clip_box:2 of
msgid "Set the artist's clip `.Bbox`."
msgstr "Establecer el clip del artista `.Bbox`."

#: matplotlib.artist.Artist.set_clip_box:21 of
msgid "**clipbox** : `.Bbox`"
msgstr "**clipbox** : `.Bbox`"

#: matplotlib.artist.Artist.set_clip_box:20 of
msgid "Bbox"
msgstr "Bbox"

#: matplotlib.artist.Artist.set_clip_on:2 of
msgid "Set whether the artist uses clipping."
msgstr "Establecer si el artista utiliza el recorte."

#: matplotlib.artist.Artist.set_clip_on:4 of
msgid "When False artists will be visible outside of the axes which can lead to unexpected results."
msgstr "Cuando es False los artistas serán visibles fuera de los ejes lo que puede llevar a resultados inesperados."

#: matplotlib.artist.Artist.set_clip_path:2 of
msgid "Set the artist's clip path."
msgstr "Establecer la ruta del clip del artista."

#: matplotlib.artist.Artist.set_clip_path:9 of
msgid "**path** : `.Patch` or `.Path` or `.TransformedPath` or None"
msgstr "**ruta** : `.Patch` o `.Path` o `.TransformedPath` o None"

#: matplotlib.artist.Artist.set_clip_path:8 of
msgid "Patch or Path or TransformedPath or None"
msgstr "Patch o Path o TransformedPath o None"

#: matplotlib.artist.Artist.set_clip_path:8 of
msgid "The clip path. If given a `.Path`, *transform* must be provided as well. If *None*, a previously set clip path is removed."
msgstr "La ruta del clip. Si se le da un `.Path`, se debe proporcionar también *transform*. Si *None*, se elimina la ruta de recorte previamente establecida."

#: matplotlib.artist.Artist.set_clip_path:21 of
msgid "**transform** : `~matplotlib.transforms.Transform`, optional"
msgstr "**transformación** : `~matplotlib.transforms.Transform`, opcional"

#: matplotlib.artist.Artist.set_clip_path:20 of
msgid "Transform, optional"
msgstr "Transformación, opcional"

#: matplotlib.artist.Artist.set_clip_path:12 of
msgid "Only used if *path* is a `.Path`, in which case the given `.Path` is converted to a `.TransformedPath` using *transform*."
msgstr "Sólo se utiliza si *path* es un `.Path`, en cuyo caso el `.Path` dado se convierte en un `.TransformedPath` utilizando *transform*."

#: matplotlib.artist.Artist.set_clip_path:25 of
msgid "For efficiency, if *path* is a `.Rectangle` this method will set the clipping box to the corresponding rectangle and set the clipping path to ``None``."
msgstr "Por eficiencia, si *ruta* es un `.Rectángulo` este método establecerá la caja de recorte al rectángulo correspondiente y establecerá la ruta de recorte a ``Ninguna``."

#: matplotlib.artist.Artist.set_clip_path:29 of
msgid "For technical reasons (support of `~.Artist.set`), a tuple (*path*, *transform*) is also accepted as a single positional parameter."
msgstr "Por razones técnicas (soporte de `~.Artist.set`), también se acepta una tupla (*ruta*, *transformación*) como parámetro posicional único."

#: matplotlib.cm.ScalarMappable.set_cmap:2 of
msgid "Set the colormap for luminance data."
msgstr "Establece el mapa de colores para los datos de la luminancia."

#: matplotlib.cm.ScalarMappable.set_cmap:21 of
msgid "**cmap** : `.Colormap` or str or None"
msgstr "**cmap** : `.Colormap` o str o None"

#: matplotlib.cm.ScalarMappable.set_cmap:20 of
msgid "Colormap or str or None"
msgstr "Colormap o str o ninguno"

#: matplotlib.collections.Collection.set_color:2 of
msgid "Set both the edgecolor and the facecolor."
msgstr "Establece tanto el color del borde como el color del rostro."

#: matplotlib.collections.Collection.set_color:15
#: matplotlib.collections.Collection.set_edgecolor:22
#: matplotlib.collections.Collection.set_facecolor:24
#: matplotlib.collections.LineCollection.set_color:23 of
msgid "**c**"
msgstr "**c**"

#: matplotlib.collections.Collection.set_color:20 of
msgid ":obj:`Collection.set_facecolor`, :obj:`Collection.set_edgecolor`"
msgstr ":obj:`Collection.set_facecolor`, :obj:`Collection.set_edgecolor`"

#: matplotlib.collections.Collection.set_color:21 of
msgid "For setting the edge or face color individually."
msgstr "Para ajustar el borde o el color de la cara individualmente."

#: matplotlib.collections.Collection.set_linestyle:2 of
msgid "Alias for `set_linestyle`."
msgstr "Alias para `set_linestyle`."

#: matplotlib.collections.Collection.set_edgecolor:2 of
msgid "Alias for `set_edgecolor`."
msgstr "Alias para `set_edgecolor`."

#: matplotlib.collections.Collection.set_edgecolor:2 of
msgid "Set the edgecolor(s) of the collection."
msgstr "Establecer los colores del borde (los) de la colección."

#: matplotlib.collections.Collection.set_edgecolor:8 of
msgid "The collection edgecolor(s).  If a sequence, the patches cycle through it.  If 'face', match the facecolor."
msgstr "Los colores de los bordes de la colección. Si una secuencia, los parches circulan a través de ella. Si 'cara', concuerda con el color facecolor."

#: matplotlib.collections.Collection.set_facecolor:2 of
msgid "Set the facecolor(s) of the collection. *c* can be a color (all patches have same color), or a sequence of colors; if it is a sequence the patches will cycle through the sequence."
msgstr "Establece el color cara(s) de la colección. *c* puede ser un color (todos los parches tienen el mismo color), o una secuencia de colores; si se trata de una secuencia, los parches circularán a través de la secuencia."

#: matplotlib.collections.Collection.set_facecolor:6 of
msgid "If *c* is 'none', the patch will not be filled."
msgstr "Si *c* es 'ninguno', el parche no será llenado."

#: matplotlib.collections.Collection.set_facecolor:2 of
msgid "Alias for `set_facecolor`."
msgstr "Alias para `set_facecolor`."

#: matplotlib.artist.Artist.set_figure:2 of
msgid "Set the `.Figure` instance the artist belongs to."
msgstr "Establece la instancia `.Figure` a la que pertenece el artist."

#: matplotlib.artist.Artist.set_figure:21 of
msgid "**fig** : `.Figure`"
msgstr "**fig** : `.Figure`"

#: matplotlib.artist.Artist.set_figure:20 of
msgid "Figure"
msgstr "Figura"

#: matplotlib.artist.Artist.set_gid:2 of
msgid "Set the (group) id for the artist."
msgstr "Establece el id (grupo) para el artista."

#: matplotlib.artist.Artist.set_gid:21 of
msgid "**gid**"
msgstr "**gid**"

#: matplotlib.collections.Collection.set_hatch:2 of
msgid "Set the hatching pattern"
msgstr "Establecer el patrón de eclosión"

#: matplotlib.collections.Collection.set_hatch:4 of
msgid "*hatch* can be one of::"
msgstr "*hatch* puede ser uno de::"

#: matplotlib.collections.Collection.set_hatch:17 of
msgid "Letters can be combined, in which case all the specified hatchings are done.  If same letter repeats, it increases the density of hatching of that pattern."
msgstr "Las letras se pueden combinar, en cuyo caso todas las eclosiones especificadas se hacen. Si se repite la misma letra, aumenta la densidad de eclosión de ese patrón."

#: matplotlib.collections.Collection.set_hatch:21 of
msgid "Hatching is supported in the PostScript, PDF, SVG and Agg backends only."
msgstr "El incubamiento sólo se admite en los backends de PostScript, PDF, SVG y Agg."

#: matplotlib.collections.Collection.set_hatch:24 of
msgid "Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member."
msgstr "A diferencia de otras propiedades, como el ancho de línea y los colores, el eclosionado sólo se puede especificar para la colección en su conjunto, no por separado para cada miembro."

#: matplotlib.collections.Collection.set_hatch:44 of
msgid "**hatch** : {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}"
msgstr "**hatch** : {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}"

#: matplotlib.artist.Artist.set_in_layout:2 of
msgid "Set if artist is to be included in layout calculations, E.g. :doc:`/tutorials/intermediate/constrainedlayout_guide`, `.Figure.tight_layout()`, and ``fig.savefig(fname, bbox_inches='tight')``."
msgstr "Establece si el artista debe ser incluido en los cálculos del diseño, por ejemplo, :doc:`/tutorials/intermediate/constrainedlayout_guide`, `.Figure.tight_layout()`, y ``fig.savefig(fname, bbox_inches='tight')``."

#: matplotlib.artist.Artist.set_in_layout:24 of
msgid "**in_layout**"
msgstr "**en_diseño**"

#: matplotlib.collections.Collection.set_joinstyle:2 of
msgid "Set the `.JoinStyle` for the collection (for all its elements)."
msgstr "Establece el `.JoinStyle` para la colección (para todos sus elementos)."

#: matplotlib.collections.Collection.set_joinstyle:21 of
msgid "**js** : `.JoinStyle` or {'miter', 'round', 'bevel'}"
msgstr "**js** : `.JoinStyle` o {'miter', 'round', 'bevel'}"

#: matplotlib.collections.Collection.set_joinstyle:20 of
msgid "JoinStyle or {'miter', 'round', 'bevel'}"
msgstr "Estilo de registro o {'miter', 'round', 'bevel'}"

#: matplotlib.artist.Artist.set_label:2 of
msgid "Set a label that will be displayed in the legend."
msgstr "Establece una etiqueta que se mostrará en la leyenda."

#: matplotlib.artist.Artist.set_label:21 of
msgid "**s**"
msgstr "**s**"

#: matplotlib.artist.Artist.set_label:8 of
msgid "*s* will be converted to a string by calling `str`."
msgstr "*s* se convertirá en una cadena llamando a `str`."

#: matplotlib.collections.Collection.set_linestyle:2 of
msgid "Set the linestyle(s) for the collection."
msgstr "Establece el(los) linestyle(s) para la colección."

#: matplotlib.collections.Collection.set_linestyle:5 of
msgid "linestyle"
msgstr "estilo de línea"

#: matplotlib.collections.Collection.set_linestyle:5 of
msgid "description"
msgstr "descripción"

#: matplotlib.collections.Collection.set_linestyle:7 of
msgid "``'-'`` or ``'solid'``"
msgstr "``'-'`` o ``'sólid'``"

#: matplotlib.collections.Collection.set_linestyle:7 of
msgid "solid line"
msgstr "línea sólida"

#: matplotlib.collections.Collection.set_linestyle:8 of
msgid "``'--'`` or  ``'dashed'``"
msgstr "``'--'`` o ``'guionado'``"

#: matplotlib.collections.Collection.set_linestyle:8 of
msgid "dashed line"
msgstr "línea de guiones"

#: matplotlib.collections.Collection.set_linestyle:9 of
msgid "``'-.'`` or  ``'dashdot'``"
msgstr "``'-.'`` o ``'dashdot'``"

#: matplotlib.collections.Collection.set_linestyle:9 of
msgid "dash-dotted line"
msgstr "línea punteada en guión"

#: matplotlib.collections.Collection.set_linestyle:10 of
msgid "``':'`` or ``'dotted'``"
msgstr "``':'`` o ``'dotted'``"

#: matplotlib.collections.Collection.set_linestyle:10 of
msgid "dotted line"
msgstr "línea de puntos"

#: matplotlib.collections.Collection.set_linestyle:13 of
msgid "Alternatively a dash tuple of the following form can be provided::"
msgstr "Alternativamente se puede proporcionar una tupla de guión de la siguiente forma::"

#: matplotlib.collections.Collection.set_linestyle:17 of
msgid "where ``onoffseq`` is an even length tuple of on and off ink in points."
msgstr "donde ``onoffseq`` es una tupla de longitud uniforme de la tinta de encendido y apagado en puntos."

#: matplotlib.collections.Collection.set_linestyle:37 of
msgid "**ls**"
msgstr "**ls**"

#: matplotlib.collections.Collection.set_linestyle:22 of
msgid "Valid values for individual linestyles include {'-', '--', '-.', ':', '', (offset, on-off-seq)}. See `.Line2D.set_linestyle` for a complete description."
msgstr "Los valores válidos para los estilos de línea individuales incluyen {'-', '--', '-.', ':', '', (offset, on-off-seq)}. Vea `.Line2D.set_linestyle` para una descripción completa."

#: matplotlib.collections.Collection.set_linewidth:2 of
msgid "Set the linewidth(s) for the collection.  *lw* can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence"
msgstr "Establecer el ancho(s) de línea(s) para la colección. *lw* puede ser un escalar o una secuencia; si es una secuencia, los parches circularán a través de la secuencia"

#: matplotlib.collections.Collection.set_linewidth:23 of
msgid "**lw**"
msgstr "**lw**"

#: matplotlib.collections.Collection.set_linewidth:2 of
msgid "Alias for `set_linewidth`."
msgstr "Alias para `set_linewidth`."

#: matplotlib.cm.ScalarMappable.set_norm:2 of
msgid "Set the normalization instance."
msgstr "Establece la instancia de normalización."

#: matplotlib.cm.ScalarMappable.set_norm:16 of
msgid "**norm** : `.Normalize` or None"
msgstr "**norma** : `.Normalize` o Ninguno"

#: matplotlib.cm.ScalarMappable.set_norm:15 of
msgid "Normalize or None"
msgstr "Normalizar o ninguno"

#: matplotlib.cm.ScalarMappable.set_norm:20 of
msgid "If there are any colorbars using the mappable for this norm, setting the norm of the mappable will reset the norm, locator, and formatters on the colorbar to default."
msgstr "Si hay alguna barra de colores usando el mapeable para esta norma, establecer la norma del mapeable restablecerá la norma, localización y formateadores de la barra de colores por defecto."

#: matplotlib.collections.Collection.set_offset_transform:2 of
msgid "Set the artist offset transform."
msgstr "Establece la transforma de desplazamiento del artista."

#: matplotlib.collections.Collection.set_offset_transform:21 of
msgid "**transOffset** : `.Transform`"
msgstr "**transOffset** : `.Transform`"

#: matplotlib.artist.Artist.set_transform:20
#: matplotlib.collections.Collection.set_offset_transform:20 of
msgid "Transform"
msgstr "Transformar"

#: matplotlib.collections.Collection.set_offsets:2 of
msgid "Set the offsets for the collection."
msgstr "Establecer los desplazamientos para la colección."

#: matplotlib.collections.Collection:89
#: matplotlib.collections.Collection.set_offsets:21
#: matplotlib.collections.QuadMesh:119 matplotlib.collections.TriMesh:65 of
msgid "**offsets**"
msgstr "**offsets**"

#: matplotlib.artist.Artist.set_path_effects:2 of
msgid "Set the path effects."
msgstr "Establecer los efectos de la ruta."

#: matplotlib.artist.Artist.set_path_effects:21 of
msgid "**path_effects** : `.AbstractPathEffect`"
msgstr "**path_effects** : `.AbstractPathEffect`"

#: matplotlib.artist.Artist.set_path_effects:20 of
msgid "AbstractPathEffect"
msgstr "Efecto de ruta abstracta"

#: matplotlib.artist.Artist.set_picker:2 of
msgid "Define the picking behavior of the artist."
msgstr "Definir el comportamiento de selección del artista."

#: matplotlib.artist.Artist.set_picker:45 of
msgid "**picker**"
msgstr "**seleccionador**"

#: matplotlib.artist.Artist.set_picker:8 of
msgid "This can be one of the following:"
msgstr "Esto puede ser uno de los siguientes:"

#: matplotlib.artist.Artist.set_picker:10 of
msgid "*None*: Picking is disabled for this artist (default)."
msgstr "*Ninguno*: La selección está deshabilitada para este artista (por defecto)."

#: matplotlib.artist.Artist.set_picker:12 of
msgid "A boolean: If *True* then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist."
msgstr "Un booleano: Si *Verdadero* entonces se habilitará la selección y el artista disparará un evento de elegir si el evento del ratón está sobre el artista."

#: matplotlib.artist.Artist.set_picker:16 of
msgid "A float: If picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if its data is within epsilon of the mouse event.  For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event"
msgstr "Un float: Si el selector es un número, se interpreta como una tolerancia de epsilones en los puntos y el artista lanzará un evento si sus datos se encuentran dentro del epsilón del evento del ratón. Para algunos artistas como líneas y colecciones de parches, el artista puede proporcionar datos adicionales al evento de selección que se genere. ., los índices de los datos dentro del epsilón del evento de elección"

#: matplotlib.artist.Artist.set_picker:24 of
msgid "A function: If picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event::"
msgstr "Una función: Si el selector es llamable, es una función suministrada por el usuario que determina si el artista es golpeado por el evento del ratón::"

#: matplotlib.artist.Artist.set_picker:30 of
msgid "to determine the hit test.  if the mouse event is over the artist, return *hit=True* and props is a dictionary of properties you want added to the PickEvent attributes."
msgstr "para determinar la prueba de éxito. si el evento del ratón está sobre el artista, devuelve *hit=True* y props es un diccionario de propiedades que desea añadir a los atributos de PickEvent."

#: matplotlib.collections.Collection.set_pickradius:2 of
msgid "Set the pick radius used for containment tests."
msgstr "Establece el radio de selección utilizado para las pruebas de contención."

#: matplotlib.collections.Collection.set_pickradius:21 of
msgid "**pr**"
msgstr "**pr**"

#: matplotlib.collections.Collection.set_pickradius:8 of
msgid "Pick radius, in points."
msgstr "Elegir el radio, en puntos."

#: matplotlib.artist.Artist.set_rasterized:2 of
msgid "Force rasterized (bitmap) drawing for vector graphics output."
msgstr "Forzar dibujo rasterizado (mapa de bits) para salida de gráficos vectoriales."

#: matplotlib.artist.Artist.set_rasterized:4 of
msgid "Rasterized drawing is not supported by all artists. If you try to enable this on an artist that does not support it, the command has no effect and a warning will be issued."
msgstr "El dibujo asterizado no es apoyado por todos los artistas. Si intenta activar esto en un artista que no lo soporta, el comando no tiene efecto y se emitirá una advertencia."

#: matplotlib.artist.Artist.set_rasterized:8 of
msgid "This setting is ignored for pixel-based output."
msgstr "Este ajuste se ignora para la salida basada en píxeles."

#: matplotlib.artist.Artist.set_rasterized:10 of
msgid "See also :doc:`/gallery/misc/rasterization_demo`."
msgstr "Vea también :doc:`/gallery/misc/rasterization_demo`."

#: matplotlib.artist.Artist.set_rasterized:28 of
msgid "**rasterized**"
msgstr "**rasterizó**"

#: matplotlib.collections._CollectionWithSizes.set_sizes:2 of
msgid "Set the sizes of each member of the collection."
msgstr "Establecer los tamaños de cada miembro de la colección."

#: matplotlib.collections._CollectionWithSizes.set_sizes:8 of
msgid "The size to set for each element of the collection.  The value is the 'area' of the element."
msgstr "El tamaño a definir para cada elemento de la colección. El valor es el 'área' del elemento."

#: matplotlib.collections._CollectionWithSizes.set_sizes:25 of
msgid "**dpi**"
msgstr "**dpi**"

#: of
msgid "float, default: 72"
msgstr "float, por defecto: 72"

#: matplotlib.collections._CollectionWithSizes.set_sizes:12 of
msgid "The dpi of the canvas."
msgstr "El dpi del lienzo."

#: matplotlib.artist.Artist.set_sketch_params:2 of
msgid "Set the sketch parameters."
msgstr "Establecer los parámetros del croquis."

#: matplotlib.artist.Artist.set_sketch_params:10 of
msgid "**scale**"
msgstr "**escala**"

#: of
msgid "float, optional"
msgstr "float, opcional"

#: matplotlib.artist.Artist.set_sketch_params:8 of
msgid "The amplitude of the wiggle perpendicular to the source line, in pixels.  If scale is `None`, or not provided, no sketch filter will be provided."
msgstr "La amplitud de la muñeca perpendicular a la línea de origen, en píxeles. Si la escala es `Ninguno`, o no proporcionada, no se proporcionará ningún filtro de croquis."

#: matplotlib.artist.Artist.set_sketch_params:14 of
msgid "**length**"
msgstr "**length**"

#: matplotlib.artist.Artist.set_sketch_params:13 of
msgid "The length of the wiggle along the line, in pixels (default 128.0)"
msgstr "La longitud del muñeco a lo largo de la línea, en píxeles (por defecto 128.0)"

#: matplotlib.artist.Artist.set_sketch_params:36 of
msgid "**randomness**"
msgstr "**aleatoria**"

#: matplotlib.artist.Artist.set_sketch_params:17 of
msgid "The scale factor by which the length is shrunken or expanded (default 16.0)"
msgstr "El factor de escala por el cual la longitud está reducida o expandida (por defecto 16.0)"

#: matplotlib.artist.Artist.set_sketch_params:20 of
msgid "The PGF backend uses this argument as an RNG seed and not as described above. Using the same seed yields the same random shape."
msgstr "El backend de PGF utiliza este argumento como semilla de RNG y no como se describe anteriormente. Usar la misma semilla produce la misma forma aleatoria."

#: matplotlib.artist.Artist.set_snap:2 of
msgid "Set the snapping behavior."
msgstr "Establece el comportamiento de desguace."

#: matplotlib.artist.Artist.set_snap:4 of
msgid "Snapping aligns positions with the pixel grid, which results in clearer images. For example, if a black line of 1px width was defined at a position in between two pixels, the resulting image would contain the interpolated value of that line in the pixel grid, which would be a grey value on both adjacent pixel positions. In contrast, snapping will move the line to the nearest integer pixel value, so that the resulting image will really contain a 1px wide black line."
msgstr "Ajustando posiciones altas con la cuadrícula de píxeles, lo que resulta en imágenes más claras. Por ejemplo, si una línea negra de 1px de ancho fue definida en una posición entre dos píxeles, la imagen resultante contendría el valor interpolado de esa línea en la cuadrícula de píxeles, que sería un valor gris en ambas posiciones de píxeles adyacentes. En contraste, el snapping moverá la línea al valor entero de píxel más cercano. para que la imagen resultante contenga realmente una línea negra de 1px."

#: matplotlib.artist.Artist.set_snap:13 of
msgid "Snapping is currently only supported by the Agg and MacOSX backends."
msgstr "El ajuste sólo está soportado actualmente por los backends Agg y MacOSX."

#: matplotlib.artist.Artist.set_snap:36 of
msgid "**snap**"
msgstr "**snap**"

#: matplotlib.artist.Artist.set_snap:18 of
msgid "Possible values:"
msgstr "Valores posibles:"

#: matplotlib.artist.Artist.set_snap:20 of
msgid "*True*: Snap vertices to the nearest pixel center."
msgstr "*Verdadero*: Ajustar los vértices al centro de píxeles más cercano."

#: matplotlib.artist.Artist.set_snap:21 of
msgid "*False*: Do not modify vertex positions."
msgstr "*Falso*: No modifique las posiciones de los vértices."

#: matplotlib.artist.Artist.set_snap:22 of
msgid "*None*: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center."
msgstr "*Ninguno*: (auto) Si la ruta contiene sólo segmentos rectilineales, redondea al centro de píxeles más cercano."

#: matplotlib.artist.Artist.set_transform:2 of
msgid "Set the artist transform."
msgstr "Establece la transformación del artista."

#: matplotlib.artist.Artist.set_transform:21 of
msgid "**t** : `.Transform`"
msgstr "**t** : `.Transform`"

#: matplotlib.artist.Artist.set_url:2 of
msgid "Set the url for the artist."
msgstr "Establecer la url para el artista."

#: matplotlib.artist.Artist.set_url:21 of
msgid "**url**"
msgstr "**url**"

#: matplotlib.collections.Collection:121
#: matplotlib.collections.Collection.set_urls:16
#: matplotlib.collections.QuadMesh:151 matplotlib.collections.TriMesh:97 of
msgid "**urls**"
msgstr "**urls**"

#: matplotlib.collections.Collection.set_urls:20 of
msgid "URLs are currently only implemented by the SVG backend. They are ignored by all other backends."
msgstr "Las URLs actualmente sólo están implementadas por el backend SVG. Son ignoradas por todos los demás backends."

#: matplotlib.artist.Artist.set_visible:2 of
msgid "Set the artist's visibility."
msgstr "Establecer la visibilidad del artista."

#: matplotlib.artist.Artist.set_zorder:2 of
msgid "Set the zorder for the artist.  Artists with lower zorder values are drawn first."
msgstr "Establecer el zorder para el artista. Los artistas con valores de zorder más bajos se dibujan primero."

#: matplotlib.artist.Artist.set_zorder:22 of
msgid "**level**"
msgstr "**nivel**"

#: matplotlib.collections.AsteriskPolygonCollection.stale:2
#: matplotlib.collections.BrokenBarHCollection.stale:2
#: matplotlib.collections.CircleCollection.stale:2
#: matplotlib.collections.Collection.stale:2
#: matplotlib.collections.EllipseCollection.stale:2
#: matplotlib.collections.EventCollection.stale:2
#: matplotlib.collections.LineCollection.stale:2
#: matplotlib.collections.PatchCollection.stale:2
#: matplotlib.collections.PathCollection.stale:2
#: matplotlib.collections.PolyCollection.stale:2
#: matplotlib.collections.QuadMesh.stale:2
#: matplotlib.collections.RegularPolyCollection.stale:2
#: matplotlib.collections.StarPolygonCollection.stale:2
#: matplotlib.collections.TriMesh.stale:2 of
msgid "Whether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist."
msgstr "Si el artista es 'stale' y necesita ser redibujado para que la salida coincida con el estado interno del artista."

#: matplotlib.collections.AsteriskPolygonCollection.sticky_edges:2
#: matplotlib.collections.BrokenBarHCollection.sticky_edges:2
#: matplotlib.collections.CircleCollection.sticky_edges:2
#: matplotlib.collections.Collection.sticky_edges:2
#: matplotlib.collections.EllipseCollection.sticky_edges:2
#: matplotlib.collections.EventCollection.sticky_edges:2
#: matplotlib.collections.LineCollection.sticky_edges:2
#: matplotlib.collections.PatchCollection.sticky_edges:2
#: matplotlib.collections.PathCollection.sticky_edges:2
#: matplotlib.collections.PolyCollection.sticky_edges:2
#: matplotlib.collections.QuadMesh.sticky_edges:2
#: matplotlib.collections.RegularPolyCollection.sticky_edges:2
#: matplotlib.collections.StarPolygonCollection.sticky_edges:2
#: matplotlib.collections.TriMesh.sticky_edges:2 of
msgid "``x`` and ``y`` sticky edge lists for autoscaling."
msgstr "``x`` y ``y`` listas de bordes pegajosos para autoescalado."

#: matplotlib.collections.AsteriskPolygonCollection.sticky_edges:4
#: matplotlib.collections.BrokenBarHCollection.sticky_edges:4
#: matplotlib.collections.CircleCollection.sticky_edges:4
#: matplotlib.collections.Collection.sticky_edges:4
#: matplotlib.collections.EllipseCollection.sticky_edges:4
#: matplotlib.collections.EventCollection.sticky_edges:4
#: matplotlib.collections.LineCollection.sticky_edges:4
#: matplotlib.collections.PatchCollection.sticky_edges:4
#: matplotlib.collections.PathCollection.sticky_edges:4
#: matplotlib.collections.PolyCollection.sticky_edges:4
#: matplotlib.collections.QuadMesh.sticky_edges:4
#: matplotlib.collections.RegularPolyCollection.sticky_edges:4
#: matplotlib.collections.StarPolygonCollection.sticky_edges:4
#: matplotlib.collections.TriMesh.sticky_edges:4 of
msgid "When performing autoscaling, if a data limit coincides with a value in the corresponding sticky_edges list, then no margin will be added--the view limit \"sticks\" to the edge. A typical use case is histograms, where one usually expects no margin on the bottom edge (0) of the histogram."
msgstr "Al realizar autoescalado, si un límite de datos coincide con un valor en la lista de bordes de stickys correspondiente. entonces no se añadirá ningún margen --el límite de vista \"pega\" al borde. Un caso de uso típico son los histogramas, donde normalmente no se espera margen en el borde inferior (0) del histograma."

#: matplotlib.collections.AsteriskPolygonCollection.sticky_edges:10
#: matplotlib.collections.BrokenBarHCollection.sticky_edges:10
#: matplotlib.collections.CircleCollection.sticky_edges:10
#: matplotlib.collections.Collection.sticky_edges:10
#: matplotlib.collections.EllipseCollection.sticky_edges:10
#: matplotlib.collections.EventCollection.sticky_edges:10
#: matplotlib.collections.LineCollection.sticky_edges:10
#: matplotlib.collections.PatchCollection.sticky_edges:10
#: matplotlib.collections.PathCollection.sticky_edges:10
#: matplotlib.collections.PolyCollection.sticky_edges:10
#: matplotlib.collections.QuadMesh.sticky_edges:10
#: matplotlib.collections.RegularPolyCollection.sticky_edges:10
#: matplotlib.collections.StarPolygonCollection.sticky_edges:10
#: matplotlib.collections.TriMesh.sticky_edges:10 of
msgid "Moreover, margin expansion \"bumps\" against sticky edges and cannot cross them.  For example, if the upper data limit is 1.0, the upper view limit computed by simple margin application is 1.2, but there is a sticky edge at 1.1, then the actual upper view limit will be 1.1."
msgstr "Además, la expansión del margen \"bumps\" contra bordes pegajosos y no pueden cruzarlos. Por ejemplo, si el límite superior de datos es 1. , el límite de la vista superior calculado por una aplicación de margen simple es 1. , pero hay un borde fijo en 1.1, entonces el límite real de la vista superior será 1.1."

#: matplotlib.collections.AsteriskPolygonCollection.sticky_edges:15
#: matplotlib.collections.BrokenBarHCollection.sticky_edges:15
#: matplotlib.collections.CircleCollection.sticky_edges:15
#: matplotlib.collections.Collection.sticky_edges:15
#: matplotlib.collections.EllipseCollection.sticky_edges:15
#: matplotlib.collections.EventCollection.sticky_edges:15
#: matplotlib.collections.LineCollection.sticky_edges:15
#: matplotlib.collections.PatchCollection.sticky_edges:15
#: matplotlib.collections.PathCollection.sticky_edges:15
#: matplotlib.collections.PolyCollection.sticky_edges:15
#: matplotlib.collections.QuadMesh.sticky_edges:15
#: matplotlib.collections.RegularPolyCollection.sticky_edges:15
#: matplotlib.collections.StarPolygonCollection.sticky_edges:15
#: matplotlib.collections.TriMesh.sticky_edges:15 of
msgid "This attribute cannot be assigned to; however, the ``x`` and ``y`` lists can be modified in place as needed."
msgstr "Este atributo no se puede asignar; sin embargo, las listas ``x`` y ``y`` pueden ser modificadas en su lugar según sea necesario."

#: matplotlib.cm.ScalarMappable.to_rgba:2 of
msgid "Return a normalized rgba array corresponding to *x*."
msgstr "Devuelve una matriz rgba normalizada correspondiente a *x*."

#: matplotlib.cm.ScalarMappable.to_rgba:4 of
msgid "In the normal case, *x* is a 1D or 2D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable."
msgstr "En el caso normal, *x* es una secuencia 1D o 2D de escalares, y el ndarray correspondiente de valores rgba será retornado, basado en la norma y el mapa de colores establecido para este ScalarMappable."

#: matplotlib.cm.ScalarMappable.to_rgba:8 of
msgid "There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If *x* is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. The array can be uint8, or it can be floating point with values in the 0-1 range; otherwise a ValueError will be raised. If it is a masked array, the mask will be ignored. If the last dimension is 3, the *alpha* kwarg (defaulting to 1) will be used to fill in the transparency.  If the last dimension is 4, the *alpha* kwarg is ignored; it does not replace the pre-existing alpha.  A ValueError will be raised if the third dimension is other than 3 or 4."
msgstr "Hay un caso especial para el manejo de imágenes que ya son rgb o rgba, como podría haber sido leído desde un archivo de imagen. Si *x* es un ndarray con 3 dimensiones, y la última dimensión es 3 o 4, entonces se tratará como una matriz rgb o rgba, y no se hará mapeo. La matriz puede ser uint8, o puede ser un punto flotante con valores en el rango 0-1; de lo contrario, se levantará un ValueError . Si es una matriz enmascarada, la máscara será ignorada. Si la última dimensión es 3, el kwarg *alpha* (predeterminado a 1) se utilizará para rellenar la transparencia. Si la última dimensión es 4, el kwarg *alpha* es ignorado; no reemplaza el alfa preexistente. Se levantará un ValueError si la tercera dimensión es distinta a 3 o 4."

#: matplotlib.cm.ScalarMappable.to_rgba:22 of
msgid "In either case, if *bytes* is *False* (default), the rgba array will be floats in the 0-1 range; if it is *True*, the returned rgba array will be uint8 in the 0 to 255 range."
msgstr "En cualquier caso, si *bytes* es *False* (por defecto), la matriz rgba estará flotando en el rango 0-1; si es *True*, el array rgba devuelto será uint8 en el rango 0 a 255."

#: matplotlib.cm.ScalarMappable.to_rgba:26 of
msgid "If norm is False, no normalization of the input data is performed, and it is assumed to be in the range (0-1)."
msgstr "Si la norma es False, no se realiza ninguna normalización de los datos de entrada, y se asume que está en el rango (0-1)."

#: matplotlib.artist.Artist.update:2 of
msgid "Update this artist's properties from the dict *props*."
msgstr "Actualizar las propiedades de este artista desde el dict *props*."

#: matplotlib.artist.Artist.update:21 of
msgid "**props**"
msgstr "**props**"

#: of
msgid "dict"
msgstr "dict"

#: matplotlib.collections.Collection.update_from:2 of
msgid "Copy properties from other to self."
msgstr "Copiar propiedades de otro a uno mismo."

#: matplotlib.collections.Collection.update_scalarmappable:2 of
msgid "Update colors from the scalar mappable array, if any."
msgstr "Actualizar colores de la matriz escalar, si los hay."

#: matplotlib.collections.Collection.update_scalarmappable:4 of
msgid "Assign colors to edges and faces based on the array and/or colors that were directly set, as appropriate."
msgstr "Asigna colores a bordes y caras basados en la matriz y/o colores que se establecieron directamente, según corresponda."

#: matplotlib.collections.BrokenBarHCollection:1 of
msgid "Bases: :py:class:`matplotlib.collections.PolyCollection`"
msgstr "Bases: :py:class:`matplotlib.collections.PolyCollection`"

#: matplotlib.collections.BrokenBarHCollection:2 of
msgid "A collection of horizontal bars spanning *yrange* with a sequence of *xranges*."
msgstr "Una colección de barras horizontales que abarcan *yrange* con una secuencia de *xranges*."

#: matplotlib.collections.BrokenBarHCollection:30 of
msgid "**xranges**"
msgstr "**xranges**"

#: of
msgid "list of (float, float)"
msgstr "lista de (flotante, flotante)"

#: matplotlib.collections.BrokenBarHCollection:30 of
msgid "The sequence of (left-edge-position, width) pairs for each bar."
msgstr "La secuencia de pares (izquierda-posición, ancho) para cada barra."

#: matplotlib.collections.BrokenBarHCollection:33 of
msgid "**yrange**"
msgstr "**yrange**"

#: of
msgid "(float, float)"
msgstr "(float, float)"

#: matplotlib.collections.BrokenBarHCollection:33 of
msgid "The (lower-edge, height) common to all bars."
msgstr "El (borde inferior, altura) común a todas las barras."

#: matplotlib.artist.BrokenBarHCollection.set:38
#: matplotlib.artist.PolyCollection.set:38 of
msgid ":meth:`paths <matplotlib.collections.PolyCollection.set_verts>`"
msgstr ":meth:`rutas <matplotlib.collections.PolyCollection.set_verts>`"

#: matplotlib.artist.BrokenBarHCollection.set:38
#: matplotlib.artist.BrokenBarHCollection.set:48
#: matplotlib.artist.PolyCollection.set:38
#: matplotlib.artist.PolyCollection.set:48 of
msgid "list of array-like"
msgstr "lista de matriz"

#: matplotlib.artist.BrokenBarHCollection.set:48
#: matplotlib.artist.PolyCollection.set:48 of
msgid ":meth:`verts <matplotlib.collections.PolyCollection.set_verts>`"
msgstr ":meth:`verts <matplotlib.collections.PolyCollection.set_verts>`"

#: matplotlib.artist.BrokenBarHCollection.set:49
#: matplotlib.artist.PolyCollection.set:49 of
msgid ":meth:`verts_and_codes <matplotlib.collections.PolyCollection.set_verts_and_codes>`"
msgstr ":meth:`verts_and_codes <matplotlib.collections.PolyCollection.set_verts_and_codes>`"

#: matplotlib.artist.BrokenBarHCollection.set:49
#: matplotlib.artist.EventCollection.set:33
#: matplotlib.artist.EventCollection.set:34
#: matplotlib.artist.EventCollection.set:42
#: matplotlib.artist.EventCollection.set:45
#: matplotlib.artist.EventCollection.set:47
#: matplotlib.artist.EventCollection.set:53
#: matplotlib.artist.LineCollection.set:39
#: matplotlib.artist.LineCollection.set:43
#: matplotlib.artist.LineCollection.set:49
#: matplotlib.artist.PatchCollection.set:38
#: matplotlib.artist.PathCollection.set:38
#: matplotlib.artist.PolyCollection.set:49 of
msgid "unknown"
msgstr "desconocido"

#: matplotlib.collections.PolyCollection.set_verts:2 of
msgid "Set the vertices of the polygons."
msgstr "Establece los vértices de los polígonos."

#: matplotlib.collections.PolyCollection:10
#: matplotlib.collections.PolyCollection.set_verts:10 of
msgid "**verts**"
msgstr "**verts**"

#: matplotlib.collections.PolyCollection:8
#: matplotlib.collections.PolyCollection.set_verts:8 of
msgid "The sequence of polygons [*verts0*, *verts1*, ...] where each element *verts_i* defines the vertices of polygon *i* as a 2D array-like of shape (M, 2)."
msgstr "La secuencia de polígonos [*verts0*, *verts1*, donde cada elemento *verts_i* define los vértices del polígono *i* como una matriz 2D de forma (M, 2)."

#: matplotlib.collections.PolyCollection:21
#: matplotlib.collections.PolyCollection.set_verts:27 of
msgid "**closed**"
msgstr "**closed**"

#: of
msgid "bool, default: True"
msgstr "bool, por defecto: True"

#: matplotlib.collections.PolyCollection:20
#: matplotlib.collections.PolyCollection.set_verts:13 of
msgid "Whether the polygon should be closed by adding a CLOSEPOLY connection at the end."
msgstr "Si el polígono debe cerrarse añadiendo una conexión CLOSEPOLY al final."

#: matplotlib.collections.PolyCollection.set_verts_and_codes:2 of
msgid "Initialize vertices with path codes."
msgstr "Inicializa vértices con códigos de ruta."

#: matplotlib.collections.BrokenBarHCollection.span_where:2 of
msgid "Return a `.BrokenBarHCollection` that plots horizontal bars from over the regions in *x* where *where* is True.  The bars range on the y-axis from *ymin* to *ymax*"
msgstr "Devuelve un `.BrokenBarHCollection` que traza barras horizontales de las regiones en *x* donde *donde* es verdadero. El rango de barras en el eje Y va de *ymin* a *ymax*"

#: matplotlib.collections.BrokenBarHCollection.span_where:6 of
msgid "*kwargs* are passed on to the collection."
msgstr "*kwargs* son transmitidos a la colección."

#: matplotlib.collections.CircleCollection:1
#: matplotlib.collections.PathCollection:1
#: matplotlib.collections.PolyCollection:1
#: matplotlib.collections.RegularPolyCollection:1 of
msgid "Bases: :py:class:`matplotlib.collections._CollectionWithSizes`"
msgstr "Bases: :py:class:`matplotlib.collections._CollectionWithSizes`"

#: matplotlib.collections.CircleCollection:2 of
msgid "A collection of circles, drawn using splines."
msgstr "Una colección de círculos, dibujados con splines."

#: of
msgid "float or array-like"
msgstr "flotante o matriz"

#: matplotlib.collections.CircleCollection:29 of
msgid "The area of each circle in points^2."
msgstr "El área de cada círculo en puntos^2."

#: matplotlib.collections.Collection:1 of
msgid "Bases: :py:class:`matplotlib.artist.Artist`, :py:class:`matplotlib.cm.ScalarMappable`"
msgstr "Bases: :py:class:`matplotlib.artist.Artist`, :py:class:`matplotlib.cm.ScalarMappable`"

#: matplotlib.collections.Collection:2 of
msgid "Base class for Collections. Must be subclassed to be usable."
msgstr "Clase base para colecciones. Debe ser subclasificado para ser utilizable."

#: matplotlib.collections.Collection:4 of
msgid "A Collection represents a sequence of `.Patch`\\es that can be drawn more efficiently together than individually. For example, when a single path is being drawn repeatedly at different offsets, the renderer can typically execute a ``draw_marker()`` call much more efficiently than a series of repeated calls to ``draw_path()`` with the offsets put in one-by-one."
msgstr "Una colección representa una secuencia de `.Patch`\\es que se puede dibujar juntos de forma más eficiente que individualmente. Por ejemplo, cuando se dibuja una sola ruta repetidamente en diferentes desplazamientos, el renderizador normalmente puede ejecutar una llamada ``draw_marker()`` mucho más eficientemente que una serie de llamadas repetidas a ``draw_path()`` con los desplazamientos puestos en uno por uno."

#: matplotlib.collections.Collection:11 of
msgid "Most properties of a collection can be configured per-element. Therefore, Collections have \"plural\" versions of many of the properties of a `.Patch` (e.g. `.Collection.get_paths` instead of `.Patch.get_path`). Exceptions are the *zorder*, *hatch*, *pickradius*, *capstyle* and *joinstyle* properties, which can only be set globally for the whole collection."
msgstr "La mayoría de las propiedades de una colección se pueden configurar por elemento. Por lo tanto, las colecciones tienen versiones \"plural\" de muchas de las propiedades de un `.Patch` (por ejemplo, `.Collection. et_paths` en lugar de `.Patch.get_path`). Las excepciones son las propiedades *zorder*, *hatch*, *pickradius*, *capstyle* y *joinstyle*, que sólo pueden establecerse globalmente para toda la colección."

#: matplotlib.collections.Collection:17 of
msgid "Besides these exceptions, all properties can be specified as single values (applying to all elements) or sequences of values. The property of the ``i``\\th element of the collection is::"
msgstr "Además de estas excepciones, todas las propiedades pueden ser especificadas como valores únicos (aplicables a todos los elementos) o secuencias de valores. La propiedad del elemento ``i``\\th de la colección es::"

#: matplotlib.collections.Collection:23 of
msgid "Each Collection can optionally be used as its own `.ScalarMappable` by passing the *norm* and *cmap* parameters to its constructor. If the Collection's `.ScalarMappable` matrix ``_A`` has been set (via a call to `.Collection.set_array`), then at draw time this internal scalar mappable will be used to set the ``facecolors`` and ``edgecolors``, ignoring those that were manually passed in."
msgstr "Cada Colección puede ser usada opcionalmente como su propio `.ScalarMappable` pasando los parámetros *normal* y *cmap* a su constructor. Si la matriz `.ScalarMappable` de la colección ``_A`` ha sido establecida (a través de una llamada a `. ollection.set_array`), luego en el momento de dibujo, este mapeable escalar interno será usado para establecer los ``facecolors`` y ``edgecolors``, ignorando los que fueron pasados manualmente."

#: matplotlib.collections.Collection:56 matplotlib.collections.QuadMesh:86
#: matplotlib.collections.TriMesh:32 of
msgid "**edgecolors** : color or list of colors, default: :rc:`patch.edgecolor`"
msgstr "**colores** : color o lista de colores, por defecto: :rc:`patch.edgecolor`"

#: of
msgid "color or list of colors, default:"
msgstr "color o lista de colores, por defecto:"

#: matplotlib.collections.Collection:54 matplotlib.collections.QuadMesh:84
#: matplotlib.collections.TriMesh:30 of
msgid "Edge color for each patch making up the collection. The special value 'face' can be passed to make the edgecolor match the facecolor."
msgstr "Color del borde para cada parche que integra la colección. El valor especial 'cara' se puede pasar para hacer que el color del borde coincida con el color de facecolor."

#: matplotlib.collections.Collection:59 matplotlib.collections.QuadMesh:89
#: matplotlib.collections.TriMesh:35 of
msgid "**facecolors** : color or list of colors, default: :rc:`patch.facecolor`"
msgstr "**facecolors** : color o lista de colores, por defecto: :rc:`patch.facecolor`"

#: matplotlib.collections.Collection:59 matplotlib.collections.QuadMesh:89
#: matplotlib.collections.TriMesh:35 of
msgid "Face color for each patch making up the collection."
msgstr "Color de cara para cada parche que integra la colección."

#: matplotlib.collections.Collection:62 matplotlib.collections.QuadMesh:92
#: matplotlib.collections.TriMesh:38 of
msgid "**linewidths** : float or list of floats, default: :rc:`patch.linewidth`"
msgstr "**widths** : float o lista de floats, por defecto: :rc:`patch.linewidth`"

#: of
msgid "float or list of floats, default:"
msgstr "flotante o lista de flotantes, por defecto:"

#: matplotlib.collections.Collection:62 matplotlib.collections.QuadMesh:92
#: matplotlib.collections.TriMesh:38 of
msgid "Line width for each patch making up the collection."
msgstr "Ancho de línea para cada parche que integra la colección."

#: matplotlib.collections.Collection:72 matplotlib.collections.QuadMesh:102
#: matplotlib.collections.TriMesh:48 of
msgid "**linestyles**"
msgstr "**linestyles**"

#: of
msgid "str or tuple or list thereof, default: 'solid'"
msgstr "str o tuple o lista de ellos, por defecto: 'sólid'"

#: matplotlib.collections.Collection:65
#: matplotlib.collections.EventCollection:53 matplotlib.collections.QuadMesh:95
#: matplotlib.collections.TriMesh:41 of
msgid "Valid strings are ['solid', 'dashed', 'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples should be of the form::"
msgstr "Las cadenas válidas son ['sólidas', 'guiones', 'guiones', 'punto', '-', '--', '-.', ':']. Las tuplas de guión deben ser de la forma::"

#: matplotlib.collections.Collection:70 matplotlib.collections.QuadMesh:100
#: matplotlib.collections.TriMesh:46 of
msgid "where *onoffseq* is an even length tuple of on and off ink lengths in points. For examples, see :doc:`/gallery/lines_bars_and_markers/linestyles`."
msgstr "donde *onoffseq* es una tupla de longitud uniforme de longitudes de tinta en y en puntos de tinta. Por ejemplo, vea :doc:`/gallery/lines_bars_and_markers/linestyles`."

#: matplotlib.collections.Collection:76 matplotlib.collections.QuadMesh:106
#: matplotlib.collections.TriMesh:52 of
msgid "**capstyle** : `.CapStyle`-like, default: :rc:`patch.capstyle`"
msgstr "**capstyle** : `.CapStyle`-like, default: :rc:`patch.capstyle`"

#: matplotlib.collections.Collection:75 matplotlib.collections.QuadMesh:105
#: matplotlib.collections.TriMesh:51 of
msgid "CapStyle-like, default: rcParams[\"patch.capstyle\"]"
msgstr "CapStyle-like por defecto: rcParams[\"patch.capstyle\"]"

#: matplotlib.collections.Collection:75 matplotlib.collections.QuadMesh:105
#: matplotlib.collections.TriMesh:51 of
msgid "Style to use for capping lines for all paths in the collection. Allowed values are {'butt', 'projecting', 'round'}."
msgstr "Estilo a usar para líneas de tope para todas las rutas de la colección. Los valores permitidos son {'butt', 'projecting', 'round'}."

#: matplotlib.collections.Collection:80 matplotlib.collections.QuadMesh:110
#: matplotlib.collections.TriMesh:56 of
msgid "**joinstyle** : `.JoinStyle`-like, default: :rc:`patch.joinstyle`"
msgstr "**joinstyle** : `.JoinStyle`-like, default: :rc:`patch.joinstyle`"

#: matplotlib.collections.Collection:79 matplotlib.collections.QuadMesh:109
#: matplotlib.collections.TriMesh:55 of
msgid "JoinStyle-like, default: rcParams[\"patch.joinstyle\"]"
msgstr "JoinStyle-like, default: rcParams[\"patch.joinstyle\"]"

#: matplotlib.collections.Collection:79 matplotlib.collections.QuadMesh:109
#: matplotlib.collections.TriMesh:55 of
msgid "Style to use for joining lines for all paths in the collection. Allowed values are {'miter', 'round', 'bevel'}."
msgstr "Estilo a usar para unir líneas para todas las rutas de la colección. Los valores permitidos son {'miter', 'round', 'bevel'}."

#: matplotlib.collections.Collection:84 matplotlib.collections.QuadMesh:114
#: matplotlib.collections.TriMesh:60 of
msgid "**antialiaseds** : bool or list of bool, default: :rc:`patch.antialiased`"
msgstr "**antialiaseds** : bool o lista de bool, por defecto: :rc:`patch.antialiased`"

#: of
msgid "bool or list of bool, default:"
msgstr "libro o lista de bool, por defecto:"

#: matplotlib.collections.Collection:83 matplotlib.collections.QuadMesh:113
#: matplotlib.collections.TriMesh:59 of
msgid "Whether each patch in the collection should be drawn with antialiasing."
msgstr "Si cada parche en la colección debe ser dibujado con antialiasing."

#: of
msgid "(float, float) or list thereof, default: (0, 0)"
msgstr "(flotante, flotante) o lista de ellos, por defecto: (0, 0)"

#: matplotlib.collections.Collection:87 matplotlib.collections.QuadMesh:117
#: matplotlib.collections.TriMesh:63 of
msgid "A vector by which to translate each patch after rendering (default is no translation). The translation is performed in screen (pixel) coordinates (i.e. after the Artist's transform is applied)."
msgstr "Un vector por el que traducir cada parche después de renderizado (por defecto no es traducción). La traducción se realiza en coordenadas de pantalla (píxeles) (es decir, después de la transformación del Artista)."

#: matplotlib.collections.Collection:93 matplotlib.collections.QuadMesh:123
#: matplotlib.collections.TriMesh:69 of
msgid "**transOffset** : `~.transforms.Transform`, default: `.IdentityTransform`"
msgstr "**transOffset** : `~.transforms.Transform`, por defecto: `.IdentityTransform`"

#: matplotlib.collections.Collection:92 matplotlib.collections.QuadMesh:122
#: matplotlib.collections.TriMesh:68 of
msgid "Transform, default: IdentityTransform"
msgstr "Transforma, por defecto: IdentityTransform"

#: matplotlib.collections.Collection:92 matplotlib.collections.QuadMesh:122
#: matplotlib.collections.TriMesh:68 of
msgid "A single transform which will be applied to each *offsets* vector before it is used."
msgstr "Una única transformación que se aplicará a cada vector *offsets* antes de ser usado."

#: matplotlib.collections.Collection:98 matplotlib.collections.QuadMesh:128
#: matplotlib.collections.TriMesh:74 of
msgid "**norm** : `~.colors.Normalize`, optional"
msgstr "**normal** : `~.colors.Normalize`, opcional"

#: matplotlib.collections.Collection:97 matplotlib.collections.QuadMesh:127
#: matplotlib.collections.TriMesh:73 of
msgid "Normalize, optional"
msgstr "Normalizar, opcional"

#: matplotlib.collections.Collection:96 matplotlib.collections.QuadMesh:126
#: matplotlib.collections.TriMesh:72 of
msgid "Forwarded to `.ScalarMappable`. The default of ``None`` means that the first draw call will set ``vmin`` and ``vmax`` using the minimum and maximum values of the data."
msgstr "Reenviado a `.ScalarMappable`. El valor por defecto de ``Ninguno`` significa que la primera llamada de dibujo establecerá ``vmin`` y ``vmax`` usando los valores mínimos y máximos de los datos."

#: matplotlib.collections.Collection:102 matplotlib.collections.QuadMesh:132
#: matplotlib.collections.TriMesh:78 of
msgid "**cmap** : `~.colors.Colormap`, optional"
msgstr "**cmap** : `~.colors.Colormap`, opcional"

#: matplotlib.collections.Collection:101 matplotlib.collections.QuadMesh:131
#: matplotlib.collections.TriMesh:77 of
msgid "Colormap, optional"
msgstr "Mapa de colores, opcional"

#: matplotlib.collections.Collection:101 matplotlib.collections.QuadMesh:131
#: matplotlib.collections.TriMesh:77 of
msgid "Forwarded to `.ScalarMappable`. The default of ``None`` will result in :rc:`image.cmap` being used."
msgstr "Reenviado a `.ScalarMappable`. El valor predeterminado de ``Ninguno`` dará como resultado el uso de :rc:`image.cmap`."

#: matplotlib.collections.Collection:108 matplotlib.collections.QuadMesh:138
#: matplotlib.collections.TriMesh:84 of
msgid "**hatch**"
msgstr "**sombreo**"

#: of
msgid "str, optional"
msgstr "str, opcional"

#: matplotlib.collections.Collection:105 matplotlib.collections.QuadMesh:135
#: matplotlib.collections.TriMesh:81 of
msgid "Hatching pattern to use in filled paths, if any. Valid strings are ['/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*']. See :doc:`/gallery/shapes_and_collections/hatch_style_reference` for the meaning of each hatch type."
msgstr "Patrón de eclosión para usar en rutas rellenas, si las hay. Las cadenas válidas son ['/', '\\', '|', '-', '+', 'x', 'o', 'O', '. , '*']. Ver :doc:`/gallery/shapes_and_collections/hatch_style_reference` para ver el significado de cada tipo de colchón."

#: matplotlib.collections.Collection:116 matplotlib.collections.QuadMesh:146
#: matplotlib.collections.TriMesh:92 of
msgid "**pickradius**"
msgstr "**pickradius**"

#: of
msgid "float, default: 5.0"
msgstr "float, por defecto: 5.0"

#: matplotlib.collections.Collection:111 matplotlib.collections.QuadMesh:141
#: matplotlib.collections.TriMesh:87 of
msgid "If ``pickradius <= 0``, then `.Collection.contains` will return ``True`` whenever the test point is inside of one of the polygons formed by the control points of a Path in the Collection. On the other hand, if it is greater than 0, then we instead check if the test point is contained in a stroke of width ``2*pickradius`` following any of the Paths in the Collection."
msgstr "Si ``pickradius <= 0``, entonces `.Collection. ontains` devolverá ``True`` cada vez que el punto de prueba esté dentro de uno de los polígonos formados por los puntos de control de una ruta en la colección. Por otra parte, si es mayor que 0, entonces comprobamos si el punto de prueba está contenido en un trazo de ancho ``2*pickradius`` siguiendo cualquiera de las rutas de la colección."

#: of
msgid "list of str, default: None"
msgstr "lista de str, por defecto: Ninguna"

#: matplotlib.collections.Collection:119 matplotlib.collections.QuadMesh:149
#: matplotlib.collections.TriMesh:95 of
msgid "A URL for each patch to link to once drawn. Currently only works for the SVG backend. See :doc:`/gallery/misc/hyperlinks_sgskip` for examples."
msgstr "Una URL para cada parche a la que vincular una vez que se dibuje. Actualmente solo funciona para el backend SVG. Vea :doc:`/gallery/misc/hyperlinks_sgskip` para ejemplos."

#: matplotlib.collections.Collection:138
#: matplotlib.collections.LineCollection:59 matplotlib.collections.QuadMesh:168
#: matplotlib.collections.TriMesh:114 of
msgid "**zorder**"
msgstr "**zorder**"

#: of
msgid "float, default: 1"
msgstr "float, default: 1"

#: matplotlib.collections.Collection:124 matplotlib.collections.QuadMesh:154
#: matplotlib.collections.TriMesh:100 of
msgid "The drawing order, shared by all Patches in the Collection. See :doc:`/gallery/misc/zorder_demo` for all defaults and examples."
msgstr "El orden de dibujo, compartido por todos los parches en la distribución. Vea :doc:`/gallery/misc/zorder_demo` para todos los valores predeterminados y ejemplos."

#: matplotlib.artist.Collection.set:15 of
msgid ":meth:`antialiased <matplotlib.collections.Collection.set_antialiased>`"
msgstr ":meth:`antialias <matplotlib.collections.Collection.set_antialiased>`"

#: matplotlib.artist.Collection.set:24 of
msgid ":meth:`edgecolor <matplotlib.collections.Collection.set_edgecolor>`"
msgstr ":meth:`edgecolor <matplotlib.collections.Collection.set_edgecolor>`"

#: matplotlib.artist.Collection.set:25 of
msgid ":meth:`facecolor <matplotlib.collections.Collection.set_facecolor>`"
msgstr ":meth:`facecolor <matplotlib.collections.Collection.set_facecolor>`"

#: matplotlib.artist.Collection.set:32 of
msgid ":meth:`linestyle <matplotlib.collections.Collection.set_linestyle>`"
msgstr ":meth:`linestyle <matplotlib.collections.Collection.set_linestyle>`"

#: matplotlib.artist.Collection.set:33 of
msgid ":meth:`linewidth <matplotlib.collections.Collection.set_linewidth>`"
msgstr ":meth:`linewidth <matplotlib.collections.Collection.set_linewidth>`"

#: matplotlib.collections.EllipseCollection:1
#: matplotlib.collections.LineCollection:1
#: matplotlib.collections.PatchCollection:1 matplotlib.collections.QuadMesh:1
#: matplotlib.collections.TriMesh:1 of
msgid "Bases: :py:class:`matplotlib.collections.Collection`"
msgstr "Bases: :py:class:`matplotlib.collections.Collection`"

#: matplotlib.collections.EllipseCollection:2 of
msgid "A collection of ellipses, drawn using splines."
msgstr "Una colección de elipses dibujados con splines."

#: matplotlib.collections.EllipseCollection:29 of
msgid "**widths**"
msgstr "**widths**"

#: of
msgid "array-like"
msgstr "array-like"

#: matplotlib.collections.EllipseCollection:29 of
msgid "The lengths of the first axes (e.g., major axis lengths)."
msgstr "Las longitudes de los primeros ejes (por ejemplo, las mayores longitudes del eje)."

#: matplotlib.collections.EllipseCollection:32 of
msgid "**heights**"
msgstr "**alturas**"

#: matplotlib.collections.EllipseCollection:32 of
msgid "The lengths of second axes."
msgstr "Las longitudes de los ejes segundos."

#: matplotlib.collections.EllipseCollection:35 of
msgid "**angles**"
msgstr "**Ángulos**"

#: matplotlib.collections.EllipseCollection:35 of
msgid "The angles of the first axes, degrees CCW from the x-axis."
msgstr "Los ángulos de los primeros ejes, grados CCW del eje x."

#: matplotlib.collections.EllipseCollection:44 of
msgid "**units**"
msgstr "**Unidades**"

#: of
msgid "{'points', 'inches', 'dots', 'width', 'height', 'x', 'y', 'xy'}"
msgstr "{'points', 'inches', 'dots', 'width', 'height', 'x', 'y', 'xy'}"

#: matplotlib.collections.EllipseCollection:38 of
msgid "The units in which majors and minors are given; 'width' and 'height' refer to the dimensions of the axes, while 'x' and 'y' refer to the *offsets* data units. 'xy' differs from all others in that the angle as plotted varies with the aspect ratio, and equals the specified angle only when the aspect ratio is unity.  Hence it behaves the same as the `~.patches.Ellipse` with ``axes.transData`` as its transform."
msgstr "Las unidades en las que se dan los mayores y los menores; 'ancho' y 'altura' se refieren a las dimensiones de los ejes, mientras que 'x' y 'y' se refieren a las unidades de datos *offsets*. 'xy' difiere de todos los demás en que el ángulo como dibujado varía con la relación de aspecto, y equivale al ángulo especificado sólo cuando la relación de aspecto es unidad. Por lo tanto, se comporta lo mismo que el `~.patches.Ellipse` con ``axes.transData`` como su transforma."

#: matplotlib.collections.EllipseCollection:47 of
msgid "Forwarded to `Collection`."
msgstr "Reenviado a `Collection`."

#: matplotlib.collections.EventCollection:1 of
msgid "Bases: :py:class:`matplotlib.collections.LineCollection`"
msgstr "Bases: :py:class:`matplotlib.collections.LineCollection`"

#: matplotlib.collections.EventCollection:2 of
msgid "A collection of locations along a single axis at which an \"event\" occurred."
msgstr "Colección de ubicaciones a lo largo de un único eje en el que se produjo un \"evento\"."

#: matplotlib.collections.EventCollection:4 of
msgid "The events are given by a 1-dimensional array. They do not have an amplitude and are displayed as parallel lines."
msgstr "Los eventos son dados por una matriz 1-dimensional, no tienen amplitud y se muestran como líneas paralelas."

#: matplotlib.collections.EventCollection:31 of
msgid "**positions**"
msgstr "**posiciones**"

#: of
msgid "1D array-like"
msgstr "1D array-like"

#: matplotlib.collections.EventCollection:31 of
msgid "Each value is an event."
msgstr "Cada valor es un evento."

#: matplotlib.collections.EventCollection:36
#: matplotlib.collections.EventCollection.set_orientation:21 of
msgid "**orientation**"
msgstr "**orientación**"

#: of
msgid "{'horizontal', 'vertical'}, default: 'horizontal'"
msgstr "{'horizontal', 'vertical'}, por defecto: 'horizontal'"

#: matplotlib.collections.EventCollection:34 of
msgid "The sequence of events is plotted along this direction. The marker lines of the single events are along the orthogonal direction."
msgstr "La secuencia de acontecimientos está trazada a lo largo de esta dirección, las líneas marcadoras de los acontecimientos individuales van en la dirección ortogonal."

#: matplotlib.collections.EventCollection:40 of
msgid "**lineoffset**"
msgstr "**lineoffset**"

#: of
msgid "float, default: 0"
msgstr "float, default: 0"

#: matplotlib.collections.EventCollection:39 of
msgid "The offset of the center of the markers from the origin, in the direction orthogonal to *orientation*."
msgstr "La compensación del centro de los marcadores desde el origen, en la dirección ortogonal a la *orientación*."

#: matplotlib.collections.EventCollection:44 of
msgid "**linelength**"
msgstr "**longitud**"

#: matplotlib.collections.EventCollection:43 of
msgid "The total height of the marker (i.e. the marker stretches from ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``)."
msgstr "La altura total del marcador (es decir, el marcador estira desde ``lineoffset - linelength/2`` hasta ``lineoffset + linelength/2``)."

#: matplotlib.collections.EventCollection:47 of
msgid "**linewidth** : float or list thereof, default: :rc:`lines.linewidth`"
msgstr "**ancho de línea** : float o lista de ellos, por defecto: :rc:`lines.linewidth`"

#: of
msgid "float or list thereof, default:"
msgstr "flotante o lista de ellos, por defecto:"

#: matplotlib.collections.EventCollection:47 of
msgid "The line width of the event lines, in points."
msgstr "El ancho de la línea de las líneas del evento, en puntos."

#: matplotlib.collections.EventCollection:50 of
msgid "**color** : color or list of colors, default: :rc:`lines.color`"
msgstr "**color** : color o lista de colores, por defecto: :rc:`lines.color`"

#: matplotlib.collections.EventCollection:50 of
msgid "The color of the event lines."
msgstr "El color de las líneas de eventos."

#: matplotlib.collections.EventCollection:59 of
msgid "**linestyle**"
msgstr "**estilo de línea**"

#: matplotlib.collections.EventCollection:58 of
msgid "where *onoffseq* is an even length tuple of on and off ink in points."
msgstr "donde *onoffseq* es una tupla de longitud uniforme de tinta encendida y apagada en puntos."

#: matplotlib.collections.EventCollection:62 of
msgid "**antialiased** : bool or list thereof, default: :rc:`lines.antialiased`"
msgstr "**antialiased** : bool o lista de ellos, por defecto: :rc:`lines.antialiased`"

#: of
msgid "bool or list thereof, default:"
msgstr "libro o lista de ellos, por defecto:"

#: matplotlib.collections.EventCollection:62 of
msgid "Whether to use antialiasing for drawing the lines."
msgstr "Si usar antialiasing para dibujar las líneas."

#: matplotlib.collections.EventCollection:65 of
msgid "Forwarded to `.LineCollection`."
msgstr "Reenviado a `.LineCollection`."

#: ../../gallery/lines_bars_and_markers/eventcollection_demo.py:7
msgid "(`Source code <../gallery/lines_bars_and_markers/eventcollection_demo.py>`__, `png <../gallery/lines_bars_and_markers/eventcollection_demo.png>`__, `pdf <../gallery/lines_bars_and_markers/eventcollection_demo.pdf>`__)"
msgstr "(`Código fuente <../gallery/lines_bars_and_markers/eventcollection_demo.py>`__, `png <../gallery/lines_bars_and_markers/eventcollection_demo.png>`__, `pdf <../gallery/lines_bars_and_markers/eventcollection_demo.pdf>`__)"

#: matplotlib.collections.EventCollection.add_positions:2 of
msgid "Add one or more events at the specified positions."
msgstr "Añadir uno o más eventos en las posiciones especificadas."

#: matplotlib.collections.EventCollection.get_color:2 of
msgid "Return the color of the lines used to mark each event."
msgstr "Devuelve el color de las líneas utilizadas para marcar cada evento."

#: matplotlib.collections.EventCollection.get_linelength:2 of
msgid "Return the length of the lines used to mark each event."
msgstr "Devuelve la longitud de las líneas utilizadas para marcar cada evento."

#: matplotlib.collections.EventCollection.get_lineoffset:2 of
msgid "Return the offset of the lines used to mark each event."
msgstr "Devuelve el desplazamiento de las líneas utilizadas para marcar cada evento."

#: matplotlib.collections.EventCollection.get_linewidth:2 of
msgid "Get the width of the lines used to mark each event."
msgstr "Obtener el ancho de las líneas utilizadas para marcar cada evento."

#: matplotlib.collections.EventCollection.get_orientation:2 of
msgid "Return the orientation of the event line ('horizontal' or 'vertical')."
msgstr "Devuelve la orientación de la línea de evento ('horizontal' o 'vertical')."

#: matplotlib.collections.EventCollection.get_positions:2 of
msgid "Return an array containing the floating-point values of the positions."
msgstr "Devuelve una matriz que contiene los valores de coma flotante de las posiciones."

#: matplotlib.collections.LineCollection.get_segments:22 of
msgid "list"
msgstr "lista"

#: matplotlib.collections.LineCollection.get_segments:9 of
msgid "List of segments in the LineCollection. Each list item contains an array of vertices."
msgstr "Lista de segmentos en la Colección de líneas. Cada elemento de lista contiene una matriz de vértices."

#: matplotlib.collections.EventCollection.is_horizontal:2 of
msgid "True if the eventcollection is horizontal, False if vertical."
msgstr "Verdadero si la colección de eventos es horizontal, False si vertical."

#: matplotlib.artist.EventCollection.set:23
#: matplotlib.artist.LineCollection.set:23 of
msgid ":meth:`color <matplotlib.collections.LineCollection.set_color>`"
msgstr ":meth:`color <matplotlib.collections.LineCollection.set_color>`"

#: matplotlib.artist.EventCollection.set:24
#: matplotlib.artist.LineCollection.set:24 of
msgid ":meth:`colors <matplotlib.collections.LineCollection.set_color>`"
msgstr ":meth:`colores <matplotlib.collections.LineCollection.set_color>`"

#: matplotlib.artist.EventCollection.set:33 of
msgid ":meth:`linelength <matplotlib.collections.EventCollection.set_linelength>`"
msgstr ":meth:`longitud de línea <matplotlib.collections.EventCollection.set_linelength>`"

#: matplotlib.artist.EventCollection.set:34 of
msgid ":meth:`lineoffset <matplotlib.collections.EventCollection.set_lineoffset>`"
msgstr ":meth:`lineoffset <matplotlib.collections.EventCollection.set_lineoffset>`"

#: matplotlib.artist.EventCollection.set:40 of
msgid ":meth:`orientation <matplotlib.collections.EventCollection.set_orientation>`"
msgstr ":meth:`Orientación <matplotlib.collections.EventCollection.set_orientation>`"

#: matplotlib.artist.EventCollection.set:40 of
msgid "{'horizontal', 'vertical'}"
msgstr "{'horizontal', 'vertical'}"

#: matplotlib.artist.EventCollection.set:42
#: matplotlib.artist.LineCollection.set:39 of
msgid ":meth:`paths <matplotlib.collections.LineCollection.set_segments>`"
msgstr ":meth:`rutas <matplotlib.collections.LineCollection.set_segments>`"

#: matplotlib.artist.EventCollection.set:45 of
msgid ":meth:`positions <matplotlib.collections.EventCollection.set_positions>`"
msgstr ":meth:`posiciones <matplotlib.collections.EventCollection.set_positions>`"

#: matplotlib.artist.EventCollection.set:47
#: matplotlib.artist.LineCollection.set:43 of
msgid ":meth:`segments <matplotlib.collections.LineCollection.set_segments>`"
msgstr ":meth:`segments <matplotlib.collections.LineCollection.set_segments>`"

#: matplotlib.artist.EventCollection.set:53
#: matplotlib.artist.LineCollection.set:49 of
msgid ":meth:`verts <matplotlib.collections.LineCollection.set_segments>`"
msgstr ":meth:`verts <matplotlib.collections.LineCollection.set_segments>`"

#: matplotlib.collections.LineCollection.set_color:2 of
msgid "Set the edgecolor(s) of the LineCollection."
msgstr "Establece el color(es) del borde de la Colección Line."

#: matplotlib.collections.LineCollection.set_color:8 of
msgid "Single color (all lines have same color), or a sequence of rgba tuples; if it is a sequence the lines will cycle through the sequence."
msgstr "Un solo color (todas las líneas tienen el mismo color), o una secuencia de tubos rgba; si es una secuencia, las líneas circularán a través de la secuencia."

#: matplotlib.collections.EventCollection.set_linelength:2 of
msgid "Set the length of the lines used to mark each event."
msgstr "Establece la longitud de las líneas utilizadas para marcar cada evento."

#: matplotlib.collections.EventCollection.set_lineoffset:2 of
msgid "Set the offset of the lines used to mark each event."
msgstr "Establece el desplazamiento de las líneas utilizadas para marcar cada evento."

#: matplotlib.collections.EventCollection.set_orientation:2 of
msgid "Set the orientation of the event line."
msgstr "Establecer la orientación de la línea de eventos."

#: matplotlib.collections.EventCollection.set_positions:2 of
msgid "Set the positions of the events."
msgstr "Establecer las posiciones de los eventos."

#: matplotlib.collections.EventCollection.switch_orientation:2 of
msgid "Switch the orientation of the event line, either from vertical to horizontal or vice versus."
msgstr "Cambie la orientación de la línea de eventos, ya sea de vertical a horizontal o viceversa."

#: matplotlib.collections.LineCollection:2 of
msgid "Represents a sequence of `.Line2D`\\s that should be drawn together."
msgstr "Representa una secuencia de `.Line2D`\\s que debe ser dibujada juntos."

#: matplotlib.collections.LineCollection:4 of
msgid "This class extends `.Collection` to represent a sequence of `.Line2D`\\s instead of just a sequence of `.Patch`\\s. Just as in `.Collection`, each property of a *LineCollection* may be either a single value or a list of values. This list is then used cyclically for each element of the LineCollection, so the property of the ``i``\\th element of the collection is::"
msgstr "Esta clase extiende `.Collection` para representar una secuencia de `.Line2D`\\s en lugar de solo una secuencia de `.Patch`\\s. Al igual que en `.Collection`, cada propiedad de una *LineCollection* puede ser un solo valor o una lista de valores. Esta lista se utiliza cíclicamente para cada elemento de la Colección Line, por lo que la propiedad del elemento ``i``\\th de la colección es::"

#: matplotlib.collections.LineCollection:13 of
msgid "The properties of each member of a *LineCollection* default to their values in :rc:`lines.*` instead of :rc:`patch.*`, and the property *colors* is added in place of *edgecolors*."
msgstr "Las propiedades de cada miembro de una *LineCollection* predeterminada a sus valores en :rc:`lines. ` en lugar de :rc:`patch.*`, y la propiedad *colores* es añadida en lugar de *colores*."

#: matplotlib.collections.LineCollection:46 of
msgid "**segments**"
msgstr "**segmentos**"

#: matplotlib.collections.LineCollection:41 of
msgid "A sequence of (*line0*, *line1*, *line2*), where::"
msgstr "Una secuencia de (*linea0*, *línea1*, *línea2*), dónde::"

#: matplotlib.collections.LineCollection:45 of
msgid "or the equivalent numpy array with two columns. Each line can have a different number of segments."
msgstr "o la matriz numpy equivalente con dos columnas. Cada línea puede tener un número diferente de segmentos."

#: matplotlib.collections.LineCollection:49 of
msgid "**linewidths** : float or list of float, default: :rc:`lines.linewidth`"
msgstr "**widths** : float o lista de float, por defecto: :rc:`lines.linewidth`"

#: of
msgid "float or list of float, default:"
msgstr "flotante o lista de flotante, por defecto:"

#: matplotlib.collections.LineCollection:49 of
msgid "The width of each line in points."
msgstr "El ancho de cada línea en puntos."

#: matplotlib.collections.LineCollection:53 of
msgid "**colors** : color or list of color, default: :rc:`lines.color`"
msgstr "**colores** : color o lista de color, por defecto: :rc:`lines.color`"

#: of
msgid "color or list of color, default:"
msgstr "color o lista de colores, por defecto:"

#: matplotlib.collections.LineCollection:52 of
msgid "A sequence of RGBA tuples (e.g., arbitrary color strings, etc, not allowed)."
msgstr "Una secuencia de tubos RGBA (por ejemplo, cadenas de color arbitrarias, etc, no permitidas)."

#: matplotlib.collections.LineCollection:56 of
msgid "**antialiaseds** : bool or list of bool, default: :rc:`lines.antialiased`"
msgstr "**antialiaseds** : bool o lista de bool, por defecto: :rc:`lines.antialiased`"

#: matplotlib.collections.LineCollection:56 of
msgid "Whether to use antialiasing for each line."
msgstr "Si se utiliza el suavizado de bordes para cada línea."

#: of
msgid "int, default: 2"
msgstr "int, default: 2"

#: matplotlib.collections.LineCollection:59 of
msgid "zorder of the lines once drawn."
msgstr "zorder de las líneas una vez dibujado."

#: matplotlib.collections.LineCollection:68 of
msgid "**facecolors**"
msgstr "**facecolors**"

#: of
msgid "color or list of color, default: 'none'"
msgstr "color o lista de color, por defecto: 'ninguno'"

#: matplotlib.collections.LineCollection:62 of
msgid "When setting *facecolors*, each line is interpreted as a boundary for an area, implicitly closing the path from the last point to the first point. The enclosed area is filled with *facecolor*. In order to manually specify what should count as the \"interior\" of each line, please use `.PathCollection` instead, where the \"interior\" can be specified by appropriate usage of `~.path.Path.CLOSEPOLY`."
msgstr "Cuando se establecen *colores facecolors*, cada línea se interpreta como un límite para un área, cerrando implícitamente el camino desde el último punto hasta el primer punto. El área cerrada está llena de *facecolor*. Para especificar manualmente lo que debe contar como el \"interior\" de cada línea, por favor use `. athCollection` en su lugar, donde el \"interior\" puede ser especificado por el uso apropiado de `~.path.Path.CLOSEPOLY`."

#: matplotlib.collections.PatchCollection:2 of
msgid "A generic collection of patches."
msgstr "Una colección genérica de parches."

#: matplotlib.collections.PatchCollection:4 of
msgid "This makes it easier to assign a colormap to a heterogeneous collection of patches."
msgstr "Esto facilita la asignación de un mapa de colores a una colección heterogénea de parches."

#: matplotlib.collections.PatchCollection:7 of
msgid "This also may improve plotting speed, since PatchCollection will draw faster than a large number of patches."
msgstr "Esto también puede mejorar la velocidad de trazado, ya que PatchCollection dibujará más rápido que un gran número de parches."

#: matplotlib.collections.PatchCollection:30 of
msgid "*patches*"
msgstr "*parches*"

#: matplotlib.collections.PatchCollection:29 of
msgid "a sequence of Patch objects.  This list may include a heterogeneous assortment of different patch types."
msgstr "Una secuencia de objetos parches. Esta lista puede incluir una variedad heterogenea de diferentes tipos de parches."

#: matplotlib.collections.PatchCollection:36 of
msgid "*match_original*"
msgstr "*coincide con el original*"

#: matplotlib.collections.PatchCollection:33 of
msgid "If True, use the colors and linewidths of the original patches.  If False, new colors may be assigned by providing the standard collection arguments, facecolor, edgecolor, linewidths, norm or cmap."
msgstr "Si es verdadero, use los colores y el ancho de línea de los parches originales. Si False, se pueden asignar nuevos colores proporcionando los argumentos de la colección estándar, color cara, borde, ancho de línea, norma o mapa."

#: matplotlib.collections.PatchCollection:38 of
msgid "If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds* are None, they default to their `.rcParams` patch setting, in sequence form."
msgstr "Si alguno de los *edgecolors*, *facecolors*, *lineas*, *antialiaseds* no son Ninguno, ellos por defecto a su parche `.rcParams`, en forma secuencia."

#: matplotlib.collections.PatchCollection:42 of
msgid "The use of `~matplotlib.cm.ScalarMappable` functionality is optional. If the `~matplotlib.cm.ScalarMappable` matrix ``_A`` has been set (via a call to `~.ScalarMappable.set_array`), at draw time a call to scalar mappable will be made to set the face colors."
msgstr "El uso de la funcionalidad `~matplotlib.cm.ScalarMappable` es opcional. Si se ha establecido la matriz `~matplotlib.cm.ScalarMappable` ``_A`` (a través de una llamada a `~. calarMappable.set_array`), en el momento del dibujo, se hará una llamada al mapeable escalar para establecer los colores de la cara."

#: matplotlib.artist.PatchCollection.set:38 of
msgid ":meth:`paths <matplotlib.collections.PatchCollection.set_paths>`"
msgstr ":meth:`rutas <matplotlib.collections.PatchCollection.set_paths>`"

#: matplotlib.collections.PathCollection:2 of
msgid "A collection of `~.path.Path`\\s, as created by e.g. `~.Axes.scatter`."
msgstr "Una colección de `~.path.Path`\\s, creada por ej. `~.Axes.scatter`."

#: matplotlib.collections.PathCollection:29 of
msgid "**paths** : list of `.path.Path`"
msgstr "**rutas** : lista de `.path.Path`"

#: of
msgid "list of"
msgstr "lista de"

#: matplotlib.collections.PathCollection:29 of
msgid "The paths that will make up the `.Collection`."
msgstr "Los caminos que compondrán el `.Collection`."

#: matplotlib.collections.PathCollection:32 of
msgid "The factor by which to scale each drawn `~.path.Path`. One unit squared in the Path's data space is scaled to be ``sizes**2`` points when rendered."
msgstr "El factor por el que escalar cada uno dibujado `~.path.Path`. Una unidad cuadrada en el espacio de datos de la Ruta es escalada para ser ``tamaños**2`` puntos cuando se procesa."

#: matplotlib.collections.PathCollection.legend_elements:2 of
msgid "Create legend handles and labels for a PathCollection."
msgstr "Crea asas y etiquetas de leyenda para una Colección de Rutas."

#: matplotlib.collections.PathCollection.legend_elements:4 of
msgid "Each legend handle is a `.Line2D` representing the Path that was drawn, and each label is a string what each Path represents."
msgstr "Cada nombre de leyenda es un `.Line2D` que representa la ruta que fue dibujada, y cada etiqueta es una cadena de lo que representa cada ruta."

#: matplotlib.collections.PathCollection.legend_elements:7 of
msgid "This is useful for obtaining a legend for a `~.Axes.scatter` plot; e.g.::"
msgstr "Esto es útil para obtener una leyenda para una gráfica `~.Axes.scatter`; e.g.::"

#: matplotlib.collections.PathCollection.legend_elements:13 of
msgid "creates three legend elements, one for each color with the numerical values passed to *c* as the labels."
msgstr "crea tres elementos de leyenda, uno para cada color con los valores numéricos pasados a *c* como las etiquetas."

#: matplotlib.collections.PathCollection.legend_elements:16 of
msgid "Also see the :ref:`automatedlegendcreation` example."
msgstr "También vea el ejemplo de :ref:`automatedlegendcreation`."

#: matplotlib.collections.PathCollection.legend_elements:24 of
msgid "**prop**"
msgstr "**prop**"

#: of
msgid "{\"colors\", \"sizes\"}, default: \"colors\""
msgstr "{\"colores\", \"tamaños\"}, por defecto: \"colores\""

#: matplotlib.collections.PathCollection.legend_elements:21 of
msgid "If \"colors\", the legend handles will show the different colors of the collection. If \"sizes\", the legend will show the different sizes. To set both, use *kwargs* to directly edit the `.Line2D` properties."
msgstr "Si \"colores\", la leyenda maneja los diferentes colores de la colección. Si \"tamaños\", la leyenda mostrará los diferentes tamaños. Para establecer ambos, use *kwargs* para editar directamente las propiedades `.Line2D`."

#: matplotlib.collections.PathCollection.legend_elements:35 of
msgid "**num** : int, None, \"auto\" (default), array-like, or `~.ticker.Locator`"
msgstr "**num** : int, ninguno, \"auto\" (por defecto), array-like o `~.ticker.Locator`"

#: of
msgid "int, None, \"auto\" (default), array-like, or"
msgstr "int, Ninguno, \"auto\" (por defecto), tipo array o"

#: matplotlib.collections.PathCollection.legend_elements:27 of
msgid "Target number of elements to create. If None, use all unique elements of the mappable array. If an integer, target to use *num* elements in the normed range. If *\"auto\"*, try to determine which option better suits the nature of the data. The number of created elements may slightly deviate from *num* due to a `~.ticker.Locator` being used to find useful locations. If a list or array, use exactly those elements for the legend. Finally, a `~.ticker.Locator` can be provided."
msgstr "Número de elementos objetivo a crear. Si Ninguno, use todos los elementos únicos de la matriz mapeable. Si un entero, el objetivo para usar elementos *num* en el rango normalizado. Si *\"auto\"*, trate de determinar qué opción se ajusta mejor a la naturaleza de los datos. El número de elementos creados puede desviar ligeramente de *num* debido a que `~.ticker.Locator` se utiliza para encontrar ubicaciones útiles. Si una lista o matriz, usa exactamente esos elementos para la leyenda. Finalmente, un `~.ticker.Locator` puede ser proporcionado."

#: matplotlib.collections.PathCollection.legend_elements:40 of
msgid "**fmt** : str, `~matplotlib.ticker.Formatter`, or None (default)"
msgstr "**fmt** : str, `~matplotlib.ticker.Formatter`, o Ninguno (por defecto)"

#: of
msgid "str,"
msgstr "str,"

#: matplotlib.collections.PathCollection.legend_elements:38 of
msgid "The format or formatter to use for the labels. If a string must be a valid input for a `.StrMethodFormatter`. If None (the default), use a `.ScalarFormatter`."
msgstr "El formato o formato a utilizar para las etiquetas. Si una cadena debe ser una entrada válida para un `. trMethodFormatter`. Si Ninguno (el predeterminado), utilice un `.ScalarFormatter`."

#: matplotlib.collections.PathCollection.legend_elements:49 of
msgid "**func** : function, default: ``lambda x: x``"
msgstr "**func** : function, default: ``lambda x: x``"

#: of
msgid "function, default:"
msgstr "función, por defecto:"

#: matplotlib.collections.PathCollection.legend_elements:43 of
msgid "Function to calculate the labels.  Often the size (or color) argument to `~.Axes.scatter` will have been pre-processed by the user using a function ``s = f(x)`` to make the markers visible; e.g. ``size = np.log10(x)``.  Providing the inverse of this function here allows that pre-processing to be inverted, so that the legend labels have the correct values; e.g. ``func = lambda x: 10**x``."
msgstr "Función para calcular las etiquetas. A menudo el argumento de tamaño (o color) a `~.Axes. catter` será preprocesado por el usuario usando una función ``s = f(x)`` para hacer que los marcadores sean visibles; p. ej. ``size = np.log10(x)``. Proveer aquí el reverso de esta función permite que se invierta ese preprocesamiento, para que las etiquetas de la leyenda tengan los valores correctos; . ``func = lambda x: 10**x``."

#: matplotlib.collections.PathCollection.legend_elements:52 of
msgid "Allowed keyword arguments are *color* and *size*. E.g. it may be useful to set the color of the markers if *prop=\"sizes\"* is used; similarly to set the size of the markers if *prop=\"colors\"* is used. Any further parameters are passed onto the `.Line2D` instance. This may be useful to e.g. specify a different *markeredgecolor* or *alpha* for the legend handles."
msgstr "Los argumentos de palabra clave permitidos son de *color* y *tamaño*. puede ser útil establecer el color de los marcadores si se utiliza *prop=\"sizes\"*; del mismo modo para ajustar el tamaño de los marcadores si se utiliza *prop=\"colores\"*. Cualquier parámetro adicional se pasa a la instancia `.Line2D`. Esto puede ser útil para por ejemplo especificar un *markeredgecolor* diferente o *alpha* para los asientos de la leyenda."

#: matplotlib.collections.PathCollection.legend_elements:62 of
msgid "**handles** : list of `.Line2D`"
msgstr "**handles** : lista de `.Line2D`"

#: matplotlib.collections.PathCollection.legend_elements:62 of
msgid "Visual representation of each element of the legend."
msgstr "Representación visual de cada elemento de la leyenda."

#: matplotlib.collections.PathCollection.legend_elements:77 of
msgid "**labels**"
msgstr "**labels**"

#: of
msgid "list of str"
msgstr "lista de str"

#: matplotlib.collections.PathCollection.legend_elements:65 of
msgid "The string labels for elements of the legend."
msgstr "Las etiquetas de cuerda para elementos de la leyenda."

#: matplotlib.artist.PathCollection.set:38 of
msgid ":meth:`paths <matplotlib.collections.PathCollection.set_paths>`"
msgstr ":meth:`rutas <matplotlib.collections.PathCollection.set_paths>`"

#: of
msgid "array-like, default: None"
msgstr "como array-like, default: ninguno"

#: matplotlib.collections.PolyCollection:13 of
msgid "Squared scaling factors for the polygons. The coordinates of each polygon *verts_i* are multiplied by the square-root of the corresponding entry in *sizes* (i.e., *sizes* specify the scaling of areas). The scaling is applied before the Artist master transform."
msgstr "Los factores de escala cuadrados para los polígonos. Las coordenadas de cada polígono *verts_i* se multiplican por la raíz cuadrada de la entrada correspondiente en *tamaños* (i. ., *sizes* especifica la escala de áreas. La escala se aplica antes de la transforma maestra del artista."

#: matplotlib.collections.QuadMesh:2 of
msgid "Class for the efficient drawing of a quadrilateral mesh."
msgstr "Clase para el dibujo eficiente de una malla cuadrilateral."

#: matplotlib.collections.QuadMesh:4 of
msgid "A quadrilateral mesh is a grid of M by N adjacent qudrilaterals that are defined via a (M+1, N+1) grid of vertices. The quadrilateral (m, n) is defined by the vertices ::"
msgstr "Una malla cuadrícula cuadrilátero es una cuadrícula de M por N cuadriláteros adyacentes que se definen a través de una cuadrícula (M+1, N+1) de vértices. El cuadrilátero (m, n) está definido por los vértices ::"

#: matplotlib.collections.QuadMesh:14 of
msgid "The mesh need not be regular and the polygons need not be convex."
msgstr "La malla no tiene por qué ser regular y los polígonos no necesitan ser convexos."

#: matplotlib.collections.QuadMesh:20 of
msgid "**coordinates**"
msgstr "**coordenadas**"

#: of
msgid "(M+1, N+1, 2) array-like"
msgstr "(M+1, N+1, 2) array-like"

#: matplotlib.collections.QuadMesh:19 of
msgid "The vertices. ``coordinates[m, n]`` specifies the (x, y) coordinates of vertex (m, n)."
msgstr "Los vértices. ``coordenadas[m, n]`` especifica las coordenadas (x, y) del vértice (m, n)."

#: matplotlib.collections.QuadMesh:23 of
msgid "**antialiased**"
msgstr "**antialias**"

#: matplotlib.collections.QuadMesh:34 of
msgid "**shading**"
msgstr "**sombreando**"

#: of
msgid "{'flat', 'gouraud'}, default: 'flat'"
msgstr "{'flat', 'gouraud'}, por defecto: 'plano'"

#: matplotlib.collections.QuadMesh:38 of
msgid "Unlike other `.Collection`\\s, the default *pickradius* of `.QuadMesh` is 0, i.e. `~.Artist.contains` checks whether the test point is within any of the mesh quadrilaterals."
msgstr "A diferencia de otros `.Collection`\\s, el *pickradius* predeterminado de `.QuadMesh` es 0, es decir, `~.Artist.contains` comprueba si el punto de prueba está dentro de alguno de los cuadriláteros de la malla."

#: matplotlib.collections.QuadMesh:42 of
msgid "There exists a deprecated API version ``QuadMesh(M, N, coords)``, where the dimensions are given explicitly and ``coords`` is a (M*N, 2) array-like. This has been deprecated in Matplotlib 3.5. The following describes the semantics of this deprecated API."
msgstr "Existe una versión obsoleta de la API ``QuadMesh(M, N, coords)``, donde las dimensiones se dan explícitamente y ``coords`` es un array (M*N, 2) . Esto ha sido obsoleto en Matplotlib 3.5. A continuación se describen las semánticas de esta API obsoleta."

#: matplotlib.collections.QuadMesh:47 of
msgid "A quadrilateral mesh consists of a grid of vertices. The dimensions of this array are (*meshWidth* + 1, *meshHeight* + 1). Each vertex in the mesh has a different set of \"mesh coordinates\" representing its position in the topology of the mesh. For any values (*m*, *n*) such that 0 <= *m* <= *meshWidth* and 0 <= *n* <= *meshHeight*, the vertices at mesh coordinates (*m*, *n*), (*m*, *n* + 1), (*m* + 1, *n* + 1), and (*m* + 1, *n*) form one of the quadrilaterals in the mesh. There are thus (*meshWidth* * *meshHeight*) quadrilaterals in the mesh.  The mesh need not be regular and the polygons need not be convex."
msgstr "Una malla cuadrícula cuadrilátero consiste en una cuadrícula de vértices. Las dimensiones de esta matriz son (*Ancho de mesa* + 1, *altura de mesa* + 1). Cada vértice en la malla tiene un conjunto diferente de \"coordenadas de malla que representan su posición en la topología de la malla. Para cualquier valor (*m*, *n*) tal que 0 <= *m* <= *meshWidth* y 0 <= *n* <= *meshHeight*, los vértices en coordenadas de malla (*m*, *n*), (*m*, *n* + 1), (*m* + 1, *n* + 1), y (*m* + 1, *n*) forman uno de los cuadriláteros de la malla. Hay así (*meshWidth* * *meshHeight*) cuadriláteros en la malla."

#: matplotlib.collections.QuadMesh:58 of
msgid "A quadrilateral mesh is represented by a (2 x ((*meshWidth* + 1) * (*meshHeight* + 1))) numpy array *coordinates*, where each row is the *x* and *y* coordinates of one of the vertices.  To define the function that maps from a data point to its corresponding color, use the :meth:`set_cmap` method.  Each of these arrays is indexed in row-major order by the mesh coordinates of the vertex (or the mesh coordinates of the lower left vertex, in the case of the colors)."
msgstr "Una malla cuadrilátero está representada por un (2 x ((*ancho de la mesa* + 1) * (*altura de la mesa* + 1))) arreglo numpy *coordenadas*, donde cada registro es las coordenadas *x* y *y* de uno de los vértices. Para definir la función que mapea de un dato a su color correspondiente, utiliza el método :meth:`set_cmap`. Cada uno de estos arreglos se indexa en orden mayor de filas por las coordenadas de malla del vértice (o las coordenadas de malla del vértice inferior izquierdo, en el caso de los colores)."

#: matplotlib.collections.QuadMesh:66 of
msgid "For example, the first entry in *coordinates* is the coordinates of the vertex at mesh coordinates (0, 0), then the one at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and so on."
msgstr "Por ejemplo, la primera entrada en *coordenadas* son las coordenadas del vértice en las coordenadas de la malla (0, 0), luego el de (0, 1), luego en (0, 2) . (0, meshWidth), (1, 0), (1, 1), etc."

#: matplotlib.collections.QuadMesh.convert_mesh_to_paths:2
#: matplotlib.collections.QuadMesh.convert_mesh_to_triangles:2 of
msgid "[*Deprecated*]"
msgstr "[*Deprecated*]"

#: matplotlib.collections.QuadMesh.convert_mesh_to_paths:16
#: matplotlib.collections.QuadMesh.convert_mesh_to_triangles:16 of
msgid "\\"
msgstr "\\"

#: matplotlib.collections.QuadMesh.get_coordinates:2 of
msgid "Return the vertices of the mesh as an (M+1, N+1, 2) array."
msgstr "Devuelve los vértices de la malla como un arreglo (M+1, N+1, 2) ."

#: matplotlib.collections.QuadMesh.get_coordinates:4 of
msgid "M, N are the number of quadrilaterals in the rows / columns of the mesh, corresponding to (M+1, N+1) vertices. The last dimension specifies the components (x, y)."
msgstr "M, N son el número de cuadriláteros en las filas / columnas de la malla, correspondientes a vértices (M+1, N+1). La última dimensión especifica los componentes (x, y)."

#: matplotlib.artist.QuadMesh.set:16 of
msgid ":meth:`array <matplotlib.collections.QuadMesh.set_array>`"
msgstr ":meth:`array <matplotlib.collections.QuadMesh.set_array>`"

#: matplotlib.artist.QuadMesh.set:16 of
msgid "(M, N) array-like or M*N array-like"
msgstr "(M, N) array-like o M*N array"

#: matplotlib.collections.QuadMesh.set_array:2 of
msgid "Set the data values."
msgstr "Establecer los valores de datos."

#: matplotlib.collections.QuadMesh.set_array:8 of
msgid "If the values are provided as a 2D grid, the shape must match the coordinates grid. If the values are 1D, they are reshaped to 2D. M, N follow from the coordinates grid, where the coordinates grid shape is (M, N) for 'gouraud' *shading* and (M+1, N+1) for 'flat' shading."
msgstr "Si los valores se proporcionan como una cuadrícula 2D, la forma debe coincidir con la cuadrícula de coordenadas. Si los valores son 1D, se reconfiguran a 2D. M, N siguen de la cuadrícula de coordenadas, donde la forma de cuadrícula de coordenadas es (M, N) para 'gouraud' *sombreado* y (M+1, N+1) para el sombreado 'plano'."

#: matplotlib.collections.RegularPolyCollection:2 of
msgid "A collection of n-sided regular polygons."
msgstr "Una colección de polígonos regulares de su propio lado."

#: matplotlib.collections.StarPolygonCollection:2 of
msgid "Draw a collection of regular stars with *numsides* points."
msgstr "Dibuja una colección de estrellas regulares con puntos *numéricas*."

#: matplotlib.collections.TriMesh:2 of
msgid "Class for the efficient drawing of a triangular mesh using Gouraud shading."
msgstr "Clase para el dibujo eficiente de una malla triangular usando sombreado de Gouraud."

#: matplotlib.collections.TriMesh:4 of
msgid "A triangular mesh is a `~matplotlib.tri.Triangulation` object."
msgstr "Una malla triangular es un objeto `~matplotlib.tri.Triangulation`."

#: matplotlib.collections.TriMesh.convert_mesh_to_paths:2 of
msgid "Convert a given mesh into a sequence of `.Path` objects."
msgstr "Convierte una malla dada en una secuencia de objetos `.Path`."

#: matplotlib.collections.TriMesh.convert_mesh_to_paths:4 of
msgid "This function is primarily of use to implementers of backends that do not directly support meshes."
msgstr "Esta función es principalmente de uso para implementadores de backends que no soportan directamente las mallas."

